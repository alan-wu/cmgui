!*******************************************************************************
! FILE : element_tool.uil
!
! LAST MODIFIED : 5 July 2002
!
! DESCRIPTION :
! Element tool icon with dialog widgets for controlling settings.
!===============================================================================
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is cmgui part of cmiss.
 *
 * The Initial Developer of the Original Code is
 * Auckland Uniservices Ltd, Auckland, New Zealand.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
module element_tool_module
	version = 'v1.0'

procedure
	elem_tool_id_select_elems_btn;
	elem_tool_id_select_faces_btn;
	elem_tool_id_select_lines_btn;
	elem_tool_id_command_field_btn;
	elem_tool_id_command_field_form;

	elem_tool_select_lines_btn_CB;
	elem_tool_select_faces_btn_CB;
	elem_tool_select_elems_btn_CB;
	elem_tool_command_field_btn_CB;
	elem_tool_destroy_selected_CB;

identifier
	!Pointer to data specific to this instance of the elem_tool widget
	elem_tool_structure;
	!The gap between widgets
	widget_spacing;
	!fonts here
	normal_font;
	button_font;
	list_font;
	heading_font;

value
	black  : color('black',  foreground);
	blue   : color('blue',   foreground);
	green  : color('green',  foreground);
	red    : color('red',    foreground);
	white  : color('white',  foreground);
	yellow : color('yellow', foreground);
	lightgray : color('lightgray', foreground);
	darkgray  : color('darkgray', foreground);
	interactive_tool_colour_table:
		color_table(
		black='o',
		red='R',
		yellow='Y',
		green='G',
		white='W',
		lightgray='+',
		darkgray='#',
		foreground color='.',
		background color=' ');

	element_tool_icon: exported icon(color_table=interactive_tool_colour_table,
			'              ...               ',
			'              ...               ',
			'            . ... .             ',
			'          .         .           ',
			'     ....             ....      ',
			'     ...               ...      ',
			'     ... .           . ...      ',
			'           .  ...  . RRR        ',
			'      .      ..... RRRRR.       ',
			'              ...RRRRRRR        ',
			'      .         RRR  RRR.       ',
			'               .RRR . RR        ',
			'      .         RRR .. R.       ',
			'               .RRR ...         ',
			'     ...        RRR .... .      ',
			'     ...       .RRR .....       ',
			'     ... .      RRR ......      ',
			'           .  ...RR .......     ',
			'             .....  ........    ',
			'              ...   .....       ',
			'                    .. ..       ',
			'                    .   ..      ',
			'                        ..      ',
			'                         ..     ',
			'       .                 ..  .  ',
			'  .... .                     .  ',
			'  .    .  .  ....   .  ...  ... ',
			'  ...  . . . . . . . . .  .  .  ',
			'  .    . ... . . . ... .  .  .  ',
			'  .    . .   . . . .   .  .  .  ',
			'  .... .  .. . . .  .. .  .  .  ',
			'                                ');


object
!******************************************************************************
	element_tool: XmForm
	{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_FORM;
			};
		controls
			{
  		XmToggleButtonGadget elem_tool_select_elems_btn;
  		XmToggleButtonGadget elem_tool_select_faces_btn;
  		XmToggleButtonGadget elem_tool_select_lines_btn;
			XmRowColumn elem_tool_command_field_entry;
			XmSeparatorGadget elem_tool_separator1;
			XmPushButtonGadget elem_tool_destroy_selected_btn;
			};
		};
!*******************************************************************************
  elem_tool_select_elems_btn: XmToggleButtonGadget
    {
    arguments
      {
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
      XmNlabelString = compound_string("Select elements");
      XmNalignment = XmALIGNMENT_BEGINNING;
      XmNfontList = button_font;
      };
    callbacks
      {
      MrmNcreateCallback = procedure
				elem_tool_id_select_elems_btn(elem_tool_structure);
      XmNvalueChangedCallback = procedure
				elem_tool_select_elems_btn_CB(elem_tool_structure);
      };
    };
!*******************************************************************************
  elem_tool_select_faces_btn: XmToggleButtonGadget
    {
    arguments
      {
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = elem_tool_select_elems_btn;
			XmNbottomAttachment = XmATTACH_NONE;
      XmNlabelString = compound_string("Select face elements");
      XmNalignment = XmALIGNMENT_BEGINNING;
      XmNfontList = button_font;
      };
    callbacks
      {
      MrmNcreateCallback = procedure
				elem_tool_id_select_faces_btn(elem_tool_structure);
      XmNvalueChangedCallback = procedure
				elem_tool_select_faces_btn_CB(elem_tool_structure);
      };
    };
!*******************************************************************************
  elem_tool_select_lines_btn: XmToggleButtonGadget
    {
    arguments
      {
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = elem_tool_select_faces_btn;
			XmNbottomAttachment = XmATTACH_NONE;
      XmNlabelString = compound_string("Select line elements");
      XmNalignment = XmALIGNMENT_BEGINNING;
      XmNfontList = button_font;
      };
    callbacks
      {
      MrmNcreateCallback = procedure
				elem_tool_id_select_lines_btn(elem_tool_structure);
      XmNvalueChangedCallback = procedure
				elem_tool_select_lines_btn_CB(elem_tool_structure);
      };
    };
!*******************************************************************************
  elem_tool_command_field_entry: XmRowColumn
    {
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = elem_tool_select_lines_btn;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNspacing = 0;
			XmNorientation = XmHORIZONTAL;
			XmNpacking = XmPACK_TIGHT;
			};
    controls
      {
      XmToggleButtonGadget elem_tool_command_field_btn;
      XmForm elem_tool_command_field_form;
      };
    };
  elem_tool_command_field_btn: XmToggleButtonGadget
    {
    arguments
      {
      XmNlabelString = compound_string("Command field:");
      XmNalignment = XmALIGNMENT_BEGINNING;
      XmNfontList = button_font;
      };
		callbacks
			{
			MrmNcreateCallback = procedure
				elem_tool_id_command_field_btn(elem_tool_structure);
      XmNvalueChangedCallback = procedure
				elem_tool_command_field_btn_CB(elem_tool_structure);
			};
    };
	elem_tool_command_field_form: XmForm
		{
		callbacks
			{
			MrmNcreateCallback = procedure
				elem_tool_id_command_field_form(elem_tool_structure);
			};
		};
!*******************************************************************************
	elem_tool_separator1: XmSeparatorGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = elem_tool_command_field_entry;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		};
!*******************************************************************************
	elem_tool_destroy_selected_btn: XmPushButtonGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = elem_tool_separator1;
			XmNbottomAttachment = XmATTACH_NONE;
      XmNfontList = button_font;
      XmNlabelString = compound_string("Destroy selected");
      XmNalignment = XmALIGNMENT_CENTER;
			};
    callbacks
      {
			XmNactivateCallback = procedure
				elem_tool_destroy_selected_CB(elem_tool_structure);
			};
		};
!*******************************************************************************
end module;

