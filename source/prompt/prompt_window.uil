!*******************************************************************************
! FILE : prompt_window.uil
!
! LAST MODIFIED : 25 February 1995
!
! DESCRIPTION :
! The widgets/gadgets for the prompt window.
!===============================================================================
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is cmgui part of cmiss.
 *
 * The Initial Developer of the Original Code is
 * Auckland Uniservices Ltd, Auckland, New Zealand.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
module Prompt_window
		names = case_sensitive

procedure
		identify_prompt_history;
		identify_prompt_reply;
		get_reply;

identifier
		prompt_window_structure;

value
		small_widget_spacing : 2;
		large_widget_spacing : 4;

object
		prompt_window: XmForm
				{
				arguments
						{
						XmNborderWidth = 0;
						XmNautoUnmanage = false;
						XmNdefaultPosition = false;
						XmNresizePolicy = XmRESIZE_ANY;
						XmNdialogTitle =
						compound_string("Prompt Window");
!						XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
						};
				controls
						{
						XmScrolledWindow scrolled_window;
						XmText prompt_reply;
						};
				};
		scrolled_window: XmScrolledWindow
				{
				arguments
						{
						XmNborderWidth = 0;
						XmNtopAttachment = XmATTACH_FORM;
						XmNleftAttachment = XmATTACH_FORM;
						XmNrightAttachment = XmATTACH_FORM;
						XmNbottomAttachment = XmATTACH_WIDGET;
						XmNtopOffset = small_widget_spacing;
						XmNleftOffset = small_widget_spacing;
						XmNrightOffset = small_widget_spacing;
						XmNbottomOffset = small_widget_spacing;
						XmNbottomWidget = XmText prompt_reply;
!            XmNvisualPolicy = XmSTATIC;
						XmNscrollBarDisplayPolicy = XmSTATIC;
!            XmNscrollingPolicy = XmCONSTANT;
						XmNworkWindow = XmText prompt_history;
						};
				controls
						{
						XmText prompt_history;
						};
				};
		prompt_history: XmText
				{
				arguments
						{
						XmNeditMode = XmMULTI_LINE_EDIT;
						XmNeditable = false;
!            XmNnavigationType = XmNONE;
						XmNwordWrap = true;
						XmNsensitive = true;
						XmNcursorPositionVisible = false;
						};
				callbacks
						{
						MrmNcreateCallback = procedures
								{
								identify_prompt_history(prompt_window_structure);
								};
						};
				};
		prompt_reply: XmText
				{
				arguments
						{
						XmNeditMode = XmSINGLE_LINE_EDIT;
						XmNleftAttachment = XmATTACH_FORM;
						XmNrightAttachment = XmATTACH_FORM;
						XmNbottomAttachment = XmATTACH_FORM;
						XmNleftOffset = small_widget_spacing;
						XmNrightOffset = small_widget_spacing;
						XmNbottomOffset = small_widget_spacing;
						};
				callbacks
						{
						XmNactivateCallback = procedures
								{
								get_reply(prompt_window_structure);
								};
						MrmNcreateCallback = procedures
								{
								identify_prompt_reply(prompt_window_structure);
								};
						};
				};

end module;

