!*******************************************************************************
!FILE : graphics_window.uil
!
!LAST MODIFIED : 8 September 2000
!
!DESCRIPTION :
!The widgets/gadgets for the 3-D graphics window
!===============================================================================
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is cmgui part of cmiss.
 *
 * The Initial Developer of the Original Code is
 * Auckland Uniservices Ltd, Auckland, New Zealand.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
module Graphics_window
	names = case_sensitive

procedure
! ---------|---------|---------|- 31 characters max
	gwin_id_selection_list;
	gwin_id_control_panel;
	gwin_id_viewing_form;
	gwin_id_viewing_area1;
	gwin_id_viewing_area2;
	gwin_id_viewing_area3;
	gwin_id_viewing_area4;
	gwin_id_view_all_btn;
	gwin_id_print_btn;
	gwin_id_time_edit_form;
	gwin_id_perspective_btn;
	gwin_id_layout_mode_form;
	gwin_id_orthographic_form;
	gwin_id_ortho_up_option;
	gwin_id_ortho_up_menu;
	gwin_id_ortho_front_btn;
	gwin_id_interactive_tool_form;
	gwin_destroy_CB;
	gwin_selection_list_CB;
	gwin_view_all_btn_CB;
	gwin_print_btn_CB;
	gwin_perspective_btn_CB;
	gwin_ortho_up_menu_CB;
	gwin_ortho_front_btn_CB;

identifier
	gwin_structure;
	button_font;
	heading_font;

!*******************************************************************************
!Graphics window widget
!*******************************************************************************
object
	graphics_window: XmForm
		{
		arguments
			{
			XmNshadowThickness = 0;
			XmNborderWidth = 0;
			XmNdefaultPosition = false;
			XmNautoUnmanage = false;
			};
		controls
			{
			XmForm gwin_control_panel_space;
			XmForm gwin_viewing_form;
			};
		callbacks
			{
			XmNdestroyCallback = procedure gwin_destroy_CB();
			};
		};
!*******************************************************************************
!The control panel is nested in this space form as the actual control panel
!is unmanaged before the shell is managed so that it does not expand the height
!of the shell.  This form keeps a width so that when the control panel is managed
!back in it doesn't encroach on the viewing area space.
	gwin_control_panel_space: XmForm
		{
		arguments
			{
			XmNwidth = 120;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_FORM;
			};
		controls
			{
	      XmForm gwin_control_panel;
			};
		};
!*******************************************************************************
	gwin_control_panel: XmForm
		{
		arguments
			{
			XmNwidth = 120;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNborderWidth = 0;
			XmNresizable = false;
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_FORM;
			};
		controls
			{
			XmPushButtonGadget gwin_view_all_btn;
			XmPushButtonGadget gwin_print_btn;
			XmForm gwin_time_edit_form;
			XmToggleButtonGadget gwin_perspective_btn;
			XmSeparatorGadget gwin_separator1;
			XmForm gwin_layout_mode_entry;
			XmRowColumn gwin_orthographic_form;
			XmSeparatorGadget gwin_separator2;
			XmForm gwin_interactive_tool_form;
!			XmSeparatorGadget gwin_separator3;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_control_panel(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_viewing_form: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = 1;
!			XmNleftOffset = graphics_window_border_width;
			XmNleftWidget = gwin_control_panel_space;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 1;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 1;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 1;
			XmNfractionBase = 2;
			XmNhorizontalSpacing = 0;
			XmNverticalSpacing = 0;
			};
		controls
			{
			XmForm gwin_viewing_area1;
			XmForm gwin_viewing_area2;
			XmForm gwin_viewing_area3;
			XmForm gwin_viewing_area4;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_viewing_form(gwin_structure);
			};
		};
! top left:
	gwin_viewing_area1: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_POSITION;
			XmNleftPosition = 0;
			XmNleftOffset = 1;
!Build the initial window for one scene viewer
			XmNrightAttachment = XmATTACH_POSITION;
			XmNrightPosition = 2;
			XmNrightOffset = 1;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomPosition = 2;
			XmNbottomOffset = 1;
			XmNtopAttachment = XmATTACH_POSITION;
			XmNtopPosition = 0;
			XmNtopOffset = 1;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_viewing_area1(gwin_structure);
			};
		};
! top right:
	gwin_viewing_area2: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_POSITION;
			XmNleftPosition = 1;
			XmNleftOffset = 1;
			XmNrightAttachment = XmATTACH_POSITION;
			XmNrightPosition = 2;
			XmNrightOffset = 1;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomPosition = 1;
			XmNbottomOffset = 1;
			XmNtopAttachment = XmATTACH_POSITION;
			XmNtopPosition = 0;
			XmNtopOffset = 1;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_viewing_area2(gwin_structure);
			};
		};
! bottom left:
	gwin_viewing_area3: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_POSITION;
			XmNleftPosition = 0;
			XmNleftOffset = 1;
			XmNrightAttachment = XmATTACH_POSITION;
			XmNrightPosition = 1;
			XmNrightOffset = 1;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomPosition = 2;
			XmNbottomOffset = 1;
			XmNtopAttachment = XmATTACH_POSITION;
			XmNtopPosition = 1;
			XmNtopOffset = 1;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_viewing_area3(gwin_structure);
			};
		};
! bottom right:
	gwin_viewing_area4: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_POSITION;
			XmNleftPosition = 1;
			XmNleftOffset = 1;
			XmNrightAttachment = XmATTACH_POSITION;
			XmNrightPosition = 2;
			XmNrightOffset = 1;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomPosition = 2;
			XmNbottomOffset = 1;
			XmNtopAttachment = XmATTACH_POSITION;
			XmNtopPosition = 1;
			XmNtopOffset = 1;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_viewing_area4(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_view_all_btn: XmPushButtonGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNlabelString = compound_string("View All");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_CENTER;
			};
		callbacks
			{
			MrmNcreateCallback = procedure
				gwin_id_view_all_btn(gwin_structure);
			XmNactivateCallback = procedure
				gwin_view_all_btn_CB(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_print_btn: XmPushButtonGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_view_all_btn;
			XmNlabelString = compound_string("Save as...");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_CENTER;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_print_btn(gwin_structure);
			XmNactivateCallback = procedure gwin_print_btn_CB(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_time_edit_form: XmForm
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_print_btn;
!      XmNsensitive = false;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure
				gwin_id_time_edit_form(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_perspective_btn: XmToggleButtonGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_time_edit_form;
			XmNlabelString = compound_string("Perspective");
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNfontList = button_font;
!      XmNsensitive = false;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure
				gwin_id_perspective_btn(gwin_structure);
			XmNvalueChangedCallback = procedure
				gwin_perspective_btn_CB(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_separator1: XmSeparatorGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_perspective_btn;
			};
		};
!*******************************************************************************
	gwin_layout_mode_entry: XmForm
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_NONE;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_separator1;
			};
		controls
			{
			XmForm gwin_layout_mode_form;
			};
		};
	gwin_layout_mode_form: XmForm
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_FORM;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_layout_mode_form(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_orthographic_form: XmRowColumn
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_layout_mode_entry;
!			XmNentryAlignment = XmALIGNMENT_END;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNspacing = 0;
			XmNborderWidth = 0;
			};
		controls
			{
			XmRowColumn gwin_ortho_up_entry;
			XmRowColumn gwin_ortho_front_entry;
			};
		callbacks
			{
			MrmNcreateCallback = procedure gwin_id_orthographic_form(gwin_structure);
			};
		};
  gwin_ortho_up_entry: XmRowColumn
    {
		arguments
			{
!Uncomment the following to reduce size of rowcolumn.
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNspacing = 0;
			XmNorientation = XmHORIZONTAL;
			XmNpacking = XmPACK_TIGHT;
			};
    controls
      {
      XmLabelGadget gwin_ortho_up_label;
			XmOptionMenu gwin_ortho_up_option;
      };
    };
  gwin_ortho_front_entry: XmRowColumn
    {
		arguments
			{
!Uncomment the following to reduce size of rowcolumn.
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNspacing = 0;
			XmNorientation = XmHORIZONTAL;
			XmNpacking = XmPACK_TIGHT;
			};
    controls
      {
      XmLabelGadget gwin_ortho_front_label;
			XmPushButtonGadget gwin_ortho_front_btn;
      };
    };
!*******************************************************************************
	gwin_ortho_up_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString = compound_string("Up:");
!			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNfontList = button_font;
			};
		};
	gwin_ortho_up_option: XmOptionMenu
		{
		arguments
			{
!      XmNlabelString = compound_string("Up:");
			XmNuserData = gwin_structure;
			};
		controls
			{
			XmPulldownMenu gwin_ortho_up_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedure
				gwin_id_ortho_up_option(gwin_structure);
			};
		};
	gwin_ortho_up_menu: XmPulldownMenu
		{
		arguments
			{
!      XmNborderWidth = 1;
			XmNbuttonFontList = button_font;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure
				gwin_id_ortho_up_menu(gwin_structure);
			XmNentryCallback = procedure
				gwin_ortho_up_menu_CB(gwin_structure);
			};
		controls
			{
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString = compound_string("x");
					XmNfontList = button_font;
					XmNuserData = 1;
					};
				};
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString = compound_string("y");
					XmNfontList = button_font;
					XmNuserData = 2;
					};
				};
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString = compound_string("z");
					XmNfontList = button_font;
					XmNuserData = 3;
					};
				};
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString = compound_string("-x");
					XmNfontList = button_font;
					XmNuserData = 4;
					};
				};
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString = compound_string("-y");
					XmNfontList = button_font;
					XmNuserData = 5;
					};
				};
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString = compound_string("-z");
					XmNfontList = button_font;
					XmNuserData = 6;
					};
				};
			};
		};
	gwin_ortho_front_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString = compound_string("Front:");
!			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNfontList = button_font;
			};
		};
	gwin_ortho_front_btn: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = compound_string("??");
			XmNfontList = button_font;
			XmNuserData = gwin_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure
				gwin_id_ortho_front_btn(gwin_structure);
			XmNactivateCallback = procedure
				gwin_ortho_front_btn_CB(gwin_structure);
			};
		};
!*******************************************************************************
	gwin_separator2: XmSeparatorGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_orthographic_form;
			};
		};
!*******************************************************************************
  gwin_interactive_tool_form: XmForm
    {
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_separator2;
			};
    callbacks
      {
      MrmNcreateCallback = procedure
        gwin_id_interactive_tool_form(gwin_structure);
      };
    };
!*******************************************************************************
	gwin_separator3: XmSeparatorGadget
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = gwin_interactive_tool_form;
			};
		};
!*******************************************************************************
end module;
