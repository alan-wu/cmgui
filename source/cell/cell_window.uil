!*******************************************************************************
! FILE : cell_window.uil
!
! LAST MODIFIED : 31 January 2001
!
! DESCRIPTION :
! The widgets/gadgets for the Cell window.
!===============================================================================
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is cmgui part of cmiss.
 *
 * The Initial Developer of the Original Code is
 * Auckland Uniservices Ltd, Auckland, New Zealand.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
module Cell_Window
	names = case_sensitive

procedure
	id_export_button;
	file_open_and_read;
	file_open_and_write;
	close_model_callback;
	exit_callback;
	variables_button_callback;
	calculate_button_callback;
	show_scene_callback;
	distributed_callback;
	id_distributed_toggle;
	show_unemap_button_callback;
	clear_unemap_button_callback;
	save_signals_toggle_changed_cb;
	cell_window_id_unemap_button;
	cell_window_id_3d_toolbar;
	cell_window_id_3d_form;

identifier
	cell_window_structure;
	model_file_open_data;
	model_file_save_data;
	ipcell_file_save_data;

value
	sash_width : 50;
	small_widget_spacing : 1;
	large_widget_spacing : 4;
	max_pane_size : 1000;
	min_pane_size : 150;

object
	cell_window: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNdefaultPosition = false;
			XmNresizePolicy = XmRESIZE_ANY;
			XmNdialogTitle = compound_string("Cell");
			};
		controls
			{
			XmForm menu_form;
			XmForm cell_3d_toolbar;
			XmForm cell_3d_form;
			};
		};
	menu_form: XmForm
		{
		arguments
			{
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = small_widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = small_widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = small_widget_spacing;
			};
		controls
			{
			XmMenuBar menu_bar;
			XmRowColumn menu_rowcol;
			XmMenuBar help_menu_bar;
			};
		};
	menu_bar: XmMenuBar
		{
		arguments
			{
			XmNspacing = large_widget_spacing;
			XmNshadowThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmCascadeButton file_button;
			XmCascadeButton unemap_button;
			};
		};
	file_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("File");
			};
		controls
			{
			XmPulldownMenu file_pulldown_menu;
			};
		};
	file_pulldown_menu: XmPulldownMenu
		{
		controls
			{
			XmCascadeButton open_button;
			XmCascadeButton save_button;
			XmSeparator
				{
				};
			XmPushButton close_model_button;
			XmPushButton exit_button;
			};
		};
	open_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Open");
			};
		controls
			{
			XmPulldownMenu open_menu;
			};
		};
	open_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton open_model_button;
			};
		};
	open_model_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Cell model");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				file_open_and_read(model_file_open_data);
				};
			};
		};
	save_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Save");
			};
		controls
			{
			XmPulldownMenu save_menu;
			};
		};
	save_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton save_model_button;
			XmPushButton save_ipcell_button;
			XmPushButton export_button;
			};
		};
	save_model_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Cell model");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				file_open_and_write(model_file_save_data);
				};
			};
		};
	save_ipcell_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Cell model to ipcell");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				file_open_and_write(ipcell_file_save_data);
				};
			};
		};
	export_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Export CMISS files");
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_export_button(cell_window_structure);
				};
			};
		};
	close_model_button:  XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Close");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				close_model_callback(cell_window_structure);
				};
			};
		};
	exit_button:  XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Exit");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				exit_callback(cell_window_structure);
				};
			};
		};
	unemap_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("UnEmap");
			};
		controls
			{
			XmPulldownMenu unemap_pulldown_menu;
			};
		};
	unemap_pulldown_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton show_unemap_button;
			XmPushButton clear_unemap_button;
			XmSeparator
				{
				};
			XmToggleButton save_signals_toggle;
			};
		};
	show_unemap_button:  XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Show");
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				cell_window_id_unemap_button(cell_window_structure);
				};
			XmNactivateCallback = procedures
				{
				show_unemap_button_callback(cell_window_structure);
				};
			};
		};
	clear_unemap_button:  XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Clear");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				clear_unemap_button_callback(cell_window_structure);
				};
			};
		};
	save_signals_toggle: XmToggleButton
		{
		arguments
			{
			XmNlabelString = compound_string("Save signals");
			XmNset = false;
			};
		callbacks
			{
			XmNvalueChangedCallback = procedures
				{
				save_signals_toggle_changed_cb(cell_window_structure);
				};
			};
		};
	menu_rowcol: XmRowColumn
		{
		arguments
			{
			XmNtopOffset = small_widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNleftOffset = large_widget_spacing;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = menu_bar;
			XmNrightOffset = large_widget_spacing;
			XmNrightAttachment = XmATTACH_WIDGET;
			XmNrightWidget = help_menu_bar;
			XmNbottomOffset = small_widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNentryAlignment = XmALIGNMENT_CENTER;
			XmNpacking = XmPACK_TIGHT;
			XmNorientation = XmHORIZONTAL;
			};
		controls
			{
			XmPushButton variables_button;
			XmPushButton calculate_button;
			XmToggleButton show_scene_toggle;
			XmToggleButton distributed_toggle;
			};
		};
	calculate_button:  XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Calculate");
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				calculate_button_callback(
					cell_window_structure);
				};
			};
		};
	show_scene_toggle:  XmToggleButton
		{
		arguments
			{
			XmNlabelString = compound_string("Show scene");
			XmNset = false;
			};
		callbacks
			{
			XmNvalueChangedCallback = procedures
				{
				show_scene_callback(cell_window_structure);
				};
			};
		};	
	distributed_toggle:  XmToggleButton
		{
		arguments
			{
			XmNlabelString = compound_string("Distributed");
			XmNset = false;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_distributed_toggle(cell_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				distributed_callback(cell_window_structure);
				};
			};
		};
	variables_button:  XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Variables");
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				variables_button_callback(
					cell_window_structure);
				};
			};
		};
	help_menu_bar: XmMenuBar
		{
		arguments
			{
			XmNspacing = large_widget_spacing;
			XmNshadowThickness = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmCascadeButton help_button;
			};
		};
	help_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Help");
			};
		controls
			{
			XmPulldownMenu help_pulldown_menu;
			};
		};
	help_pulldown_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton help_index_button;
			XmCascadeButton help_describe_button;
			};
		};
	help_index_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Index");
			};
		callbacks
			{
!			XmNactivateCallback = procedures
!				{
!				help_index_callback(cell_window_structure);
!				};
			};
		};
	help_describe_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Describe");
			};
		controls
			{
			XmPulldownMenu describe_menu;
			};
		};
	describe_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton describe_parameter_button;
			XmPushButton describe_component_button;
			};
		};
	describe_parameter_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("parameter");
			};
		};
	describe_component_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("component");
			};
		};
	cell_3d_toolbar: XmForm
		{
		arguments
			{
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = small_widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = small_widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = small_widget_spacing;
			XmNtopWidget = menu_form;
			XmNborderWidth = 0;
			XmNdefaultPosition = false;
			XmNresizePolicy = XmRESIZE_ANY;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				cell_window_id_3d_toolbar(cell_window_structure);
				};
			};
		};
	cell_3d_form: XmForm
		{
		arguments
			{
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = small_widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = small_widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = small_widget_spacing;
			XmNtopWidget = cell_3d_toolbar;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = small_widget_spacing;
			XmNborderWidth = 0;
			XmNdefaultPosition = false;
			XmNresizePolicy = XmRESIZE_ANY;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				cell_window_id_3d_form(cell_window_structure);
				};
			};
		};
end module;
