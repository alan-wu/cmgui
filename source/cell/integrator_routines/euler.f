      SUBROUTINE EULER(AII,AIO,CONTROL,MODEL,NUM_ODES,NUM_VARS,
     '  SIZES,VARIANT,ARI,ARO,DERIVED,PARAMETERS,PROTOCOL,
     '  T,DT,TIME,YQS,RHSROUTINE,INTEGER_CONTROL,REAL_CONTROL,
     '  INTEGER_WORK,REAL_WORK,ERROR)

      IMPLICIT NONE

      INCLUDE '/product/cmiss/cm/source/cell_reserved.inc'
      INCLUDE '/product/cmiss/cm/source/integrator_reserved.inc'

      !Parameter list
      INTEGER AII(*),AIO(*),CONTROL(*),MODEL(*),NUM_ODES,NUM_VARS,
     '  SIZES(11),VARIANT
      INTEGER INTEGER_CONTROL(*),INTEGER_WORK(*)
      REAL*8 ARI(*),ARO(*),DERIVED(*),PARAMETERS(*),PROTOCOL(*),TIME(*),
     '  YQS(*),T,DT
      REAL*8 REAL_CONTROL(*),REAL_WORK(*)
      CHARACTER ERROR*(*)
      EXTERNAL RHSROUTINE
      !Local variables
      INTEGER i

      IF(INTEGER_CONTROL(SET_DEFAULT_VALUES).EQ.1) THEN
        REAL_CONTROL(ABSOLUTE_ERROR) = 0.0d0 !Unused
        REAL_CONTROL(RELATIVE_ERROR) = 0.0d0 !Unused
        REAL_CONTROL(MAXIMUM_STEP_SIZE) = 0.0d0 !Unused
        INTEGER_CONTROL(ERROR_CODE) = 0
        INTEGER_CONTROL(MAXIMUM_ITERATIONS) = 0 !Unused
        INTEGER_CONTROL(MAXIMUM_ORDER) = 0 !Unused
        INTEGER_CONTROL(ERROR_TYPE) = 0 !Unused
        INTEGER_CONTROL(EXTEND_INTERVAL) = 0 !Unused
        INTEGER_CONTROL(USE_ROUNDING_CONTROL) = 0 !Unused
        INTEGER_CONTROL(INTEGER_WORK_SIZE) = -1
        INTEGER_CONTROL(REAL_WORK_SIZE) = -1
        INTEGER_CONTROL(GET_WORK_SIZES) = 0
      ELSE IF(INTEGER_CONTROL(GET_WORK_SIZES).EQ.1) THEN
        INTEGER_CONTROL(REAL_WORK_SIZE) = NUM_VARS
        INTEGER_CONTROL(INTEGER_WORK_SIZE) = 0
      ELSE
        IF(INTEGER_CONTROL(REAL_WORK_SIZE).GE.(NUM_VARS)) THEN
          TIME(TCell) = T
          TIME(DTCell) = DT
          CALL RHSROUTINE(TIME,YQS,REAL_WORK,CONTROL,MODEL,
     '      SIZES,VARIANT,DERIVED,PARAMETERS,PROTOCOL,AII,AIO,ARI,ARO,
     '      INTEGER_CONTROL(ERROR_CODE))
          IF(INTEGER_CONTROL(ERROR_CODE).NE.0) THEN
            ERROR='>>Error reported from RHSROUTINE'
            INTEGER_CONTROL(ERROR_CODE) = RHS_ERROR
          ELSE
            
            DO i=1,NUM_ODES
              YQS(i)=YQS(i)+DT*REAL_WORK(i)
            ENDDO !i
            
          ENDIF !IF(ERR.NE.0)

        ELSE
          INTEGER_CONTROL(ERROR_CODE) = INCREASE_REAL_WORK
          ERROR = '>>Error: REAL_WORK_SIZE needs to be >= NUM_VARS'
        ENDIF
      ENDIF !IF(INTEGER_CONTROL(GET_WORK_SIZES).EQ.1) THEN ... ELSE
      
      RETURN
      END
