!*******************************************************************************
! FILE : data_grabber.uil
!
! LAST MODIFIED : 21 December 1994
!
! DESCRIPTION :
! Contains a description, a slider and a text field for editing the value
! of a variable.
!===============================================================================
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is cmgui part of cmiss.
 *
 * The Initial Developer of the Original Code is
 * Auckland Uniservices Ltd, Auckland, New Zealand.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
module data_grabber
	version = 'v1.0'

procedure
	dg_identify_button(integer);
	dg_control_CB(integer);
	dg_menu_CB(integer);
	dg_destroy_CB();
	dg_calib_identify_button(integer);
	dg_calib_control_CB(integer);
	dg_calib_destroy_CB();
	dg_stream_mode_CB();
	dg_stream_distance_CB;
	dg_id_stream_distance_entry;
  	dg_id_stream_distance_text;

value
	dg_font : font_table(font('-*-HELVETICA-MEDIUM-R-*--*-80-*-*-*-*-ISO8859-1'));
	dg_font_large :
		font_table(font('-*-HELVETICA-BOLD-R-*--*-100-*-*-*-*-ISO8859-1'));
	dg_font_bold :
		font_table(font('-*-HELVETICA-BOLD-R-*--*-80-*-*-*-*-ISO8859-1'));
	dg_text_margin : 1;
		!???GMH.  How much gap around the text - small so the dialog is small ?

value
	shadow_size : 2;

identifier
	! the gap between widgets
	widget_spacing;
	! pointer to data specific to this instance of the dg control dialog
	dg_structure;
	dg_menu_bar_ID;
	dg_calib_frame_ID;
	dg_calib_rowcol_ID;
	dg_calib_form_ID;
	dg_calib_button_ID;
	dg_calib_label_ID;
	dg_data_rowcol_ID;
	dg_data_form_ID;
	dg_data_label_ID;
	dg_calib_menu_button_ID;
	dg_calib_control_ID;
	dg_calib_scroll_ID;
	dg_calib_cont_record_ID;
	dg_calib_cont_solve_ID;
	dg_calib_cont_delete_ID;
	dg_calib_cont_clear_ID;


object
	dg_widget: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		controls
			{
			XmMenuBar dg_menu_bar;
			XmFrame dg_data_frame;
			XmFrame dg_calib_frame;
			XmForm dg_streaming_form;
			};
		callbacks
			{
			XmNdestroyCallback = procedure dg_destroy_CB();
			};
		};
	dg_calib_frame: XmFrame
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = 0;
			XmNleftWidget = XmFrame dg_data_frame;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = 0;
			XmNtopWidget = dg_menu_bar;
			XmNuserData = dg_structure;
			};
		controls
			{
			XmRowColumn dg_calib_rowcol;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_calib_frame_ID);
			};
		};
	dg_data_frame: XmFrame
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = 0;
			XmNtopWidget = dg_menu_bar;
			XmNuserData = dg_structure;
			};
		controls
			{
			XmRowColumn dg_data_rowcol;
			};
		};
	dg_streaming_form: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = 0;
			XmNtopWidget = dg_data_frame;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		controls
			{
			XmToggleButton dg_streaming_mode_toggle;
			XmForm dg_stream_distance_entry;
			};
		};
!**************************************************************************************
!**************************************************************************************
	dg_menu_bar: XmMenuBar
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_menu_bar_ID);
			};
		};
	dg_calib_rowcol: XmRowColumn
		{
		arguments
			{
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_calib_rowcol_ID);
			};
		};
	dg_calib_form: XmForm
		{
		arguments
			{
			XmNuserData = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomOffset = 0;
			XmNbottomPosition = 100;
			};
		controls
			{
			XmLabelGadget dg_calib_label;
			XmPushButton dg_calib_button;
			XmForm dg_calib_data_form;
			};
		};
	dg_data_rowcol: XmRowColumn
		{
		arguments
			{
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_data_rowcol_ID);
			};
		};
	dg_data_form: XmForm
		{
		arguments
			{
			XmNuserData = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_POSITION;
			XmNbottomOffset = 0;
			XmNbottomPosition = 100;
			};
		controls
			{
			XmLabelGadget dg_data_label;
			XmForm dg_data_data_form;
			};
		};
!*******************************************************************************
	dg_calib_data_form: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_WIDGET;
			XmNrightOffset = 0;
			XmNrightWidget = XmPushButton dg_calib_button;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = 0;
			XmNtopWidget = XmLabelGadget dg_calib_label;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_calib_form_ID);
			};
		};
	dg_calib_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Calibrate");
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_NONE;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = 0;
			XmNtopWidget = XmLabelGadget dg_calib_label;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_calib_button_ID);
			XmNactivateCallback = procedure dg_control_CB(dg_calib_button_ID);
			};
		};
	dg_calib_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Description");
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_calib_label_ID);
			};
		};
	dg_data_data_form: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = 0;
			XmNtopWidget = XmLabelGadget dg_data_label;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_data_form_ID);
			};
		};
	dg_data_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Description");
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedure dg_identify_button(dg_data_label_ID);
			};
		};
	dg_calib_menu_button: XmCascadeButton
		{
		arguments
			{
			XmNshadowThickness = shadow_size;
			XmNlabelString =
			compound_string("Show Calib.");
			XmNfontList = dg_font_large;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_identify_button(dg_calib_menu_button_ID);
			XmNactivateCallback = procedure dg_menu_CB(dg_calib_menu_button_ID);
			};
		};
!*******************************************************************************
	dg_calib_widget: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNuserData = 0;
			};
		controls
			{
			XmRowColumn dg_calib_control;
			XmScrolledList dg_calib_scroll;
			};
		callbacks
			{
			XmNdestroyCallback = procedure dg_calib_destroy_CB();
			};
		};
	dg_calib_control: XmRowColumn
		{
		arguments
			{
			XmNorientation = XmHORIZONTAL;
			XmNpacking = XmPACK_COLUMN;
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_NONE;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNuserData = dg_structure;
			};
		controls
			{
			XmPushButton dg_calib_control_record;
			XmPushButton dg_calib_control_solve;
			XmPushButton dg_calib_control_delete;
			XmPushButton dg_calib_control_clear;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_calib_identify_button(dg_calib_control_ID);
			};
		};
	dg_calib_scroll: XmScrolledList
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_WIDGET;
			XmNbottomOffset = 0;
			XmNbottomWidget = XmRowColumn dg_calib_control;
			XmNscrollingPolicy = XmAUTOMATIC;
			XmNlistSizePolicy = XmRESIZE_IF_POSSIBLE;
			XmNselectionPolicy = XmEXTENDED_SELECT;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_calib_identify_button(dg_calib_scroll_ID);
			};
		};
	dg_calib_control_record: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Record");
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_calib_identify_button(dg_calib_cont_record_ID);
			XmNactivateCallback =
				procedure dg_calib_control_CB(dg_calib_cont_record_ID);
			};
		};
	dg_calib_control_solve: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Solve");
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_calib_identify_button(dg_calib_cont_solve_ID);
			XmNactivateCallback =
				procedure dg_calib_control_CB(dg_calib_cont_solve_ID);
			};
		};
	dg_calib_control_delete: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Delete");
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_calib_identify_button(dg_calib_cont_delete_ID);
			XmNactivateCallback =
				procedure dg_calib_control_CB(dg_calib_cont_delete_ID);
			};
		};
	dg_calib_control_clear: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Clear");
			XmNuserData = dg_structure;
			};
		callbacks
			{
			MrmNcreateCallback =
				procedure dg_calib_identify_button(dg_calib_cont_clear_ID);
			XmNactivateCallback =
				procedure dg_calib_control_CB(dg_calib_cont_clear_ID);
			};
		};
!*******************************************************************************
	dg_streaming_mode_toggle: XmToggleButton
		{
		arguments
			{
			XmNset = false;
			XmNindicatorType = XmN_OF_MANY;
			XmNlabelString =
			compound_string("Streaming");
			XmNfontList = dg_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNuserData = dg_structure;
			};
		callbacks
			{
			XmNvalueChangedCallback = procedure dg_stream_mode_CB ();
			};
		};

	dg_stream_distance_entry: XmForm
		{
		arguments
			{
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = 0;
			XmNleftWidget = dg_streaming_mode_toggle;
			};
		controls
			{
			XmLabelGadget dg_stream_distance_label;
			XmTextField dg_stream_distance_text;
			};
    	callbacks
      	{
      	MrmNcreateCallback = procedure
      		dg_id_stream_distance_entry(dg_structure);
	    	};
		};

	dg_stream_distance_label: XmLabelGadget
    	{
    	arguments
      	{
      	XmNlabelString = compound_string("Streaming distance:");
			XmNfontList = dg_font;
      	XmNalignment = XmALIGNMENT_BEGINNING;
      	XmNleftAttachment = XmATTACH_FORM;
      	XmNleftOffset = 0;
      	XmNtopAttachment = XmATTACH_FORM;
      	XmNtopOffset = 0;
      	XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
      	XmNuserData = dg_structure;
			};
		};

	dg_stream_distance_text: XmTextField
   	{
    	arguments
      	{
      	XmNvalue = "";
!        XmNwidth = 60;
      	XmNcolumns = 8;
      	XmNfontList = dg_font;
      	XmNleftAttachment = XmATTACH_WIDGET;
      	XmNleftOffset = 0;
      	XmNleftWidget = dg_stream_distance_label;
      	XmNtopAttachment = XmATTACH_FORM;
      	XmNtopOffset = 0;
      	XmNbottomAttachment = XmATTACH_FORM;
      	XmNbottomOffset = 0;
      	XmNuserData = dg_structure;
      	};
    	callbacks
      	{
      	MrmNcreateCallback = procedure
     			dg_id_stream_distance_text(dg_structure);
	     	XmNactivateCallback = procedure dg_stream_distance_CB(dg_structure);
      	XmNlosingFocusCallback = procedure dg_stream_distance_CB(dg_structure);
      	};
    	};

!*******************************************************************************
end module;
