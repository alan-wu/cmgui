XCOMM **************************************************************************
XCOMM FILE : cell.imake
XCOMM
XCOMM LAST MODIFIED : 16 October 2001
XCOMM
XCOMM DESCRIPTION :
XCOMM
XCOMM Makefile for cell (the coolest tool in CMGUI)
XCOMM ==========================================================================

/* The Makefile filename should match the filename into which this is being
	written.  This is done in the dependency rules in cell.make i.e.
	for sgi
		image -T cell.imake -f /dev/null -s cell.make
	for linux
		image -DLINUX -T cell.imake -f /dev/null -s cell_linux.make */

SHELL=/bin/sh

/* Perl interpreter is now std but I don't have it for O64 yet */
#define PERL_INTERPRETER

BIN_PATH=$(CMGUI_DEV_ROOT)/bin
SOURCE_PATH=$(CMGUI_DEV_ROOT)/source
UTILITIES_PATH=$(CMGUI_DEV_ROOT)/utilities
#if defined (CMISS_ROOT_DEFINED)
PRODUCT_PATH=$(CMISS_ROOT)/cmgui
#else /* defined (CMISS_ROOT_DEFINED) */
PRODUCT_PATH=$(CMGUI_DEV_ROOT)
#endif /* defined (CMISS_ROOT_DEFINED) */
PRODUCT_SOURCE_PATH=$(PRODUCT_PATH)/source
PRODUCT_UTILITIES_PATH=$(PRODUCT_PATH)/utilities



#if defined (IRIX) /* switch OperatingSystem */
#define CELL

#define SharedObjectVersion 1.0

#if !defined (O64)
#define UidPath uid
#if !defined (OPTIMISED)
/* The normal debug and memory check versions keep the same extension
	as they only differ in one file */
#if !defined (MEMORY_CHECK)
#define Target cell
#define SpacesToTabsTarget spaces_to_tabs
#define TabsToSpacesTarget tabs_to_spaces
#define Uid2uidhTarget uid2uidh
#define Makefile cell_sgi.make
#define DependMake cell_sgi.depend
#define ObjSuffix o
#define DSOSuffix so
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/cell/n32
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/cell/n32
DSO_PATH=$(CMGUI_DEV_ROOT)/dso/n32
PRODUCT_DSO_PATH=$(PRODUCT_PATH)/dso/n32
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/cell/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/cell/n32
#else /* !defined (MEMORY_CHECK) */
#define Target cell_memorycheck
#define SpacesToTabsTarget spaces_to_tabs
#define TabsToSpacesTarget tabs_to_spaces
#define Uid2uidhTarget uid2uidh
#define Makefile cell_sgi_memorycheck.make
#define DependMake cell_sgi_memorycheck.depend
#define ObjSuffix o
#define DSOSuffix so
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/cell/n32
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/cell/n32
DSO_PATH=$(CMGUI_DEV_ROOT)/dso/n32
PRODUCT_DSO_PATH=$(PRODUCT_PATH)/dso/n32
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/cell/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/cell/n32
#endif /* !defined (MEMORY_CHECK) */
#else /* !defined (OPTIMISED) */
#define Target cell_optimised
#define SpacesToTabsTarget spaces_to_tabs
#define TabsToSpacesTarget tabs_to_spaces
#define Uid2uidhTarget uid2uidh
#define Makefile cell_sgioptimised.make
#define DependMake cell_sgioptimised.depend
#define ObjSuffix o
#define DSOSuffix so
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/cell/n32_optimised
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/cell/n32_optimised
DSO_PATH=$(CMGUI_DEV_ROOT)/dso/n32_optimised
PRODUCT_DSO_PATH=$(PRODUCT_PATH)/dso/n32_optimised
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/cell/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/cell/n32
#endif /* !defined (OPTIMISED) */
#else /* !defined (O64) */
/* The O64 version can be either OPTIMISED or not but only one
	version is kept at the moment */
#define UidPath uidh
#define Target cell64
#define SpacesToTabsTarget spaces_to_tabs64
#define TabsToSpacesTarget tabs_to_spaces64
#define Uid2uidhTarget uid2uidh64
#define Makefile cell_sgi64.make
#define DependMake cell_sgi64.depend
#define ObjSuffix o
#define DSOSuffix so
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/cell/64
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/cell/64
DSO_PATH=$(CMGUI_DEV_ROOT)/dso/64
PRODUCT_DSO_PATH=$(PRODUCT_PATH)/dso/64
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/cell/64
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/cell/64
#endif /* !defined (O64) */

#elif defined (LINUX) /* switch OperatingSystem */
#define CELL
#if defined (OPTIMISED)
#if defined (DYNAMIC_GL_LINUX)
#define Target cell_linux_optimised_dynamic
#define SpacesToTabsTarget spaces_to_tabs_linux
#define TabsToSpacesTarget tabs_to_spaces_linux
#define Uid2uidhTarget uid2uidh_linux
#define Makefile cell_linux_optimised_dynamic.make
#define DependMake cell_linux_optimised_dynamic.depend
#define ObjSuffix o
#define DSOSuffix so
#else /* defined (DYNAMIC_GL_LINUX) */
#define Target cell_linux_optimised
#define SpacesToTabsTarget spaces_to_tabs_linux
#define TabsToSpacesTarget tabs_to_spaces_linux
#define Uid2uidhTarget uid2uidh_linux
#define Makefile cell_linux_optimised.make
#define DependMake cell_linux_optimised.depend
#define ObjSuffix o
#define DSOSuffix so
#endif /* defined (DYNAMIC_GL_LINUX) */
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/cell/linux_optimised
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/cell/linux_optimised
DSO_PATH=$(CMGUI_DEV_ROOT)/dso/linux_optimised
PRODUCT_DSO_PATH=$(PRODUCT_PATH)/dso/linux_optimised
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/cell/linux_optimised
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/cell/linux_optimised
#else /* defined (OPTIMISED) */
#if defined (DYNAMIC_GL_LINUX)
#define Target cell_linux_dynamic
#define SpacesToTabsTarget spaces_to_tabs_linux
#define TabsToSpacesTarget tabs_to_spaces_linux
#define Uid2uidhTarget uid2uidh_linux
#define Makefile cell_linux_dynamic.make
#define DependMake cell_linux_dynamic.depend
#define ObjSuffix o
#define DSOSuffix so
#else /* defined (DYNAMIC_GL_LINUX) */
#define Target cell_linux
#define SpacesToTabsTarget spaces_to_tabs_linux
#define TabsToSpacesTarget tabs_to_spaces_linux
#define Uid2uidhTarget uid2uidh_linux
#define Makefile cell_linux.make
#define DependMake cell_linux.depend
#define ObjSuffix o
#define DSOSuffix so
#endif /* defined (DYNAMIC_GL_LINUX) */
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/cell/linux_g
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/cell/linux_g
DSO_PATH=$(CMGUI_DEV_ROOT)/dso/linux_g
PRODUCT_DSO_PATH=$(PRODUCT_PATH)/dso/linux_g
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/cell/linux_g
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/cell/linux_g
#endif /* defined (OPTIMISED) */
#endif /* switch OperatingSystem */

#if defined (CMISS_ROOT_DEFINED)
VPATH=$(BIN_PATH):$(UTILITIES_PATH):$(OBJECT_PATH):$(UIDH_PATH):$(PRODUCT_SOURCE_PATH):$(PRODUCT_OBJECT_PATH):$(PRODUCT_UIDH_PATH)
#else /* defined (CMISS_ROOT) */
VPATH=$(BIN_PATH):$(UTILITIES_PATH):$(OBJECT_PATH):$(UIDH_PATH)
#endif /* defined (CMISS_ROOT) */

/* Include all the common rules */
#include INCLUDE_IMAKEFILE

SOURCE_DIRECTORY_INC = -I$(SOURCE_PATH) -I$(PRODUCT_SOURCE_PATH)

#if defined (IRIX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DSGI -Dmips -DCMGUI 
#elif defined(LINUX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DGENERIC_PC -DCMGUI 
#endif /* switch OperatingSystem */

OPERATING_SYSTEM = -DUNIX

WINDOWING_SYSTEM = -DMOTIF

#if defined (IRIX) /* switch OperatingSystem */
XCOMM  for OpenGL without SGI movie
/*GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API -DSGI_MOVIE_FILE -DSGI_DIGITAL_MEDIA */
/*GRAPHICS_LIB = -delay_load -lmoviefile -delay_load -ldmedia -lGL -lGLU */
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API
GRAPHICS_LIB = -lGL -lGLU
#elif defined(LINUX) /* switch OperatingSystem */
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API
#if defined (DYNAMIC_GL_LINUX)
GRAPHICS_LIB = -L/usr/X11R6/lib -lGLU -lGLXX
#else /* defined (DYNAMIC_GL_LINUX) */
GRAPHICS_LIB = -L/usr/local/lib -lMesaGL -lMesaGLU
/*GRAPHICS_LIB = -L/home/nickerso/cmiss/cmgui -lMesaGL -lMesaGLU*/
#endif /* defined (DYNAMIC_GL_LINUX) */
#endif /* switch OperatingSystem */

XCOMM ???DB.  INSTALL_COLOURMAP seems to be needed for Mesa.  Mesa seems to have
XCOMM   trouble with some visuals
#if defined (IRIX) /* switch OperatingSystem */
THREE_D_DRAWING_DEFINES = 
#elif defined(LINUX) /* switch OperatingSystem */
THREE_D_DRAWING_DEFINES = -DINSTALL_COLOURMAP -DUSING_MESA
#endif /* switch OperatingSystem */

/* CONNECTIVITY_DEFINES = -DLINK_CMISS */
CONNECTIVITY_DEFINES = 

MIRAGE_SWITCH =
MIRAGE_SRCS =

INTERPRETER_INC =
INTERPRETER_SWITCH = 
INTERPRETER_SRCS =
INTERPRETER_LIB =

ROBO_APPLICATION_SWITCH =
ROBO_APPLICATION_SRCS =

#if !defined (UNEMAP) && !defined (CELL)
UNEMAP_SWITCH =
UNEMAP_SRCS = 
#else /* !defined (UNEMAP) */
UNEMAP_SWITCH = -DUNEMAP -DSPECTRAL_TOOLS
UNEMAP_SRCS = \
	unemap/acquisition.c \
	unemap/acquisition_window.c \
	unemap/acquisition_work_area.c \
	unemap/analysis.c \
	unemap/analysis_window.c \
	unemap/analysis_work_area.c \
	unemap/bard.c \
	unemap/beekeeper.c \
	unemap/cardiomapp.c \
	unemap/delauney.c \
	unemap/drawing_2d.c \
	unemap/edf.c \
	unemap/eimaging_time_dialog.c \
	unemap/interpolate.c \
	unemap/map_dialog.c \
	unemap/mapping.c \
	unemap/mapping_window.c \
	unemap/neurosoft.c \
	unemap/pacing_window.c \
	unemap/page_window.c \
	unemap/rig.c \
	unemap/rig_node.c \
	unemap/setup_dialog.c \
	unemap/spectral_methods.c \
	unemap/system_window.c \
	unemap/trace_window.c \
	unemap/unemap_package.c \
	unemap/unemap_hardware_client.c
#endif /* !defined (UNEMAP) */

XVG_SWITCH =
XVG_OPTION_DEFINES = 
XVG_INC = -I$(PRODUCT_SOURCE_PATH)/xvg/include
XVG_SRCS =

CELL_SWITCH = -DCELL
CELL_SRCS = \
  cell/header_test.c \
	cell/cell_calculate.c \
	cell/cell_calculate_dialog.c \
	cell/cell_cmgui_interface.c \
	cell/cell_cmiss_interface.c \
	cell/cell_component.c \
	cell/cell_graphic.c \
	cell/cell_input.c \
	cell/cell_interface.c \
	cell/cell_output.c \
	cell/cell_plot.c \
	cell/cell_unemap_interface.c \
	cell/cell_variable.c \
	cell/cell_variable_editing_dialog.c \
	cell/cell_variable_unemap_interface.c \
  cell/cell_window.c \
  cell/cell_model_routines/andre.f \
  cell/integrator_routines/euler.f \
  cell/integrator_routines/improved_euler.f \
  cell/integrator_routines/runge_kutta.f

UIDH_INC = -I$(UIDH_PATH) -I$(PRODUCT_UIDH_PATH)

#if defined (IRIX) /* switch OperatingSystem */
/*EXTERNAL_INPUT_DEFINES = -DDIALS -DSPACEBALL -DPOLHEMUS -DFARO -DEXT_INPUT  */
/*EXTERNAL_INPUT_LIB = -lXext -lXi */
EXTERNAL_INPUT_DEFINES = 
EXTERNAL_INPUT_LIB = 
#elif defined(LINUX) /* switch OperatingSystem */
EXTERNAL_INPUT_DEFINES = 
EXTERNAL_INPUT_LIB = 
#endif /* switch OperatingSystem */

HAPTIC_LIB =
HAPTIC_INC =

#if defined (DONT_NEED_WORMHOLE_YET)
#if defined (CMISS_ROOT_DEFINED)
WORMHOLE_PATH=$(CMISS_ROOT)/wormhole
#else /* defined (CMISS_ROOT_DEFINED) */
WORMHOLE_PATH=$(CMGUI_DEV_ROOT)/wormhole
#endif /* defined (CMISS_ROOT_DEFINED) */
#if defined (IRIX) /* switch OperatingSystem */
#if defined (O64)
WORMHOLE_LIB = -L${WORMHOLE_PATH}/lib -lwormhole_64
WORMHOLE_INC = -I${WORMHOLE_PATH}/source
#else /* defined (O64) */
WORMHOLE_LIB = -L${WORMHOLE_PATH}/lib -lwormhole_n32
WORMHOLE_INC = -I${WORMHOLE_PATH}/source
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */
WORMHOLE_LIB = -L${WORMHOLE_PATH}/lib -lwormhole_linux
WORMHOLE_INC = -I${WORMHOLE_PATH}/source
#endif /* switch OperatingSystem */

#else /* defined (DONT_NEED_WORMHOLE_YET) */
WORMHOLE_LIB =
WORMHOLE_INC = 
#endif /* defined (DONT_NEED_WORMHOLE_YET) */



XCOMM XML Stuff goes here!!

#if defined (CELL)
XML_PATH = ${CMISS_ROOT}/xml
#if defined (IRIX) /* switch OperatingSystem */
XML_DEFINES = -DIRIX -D_REENTRANT
#if defined (O64)
#if defined (OPTIMISED)
XML_LIB = $(XML_PATH)/library/libXML-mips3-64-optimised-1.0.0.a
#else
XML_LIB = $(XML_PATH)/library/libXML-mips3-64-debug-1.0.0.a
#endif
XML_INC = -I$(XML_PATH)/include
#else /* defined (O64) */
/*  XML_LIB = -L$(XML_PATH)/lib.28nov00 -lCellML-n32-mips3-opt */
#if defined (OPTIMISED)
XML_LIB = $(XML_PATH)/library/libXML-mips3-n32-optimised-1.0.0.a
#else
XML_LIB = $(XML_PATH)/library/libXML-mips3-n32-debug-1.0.0.a
#endif
XML_INC = -I$(XML_PATH)/include
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */
XML_DEFINES = -DLINUX -D_REENTRANT
#if defined (OPTIMISED)
XML_LIB = $(XML_PATH)/library/libXML_linux_optimised_1.0.0.a -lstdc++-2-libc6.1-1-2.9.0
XML_LIB = $(XML_PATH)/library/libXML_linux_optimised_1.0.0.a
#else
XML_LIB = $(XML_PATH)/library/libXML_linux_debug_1.0.0.a -lstdc++-2-libc6.1-1-2.9.0
XML_LIB = $(XML_PATH)/library/libXML_linux_debug_1.0.0.a
#endif
XML_INC = -I$(XML_PATH)/include 
#endif /* switch OperatingSystem */
#else /* defined (CELL) */
XML_PATH =
XML_DEFINES = 
XML_LIB =
XML_INC = 
#endif /* defined (CELL) */

STEREO_DISPLAY_SWITCH = -DSTEREO

POSTSCRIPT_DEFINES =

NAME_DEFINES = -DFULL_NAMES

XCOMM  Temporary flags that are used during development
TEMPORARY_DEVELOPMENT_FLAGS =

VIDEO_SWITCH =
VIDEO_LIB =
VIDEO_SRCS =

NAG_SRCS = 
NAG_LIB =

HELP_DEFINES = 
HELP_INCLUDE =
HELP_LIB =
HELP_SRCS = 

#if defined (IRIX) /* switch OperatingSystem */
LIB = -lMrm -lSgm -lXm -lXt -lX11 -lXmu -lPW -lftn -lm -lC -lCio -lc -lpthread
DSO_LIB = -lftn -lm
#elif defined(LINUX) /* switch OperatingSystem */
#if defined (DYNAMIC_GL_LINUX)
X_LIB = /usr/X11R6/lib
LIB = $(X_LIB)/libMrm.a $(X_LIB)/libXm.a $(X_LIB)/libXt.a $(X_LIB)/libX11.a $(X_LIB)/libXmu.a $(X_LIB)/libXpm.a $(X_LIB)/libXext.a $(X_LIB)/libXp.a $(X_LIB)/libSM.a $(X_LIB)/libICE.a -lm -ldl -lc /usr/lib/libpthread.a /usr/lib/libcrypt.a /usr/lib/libstdc++-2-libc6.1-1-2.9.0.a
DSO_LIB = -lg2c -lm
#else /* defined (DYNAMIC_GL_LINUX) */
LIB = -lMrm -lXm -lXt -lX11 -lXmu -lXpm -lXext -lg2c -lm -ldl -lc -lXp -lSM -lICE -lpthread -lcrypt -lstdc++
DSO_LIB = -lg2c -lm
#endif /* defined (DYNAMIC_GL_LINUX) */
#endif /* switch OperatingSystem */

START_ALL_DEFINES =
END_ALL_DEFINES =

START_ALL_INCLUDES =
#if defined (LINUX)
END_ALL_INCLUDES = -I/usr/X11R6/include
#else
END_ALL_INCLUDES =
#endif

ALL_DEFINES = $(START_ALL_DEFINES) \
	$(COMPILE_DEFINES) $(TARGET_TYPE_DEFINES) \
	$(PLATFORM_SWITCH) $(OPERATING_SYSTEM) $(WINDOWING_SYSTEM) \
	$(STEREO_DISPLAY_SWITCH) $(CONNECTIVITY_DEFINES) \
	$(EXTERNAL_INPUT_DEFINES) $(XVG_SWITCH) $(XVG_OPTION_DEFINES) \
	$(ROBO_APPLICATION_SWITCH) $(FACE_APPLICATION_SWITCH) \
	$(GRAPHICS_LIBRARY_SWITCH) $(VIDEO_SWITCH) $(HELP_DEFINES) \
	$(POSTSCRIPT_DEFINES) $(NAME_DEFINES) $(TEMPORARY_DEVELOPMENT_FLAGS) \
	$(THREE_D_DRAWING_DEFINES) $(UNEMAP_SWITCH) $(MIRAGE_SWITCH) \
	$(CELL_SWITCH) $(XML_DEFINES) $(MOVIE_FILE_SWITCH) $(INTERPRETER_SWITCH)\
	$(END_ALL_DEFINES)

ALL_INCLUDES = $(START_ALL_INCLUDES) \
	$(SOURCE_DIRECTORY_INC) $(HAPTIC_INC) $(XVG_INC) $(WORMHOLE_INC) $(XML_INC) \
	$(UIDH_INC) $(INTERPRETER_INC) $(END_ALL_INCLUDES)

ALL_FLAGS = $(OPTIMISATION_FLAGS) $(COMPILE_FLAGS) $(TARGET_TYPE_FLAGS) \
	$(ALL_DEFINES) $(ALL_INCLUDES)

ALL_LIB =  $(XML_LIB) $(GRAPHICS_LIB) $(HAPTIC_LIB) $(WORMHOLE_LIB) \
		$(INTERPRETER_LIB) \
		$(LIB) $(VIDEO_LIB) $(EXTERNAL_INPUT_LIB) $(NAG_LIB) $(HELP_LIB) \
	  $(MOVIE_FILE_LIB)
   

APPLICATION_SRCS = 
CHOOSE_SRCS = \
	choose/choose_enumerator.c \
	choose/choose_texture.c \
	choose/chooser.c
COLOUR_SRCS = \
	colour/colour_editor.c \
	colour/edit_var.c 
COMFILE_SRCS = 
COMMAND_SRCS = \
	command/parser.c
COMPUTED_FIELD_SRCS =  \
	computed_field/computed_field.c \
	computed_field/computed_field_component_operations.c \
	computed_field/computed_field_coordinate.c \
	computed_field/computed_field_fibres.c \
	computed_field/computed_field_find_xi.c \
	computed_field/computed_field_finite_element.c \
	computed_field/computed_field_value_index_ranges.c \
	computed_field/computed_field_wrappers.c
CURVE_SRCS = \
	curve/control_curve.c
DATA_SRCS = 
DOF3_SRCS =
ELEMENT_SRCS = 
FINITE_ELEMENT_SRCS = \
	finite_element/export_finite_element.c \
	finite_element/finite_element.c \
	finite_element/finite_element_adjacent_elements.c \
	finite_element/finite_element_discretization.c \
	finite_element/finite_element_time.c \
	finite_element/finite_element_to_graphics_object.c \
	finite_element/finite_element_to_iso_lines.c \
	finite_element/finite_element_to_streamlines.c \
	finite_element/import_finite_element.c
GENERAL_SRCS =  \
	general/any_object.c \
	general/callback.c \
	general/child_process.c \
	general/compare.c \
	general/debug.c \
	general/error_handler.c \
	general/geometry.c \
	general/heapsort.c \
	general/indexed_multi_range.c \
	general/image_utilities.c \
	general/matrix_vector.c \
	general/multi_range.c \
	general/myio.c \
	general/mystring.c \
	general/postscript.c \
	general/statistics.c \
	general/value.c 
GRAPHICS_SRCS = \
	graphics/auxiliary_graphics_types.c \
	graphics/colour.c \
	graphics/complex.c \
	graphics/element_group_settings.c \
	graphics/element_point_ranges.c \
	graphics/environment_map.c \
	graphics/glyph.c \
	graphics/graphical_element.c \
	graphics/laguer.c \
	graphics/light.c \
	graphics/light_model.c \
	graphics/makegtobj.c \
	graphics/mcubes.c \
	graphics/material.c \
	graphics/graphics_library.c \
	graphics/graphics_object.c \
	graphics/graphics_window.c \
	graphics/import_graphics_object.c \
	graphics/renderbinarywavefront.c \
	graphics/rendergl.c \
	graphics/rendervrml.c \
	graphics/renderwavefront.c \
	graphics/scene.c \
	graphics/scene_viewer.c \
	graphics/selected_graphic.c \
	graphics/spectrum.c \
	graphics/spectrum_settings.c \
	graphics/texture.c \
	graphics/texture_line.c \
	graphics/texturemap.c \
	graphics/transform_tool.c \
	graphics/userdef_objects.c \
	graphics/volume_texture.c
INTERACTION_SRCS = \
	interaction/interaction_graphics.c \
	interaction/interaction_volume.c \
	interaction/interactive_tool.c \
	interaction/interactive_toolbar_widget.c \
	interaction/interactive_event.c \
	interaction/select_tool.c
IO_DEVICES_SRCS = \
	io_devices/conversion.c \
	io_devices/matrix.c 
LINK_SRCS = 
MATERIAL_SRCS =  \
	material/material_editor.c \
	material/material_editor_dialog.c
MENU_SRCS = 
NODE_SRCS = 
PROJECTION_SRCS = 
PROMPT_SRCS = 
SELECT_SRCS = \
	select/select_environment_map.c \
	select/select_graphical_material.c \
	select/select_private.c \
	select/select_spectrum.c
SELECTION_SRCS = \
	selection/any_object_selection.c \
	selection/element_point_ranges_selection.c \
	selection/element_selection.c \
	selection/node_selection.c
SLIDER_SRCS = 
THREE_D_DRAWING_SRCS = \
	three_d_drawing/dm_interface.c \
	three_d_drawing/movie_extensions.c \
	three_d_drawing/ThreeDDraw.c
TIME_SRCS = \
	time/time.c \
	time/time_keeper.c \
	time/time_editor.c \
	time/time_editor_dialog.c
TRANSFORMATION_SRCS =
USER_INTERFACE_SRCS =  \
	user_interface/confirmation.c \
	user_interface/filedir.c \
	user_interface/message.c \
	user_interface/printer.c \
	user_interface/user_interface.c
VIEW_SRCS =

XCOMM DB.  makedepend has problems if too many files
SRCS_1 = \
	$(APPLICATION_SRCS) \
	$(CELL_SRCS) \
	$(CHOOSE_SRCS) \
	$(COLOUR_SRCS) \
	$(COMFILE_SRCS) \
	$(COMMAND_SRCS) \
	$(COMPUTED_FIELD_SRCS) \
	$(CURVE_SRCS) \
	$(DATA_SRCS) \
	$(DOF3_SRCS) \
	$(ELEMENT_SRCS) \
	$(FINITE_ELEMENT_SRCS) \
	$(GENERAL_SRCS) \
	$(GRAPHICS_SRCS) \
	$(HELP_SRCS) \
	$(INTERACTION_SRCS) \
	$(IO_DEVICES_SRCS) \
	$(LINK_SRCS) \
	$(MATERIAL_SRCS) \
	$(MENU_SRCS) \
	$(MIRAGE_SRCS) \
	$(NAG_SRCS) \
	$(NODE_SRCS) \
	$(PROJECTION_SRCS) \
	$(PROMPT_SRCS) \
	$(SELECT_SRCS) \
	$(SELECTION_SRCS) \
	$(SLIDER_SRCS) \
	$(THREE_D_DRAWING_SRCS)

SRCS_2 = \
	$(INTERPRETER_SRCS) \
	$(TIME_SRCS) \
	$(TRANSFORMATION_SRCS) \
	$(USER_INTERFACE_SRCS) \
	$(XVG_SRCS) \
	$(VIDEO_SRCS) \
	$(UNEMAP_SRCS) \
	$(VIEW_SRCS)

SRCS = $(SRCS_1) $(SRCS_2)

#if defined (MEMORY_CHECK)
OBJSA = $(SRCS:.c=.ObjSuffix)
OBJSB = $(OBJSA:.cpp=.ObjSuffix)
	  /* Override the one changed file in the source list */
OBJSC = $(OBJSB:general/debug.ObjSuffix=general/debug_memory_check.ObjSuffix)
OBJS = $(OBJSC:.f=.ObjSuffix)
#else /* defined (MEMORY_CHECK) */
OBJSA = $(SRCS:.c=.ObjSuffix)
OBJSB = $(OBJSA:.cpp=.ObjSuffix)
OBJS = $(OBJSB:.f=.ObjSuffix)
#endif /* defined (MEMORY_CHECK) */

/* Stuff for the filt dynamic shared object library */
LIB_FILT_SRCS = 

#if defined (MEMORY_CHECK)
LIB_FILT_OBJSA = $(LIB_FILT_SRCS:.c=.ObjSuffix)
LIB_FILT_OBJSB = $(LIB_FILT_OBJSA:.cpp=.ObjSuffix)
	  /* Override the one changed file in the source list */
LIB_FILT_OBJSC = $(LIB_FILT_OBJSB:general/debug.ObjSuffix=general/debug_memory_check.ObjSuffix)
LIB_FILT_OBJS = $(LIB_FILT_OBJSC:.f=.ObjSuffix)
#else /* defined (MEMORY_CHECK) */
LIB_FILT_OBJSA = $(LIB_FILT_SRCS:.c=.ObjSuffix)
LIB_FILT_OBJSB = $(LIB_FILT_OBJSA:.cpp=.ObjSuffix)
LIB_FILT_OBJS = $(LIB_FILT_OBJSB:.f=.ObjSuffix)
#endif /* defined (MEMORY_CHECK) */

depend :
	echo -n > DependMake
	(makedepend -f DependMake -o.ObjSuffix -Y -- $(ALL_FLAGS) -- cell.c 2> DependMake.tmp)
	(makedepend -f DependMake -o.ObjSuffix -Y -a -- $(ALL_FLAGS) -- $(SRCS_1) 2>> DependMake.tmp)
	(makedepend -f DependMake -o.ObjSuffix -Y -a -- $(ALL_FLAGS) -- $(SRCS_2) 2>> DependMake.tmp)
	/* The uidh get their full path in the dependencies which stops the VPATH
	.uil.uidh rule from picking up dependencies so I remove this PATH */
	sed "s%$(UIDH_PATH)/%%g" DependMake > DependMake.tmp2
	mv DependMake.tmp2 DependMake
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(SRCS) 2>&1 | sed "s%Cannot access %%;s%: No such file or directory%%;s%.*%&: &%;s%\.[^.]*:%.o:%;s%UX:ls: ERROR: %%" >> DependMake)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(SRCS) 2>&1 | sed "s%ls: %%;s%: No such file or directory%%;s%.*%&: &%;s%\.[^.]*:%.o:%" >> DependMake)
#endif /* switch OperatingSystem */
	/* Try and make a rule for the uidhs if they don't exist already,
	It is bad, based on the format of the error output from makedepend and it only
	gets the first inclusion.  If it fails then you can get the correct makedepend 
	by ensuring all the uidh files already exist before you makedepend */
	( grep uidh DependMake.tmp | grep makedepend | awk -v Obj=ObjSuffix -F "[ ,]" '{printf("%s.%s:",substr($$4, 1, length($$4) - 2),Obj); for(i = 1 ; i <= NF ; i++)  { if (match($$i,"uidh")) printf(" %s", substr($$i, 2, length($$i) -2)) } printf("\n");}' >> DependMake)
	rm DependMake.tmp

transfer :
	tar -cvf - \
	../WildMake readme.* *.make *.imake *.c version.ObjSuffix.h Cmgui \
	*.mms *.sed *.com *.opt *.ico \
	application/WildC application/WildH application/WildUil \
	choose/WildC choose/WildH choose/WildUil \
	colour/WildC colour/WildH colour/WildUil \
	comfile/WildC comfile/WildH comfile/WildRc comfile/WildUil \
	computed_field/WildC computed_field/WildH computed_field/WildRc computed_field/WildUil \
	curve/WildC curve/WildH curve/WildUil \
	data/WildC data/WildH data/WildUil \
	database/WildC database/WildH database/WildUil \
	dof3/WildC dof3/WildH dof3/WildUil \
	element/WildC element/WildH element/WildUil \
	general/WildC general/WildH general/WildUil \
	help/WildC help/WildH help/WildUil \
	interaction/WildC interaction/WildCpp interaction/WildH interaction/WildUil \
	io_devices/WildC io_devices/WildCpp io_devices/WildH io_devices/WildUil \
	link/WildC link/WildH link/WildUil \
	material/WildC material/WildH material/WildUil \
	menu/WildC menu/WildH menu/WildUil \
	node/WildC node/WildH node/WildUil \
	projection/WildC projection/WildH projection/WildUil \
	prompt/WildC prompt/WildH prompt/WildUil \
	select/WildC select/WildH select/WildUil \
	selection/WildC selection/WildH selection/WildUil \
	slider/WildC slider/WildH slider/WildUil \
	three_d_drawing/Makefile three_d_drawing/WildC three_d_drawing/WildH \
	time/WildC time/WildH time/WildUil \
	transformation/WildC transformation/WildH transformation/WildUil \
	unemap/drawing_2d.c unemap/drawing_2d.h \
	user_interface/WildC user_interface/WildH user_interface/WildUil \
	utilities/WildC utilities/WildH utilities/WildUil \
	view/WildC view/WildH view/WildUil \
	| gzip > cmgui_tar1.gz
	tar -cvf - \
	cell/WildC cell/WildH cell/WildUil \
	cell/cell_model_routines/WildF cell/cell_model_routines/WildInc \
	cell/integrator_routines/WildF \
	hypertext_help/WildC hypertext_help/WildH hypertext_help/Makefile \
	hypertext_help/WildMms \
	mirage/WildC mirage/WildH mirage/WildUil \
	unemap/WildC unemap/WildH unemap/WildUil unemap/WildRc \
	unemap/utilities/Makefile unemap/utilities/WildC unemap/utilities/WildH  \
	unemap/utilities/WildUil unemap/utilities/WildRc \
	unemap_hardware_service/WildC unemap_hardware_service/WildH \
	unemap_hardware_service/WildUil unemap_hardware_service/WildRc \
	xvg/README xvg/custom/WildC xvg/custom/WildF xvg/include/WildH xvg/cmgui/WildUil \
	xvg/cmgui/WildC xvg/cmgui/WildPx xvg/cmgui/WildH \
	| gzip > cmgui_tar2.gz
	tar -cvf - \
	command/WildC command/WildH command/WildRc command/WildUil \
	finite_element/WildC finite_element/WildH finite_element/WildUil \
	graphics/Makefile graphics/WildC graphics/WildH graphics/WildRc graphics/WildUil \
	graphics/WildCpp graphics/marchg.dat graphics/mcubes.dat \
	html_widget/WildXbm html_widget/WildC html_widget/WildH html_widget/Makefile \
	html_widget/WildMms \
	socket/WildC socket/WildH \
	| gzip > cmgui_tar3.gz
	tar -cvf - \
	$(XML_PATH)/expat_lib/lib/WildAll $(XML_PATH)/expat_lib/include/WildH \
	$(UTILITIES_PATH)/uid2uidh $(UTILITIES_PATH)/uid2uidh_linux \
	$(WORMHOLE_PATH)/lib/WildAll $(WORMHOLE_PATH)/source/wormhole.h \
	| gzip > cmgui_tar4.gz

compare :
	mv cmgui_tar tmp
	(cd tmp; tar -xvf cmgui_tar > tar.list 2>&1; \
sed "s/./diff/;s/,.*/ >> out.diff/;h;G;G;s/\n//2;s%>> out\.diffdiff %tmp/%;s/diff/echo FILE:/" \
<tar.list >compare.script; rm tar.list)
	mv tmp/cmgui_tar .
	sh tmp/compare.script
#if defined (OLD_CODE)
	(cd tmp; tar -xvf cmgui_tar > tar.list;
#endif /* defined (OLD_CODE) */

descrip.mms : Makefile descrip_mms.sed
	sed -f descrip_mms.sed < Makefile > descrip.mms

$(OBJECT_PATH)/version.ObjSuffix.h : $(OBJS)
	if [ ! -d $(OBJECT_PATH) ]; then \
		mkdir -p $(OBJECT_PATH); \
	fi	
	echo '/* This is a generated file.  Do not edit.  Edit cmgui.c or cmgui.imake instead */' > $(OBJECT_PATH)/version.ObjSuffix.h;	  
	date > date.h
	sed 's/"//;s/./#define VERSION "\\033\[0;32mCell version 001.002.001 &/;s/.$$/&\\nCopyright 1996-2000, Auckland UniServices Ltd.\\033\[0m"/' < date.h >> $(OBJECT_PATH)/version.ObjSuffix.h

cell.ObjSuffix : cell.c $(OBJECT_PATH)/version.ObjSuffix.h $(INTERPRETER_LIB)
	@if [ -f $*.c ]; then \
		set -x; \
		cat $(OBJECT_PATH)/version.ObjSuffix.h $*.c > $(OBJECT_PATH)/$*.ObjSuffix.c ; \
	else \
		set -x; \
		cat $(OBJECT_PATH)/version.ObjSuffix.h $(PRODUCT_SOURCE_PATH)/$*.c > $(OBJECT_PATH)/$*.ObjSuffix.c ; \
	fi
	$(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(OBJECT_PATH)/$*.ObjSuffix.c;

Target : $(OBJS) cell.ObjSuffix
	if [ ! -d $(BIN_PATH) ]; then \
		mkdir -p $(BIN_PATH); \
	fi
#if defined (IRIX) /* switch OperatingSystem */
	cd $(OBJECT_PATH) ; (ls $(OBJS) cell.ObjSuffix 2>&1 | sed "s%Cannot access %product_object/%;s%: No such file or directory%%;s%UX:ls: ERROR: %%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	cd $(OBJECT_PATH) ; (ls $(OBJS) cell.ObjSuffix 2>&1 | sed "s%ls: %product_object/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	cd $(OBJECT_PATH) ; \
	rm -f product_object ; \
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \
	$(LINK) -o $(BIN_PATH)/Target $(ALL_FLAGS) `cat object.list` $(ALL_LIB)

/* Force is a dummy rule used to ensure some objects are made every time as the
	target 'force' doesnt exist */
force :
	@echo "\n" > /dev/null

#if defined (MEMORY_CHECK)
	  /* Specify rule for making a memory checking object with the normal c file */
	  /* This allows us to make a memory checking version without creating a new
		  extension */
general/debug_memory_check.ObjSuffix: general/debug.c general/debug.h
	if [ ! -d $(OBJECT_PATH)/general ]; then \
		mkdir -p $(OBJECT_PATH)/general; \
	fi
	if [ -f general/debug.c ]; then \
		$(CC) -o $(OBJECT_PATH)/general/debug_memory_check.ObjSuffix $(ALL_FLAGS) -DMEMORY_CHECKING general/debug.c; \
	else \
		$(CC) -o $(OBJECT_PATH)/general/debug_memory_check.ObjSuffix $(ALL_FLAGS) -DMEMORY_CHECKING $(PRODUCT_PATH)/general/debug.c; \
	fi
#endif /* defined (MEMORY_CHECK) */

andre_dso : $(DSO_PATH)/andre.DSOSuffix

$(DSO_PATH)/andre.DSOSuffix :
	@if [ ! -d $(DSO_PATH) ]; then \
		mkdir -p $(DSO_PATH); \
	fi
	@set -x ; $(FORTRAN) $(OPTIMISATION_FLAGS) $(TARGET_TYPE_FLAGS) -o /tmp/andre.ObjSuffix $(SOURCE_DIRECTORY_INC) $(SOURCE_PATH)/cell/cell_model_routines/andre.f ;
	@set -x ; $(DSO_LINK) /tmp/andre.ObjSuffix $(DSO_LIB) -o $(DSO_PATH)/andre.DSOSuffix ;
	@rm -f /tmp/andre.ObjSuffix ;

hmt_dso : $(DSO_PATH)/hmt.DSOSuffix

$(DSO_PATH)/hmt.DSOSuffix : $(SOURCE_PATH)/cell/cell_model_routines/hmt.f
	@if [ ! -d $(DSO_PATH) ]; then \
		mkdir -p $(DSO_PATH); \
	fi
	@set -x ; $(FORTRAN) $(OPTIMISATION_FLAGS) $(TARGET_TYPE_FLAGS) -o /tmp/hmt.ObjSuffix $(SOURCE_DIRECTORY_INC) $(SOURCE_PATH)/cell/cell_model_routines/hmt.f ;
	@set -x ; $(DSO_LINK) /tmp/hmt.ObjSuffix $(DSO_LIB) -o $(DSO_PATH)/hmt.DSOSuffix ;
	@rm -f /tmp/hmt.ObjSuffix ;

euler_dso : $(DSO_PATH)/euler.DSOSuffix

$(DSO_PATH)/euler.DSOSuffix :
	@if [ ! -d $(DSO_PATH) ]; then \
		mkdir -p $(DSO_PATH); \
	fi
	@set -x ; $(FORTRAN) $(OPTIMISATION_FLAGS) $(TARGET_TYPE_FLAGS) -o /tmp/euler.ObjSuffix $(SOURCE_DIRECTORY_INC) $(SOURCE_PATH)/cell/integrator_routines/euler.f ;
	@set -x ; $(DSO_LINK) /tmp/euler.ObjSuffix $(DSO_LIB) -o $(DSO_PATH)/euler.DSOSuffix ;
	@rm -f /tmp/euler.ObjSuffix ;

utilities : SpacesToTabsTarget TabsToSpacesTarget Uid2uidhTarget

SPACES_TO_TABS_SRCS = \
	utilities/spaces_to_tabs.c

BuildNormalTarget(SpacesToTabsTarget,$(UTILITIES_PATH),SPACES_TO_TABS_SRCS,SPACES_TO_TABS_OBJSA,SPACES_TO_TABS_OBJSB,SPACES_TO_TABS_OBJS,-lm) 

TABS_TO_SPACES_SRCS = \
	utilities/tabs_to_spaces.c

BuildNormalTarget(TabsToSpacesTarget,$(UTILITIES_PATH),TABS_TO_SPACES_SRCS,TABS_TO_SPACES_OBJSA,TABS_TO_SPACES_OBJSB,TABS_TO_SPACES_OBJS,-lm) 

/* sinclude used so that the makefile can be run when the dependency file doesn't exist,
 it should then make one */
sinclude $(PRODUCT_SOURCE_PATH)/DependMake
sinclude DependMake
