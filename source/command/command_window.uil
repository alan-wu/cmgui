!*******************************************************************************
! FILE : command_window.uil
!
! LAST MODIFIED : 21 November 2001
!
! DESCRIPTION :
! The widgets/gadgets for the command window.
!===============================================================================
module Command_Window
	names = case_sensitive

procedure
	command_changed;
	command_entered;
	identify_command_box;
	identify_output_pane;
	identify_message_pane;
! Model menu
	id_cell_create_button;
	id_curve_editor_create_button;
	id_data_viewer_create_button;
	id_interactive_data_editor_cbut;
	id_element_creator_create_butto;
	id_element_point_viewer_button;
	id_grid_field_calculator_button;
	id_im_control_create_button;
	id_node_viewer_create_button;
	id_interactive_node_editor_cbut;
	id_tracking_editor_create_butto;
	id_unemap_create_button;
	id_3d_digitizer_create_button;
! Graphics menu
	id_three_d_window_create_button;
	id_material_editor_create_butto;
	id_scene_editor_create_button;
	id_spectrum_editor_create_butto;
	id_time_editor_create_butto;
	id_volume_editor_create_button;
!
	callback_command;
	open_file_and_read;
	command_window_close;

identifier
	command_window_structure;
	execute_command_structure;
	read_iod_file_structure;

value
	command_box_position_x : 0;
	command_box_position_y : 0;
	sash_width : 50;
	small_widget_spacing : 1;
	large_widget_spacing : 4;
	command_history_items : 100;
	max_pane_size : 1000;
	command_min_pane_size : 50;
	min_pane_size : 50;
	message_default_height : 90;

object
	command_window: XmForm
		{
		arguments
			{
!      XmNx = command_box_position_x;
!      XmNy = command_box_position_y;
			XmNborderWidth = 0;
!      XmNwidth = command_box_width;
			XmNdefaultPosition = false;
!			XmNresizePolicy = XmRESIZE_ANY;
			XmNdialogTitle = compound_string("CMISS Command Window");
			};
		controls
			{
			XmPanedWindow paned_window;
			XmForm menu_form;
			};
		};
	paned_window: XmPanedWindow
		{
		arguments
			{
			XmNsashWidth = sash_width;
			XmNtopOffset = small_widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNleftOffset = small_widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNrightOffset = small_widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNbottomOffset = small_widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNtopWidget = XmForm menu_form;
			};
		controls
			{
			XmCommand command_box;
			XmScrolledWindow output_scrolled_window;
!      XmScrolledWindow message_scrolled_window;
			};
		};
	command_box: XmCommand
		{
		arguments
			{
			XmNhistoryMaxItems = command_history_items;
			XmNresizePolicy = XmRESIZE_ANY;
			XmNnoResize = false;
			XmNallowResize = true;
			XmNpaneMaximum = max_pane_size;
			XmNpaneMinimum = command_min_pane_size;
			XmNpromptString = compound_string("");
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_command_box(command_window_structure);
				};
			XmNcommandChangedCallback = procedures
				{
				command_changed(command_window_structure);
				};
			XmNcommandEnteredCallback = procedures
				{
				command_entered(command_window_structure);
				};
			};
		};
	output_scrolled_window: XmScrolledWindow
		{
		arguments
			{
			XmNallowResize = true;
			XmNpaneMaximum = max_pane_size;
			XmNpaneMinimum = min_pane_size;
!      XmNvisualPolicy = XmSTATIC;
			XmNscrollBarDisplayPolicy = XmSTATIC;
!      XmNscrollingPolicy = XmCONSTANT;
			XmNworkWindow = XmText output_text;
			};
		controls
			{
			XmText output_text;
			};
		};
	output_text: XmText
		{
		arguments
			{
			XmNeditMode = XmMULTI_LINE_EDIT;
			XmNeditable = false;
			XmNwordWrap = true;
			XmNsensitive = true;
!      XmNscrollHorizontal = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_output_pane(command_window_structure);
				};
			};
		};
	message_scrolled_window: XmScrolledWindow
		{
		arguments
			{
			XmNallowResize = true;
			XmNpaneMaximum = message_default_height;
			XmNpaneMinimum = min_pane_size;
			XmNheight = message_default_height;
!      XmNvisualPolicy = XmSTATIC;
			XmNscrollBarDisplayPolicy = XmSTATIC;
!      XmNscrollingPolicy = XmCONSTANT;
			XmNworkWindow = XmText message_text;
			};
		controls
			{
			XmText message_text;
			};
		};
	message_text: XmText
		{
		arguments
			{
			XmNeditMode = XmMULTI_LINE_EDIT;
			XmNeditable = false;
			XmNwordWrap = true;
			XmNsensitive = true;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_message_pane(command_window_structure);
				};
			};
		};
	menu_form: XmForm
		{
		arguments
			{
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = small_widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = small_widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = small_widget_spacing;
			};
		controls
			{
			XmMenuBar menu_bar;
			XmMenuBar help_menu_bar;
			};
		};
	menu_bar: XmMenuBar
		{
		arguments
			{
			XmNspacing = large_widget_spacing;
			XmNshadowThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmCascadeButton file_button;
			XmCascadeButton model_button;
			XmCascadeButton graphics_button;
			};
		};
	file_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("File");
			XmNmnemonic = keysym("F");
			};
		controls
			{
			XmPulldownMenu file_pulldown_menu;
			};
		};
	file_pulldown_menu: XmPulldownMenu
		{
		controls
			{
			XmCascadeButton open_button;
			XmCascadeButton read_button;
			XmCascadeButton write_button;
			XmSeparator
				{
				};
			XmPushButton exit_button;
			};
		};
	open_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Open...");
			XmNmnemonic = keysym("O");
			};
		controls
			{
			XmPulldownMenu open_menu;
			};
		};
	open_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton open_comfile_button;
!			XmPushButton open_menu_button;
			};
		};
	open_comfile_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Com File");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("open comfile");
				};
			};
		};
	open_menu_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Menu");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("open menu");
				};
			};
		};
	read_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Read...");
			XmNmnemonic = keysym("R");
			};
		controls
			{
			XmPulldownMenu read_menu;
			};
		};
	read_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton read_curve_button;
			XmPushButton read_data_button;
			XmPushButton read_elements_button;
			XmPushButton read_nodes_button;
			};
		};
	read_curve_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Curve file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx read curve");
				};
			};
		};
	read_data_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Data file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx read data");
				};
			};
		};
	read_elements_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Elements file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx read elements");
				};
			};
		};
	read_nodes_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Node file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx read nodes");
				};
			};
		};
	write_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Write...");
			XmNmnemonic = keysym("R");
			};
		controls
			{
			XmPulldownMenu write_menu;
			};
		};
	write_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton write_all_curves_button;
			XmPushButton write_data_button;
			XmPushButton write_elements_button;
			XmPushButton write_nodes_button;
			};
		};
	write_all_curves_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("All Curve files");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx write curve all");
				};
			};
		};
	write_data_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Data file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx write data");
				};
			};
		};
	write_elements_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Elements file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx write elements");
				};
			};
		};
	write_nodes_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Node file");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx write nodes");
				};
			};
		};
	exit_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Exit");
			XmNmnemonic = keysym("x");
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
!       ???DB.  To allow the back end to be restarted
!        callback_command("QUIT");
				command_window_close(command_window_structure);
				};
			};
		};
!*******************************************************************************
	model_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Model");
			XmNmnemonic = keysym("M");
			XmNsensitive = true;
			};
		controls
			{
			XmPulldownMenu model_pulldown_menu;
			};
		};
	model_pulldown_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton cell_create_button;
			XmPushButton curve_editor_create_btn;
			XmPushButton data_viewer_create_button;
			XmPushButton interactive_data_editor_cbutton;
			XmPushButton element_creator_create_button;
			XmPushButton element_point_viewer_button;
			XmPushButton grid_field_calculator_btn;
			XmPushButton im_control_create_button;
			XmPushButton node_viewer_create_button;
			XmPushButton interactive_node_editor_cbutton;
			XmPushButton tracking_editor_create_button;
			XmPushButton unemap_create_button;
			XmPushButton digitizer_3d_create_button;
			};
		};
!*******************************************************************************
	cell_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Cell");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_cell_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("cell open");
				};
			};
		};
	curve_editor_create_btn: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Curve editor");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("gfx create curve_editor");
				};
			};
		};
	data_viewer_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Data viewer");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_data_viewer_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create data_viewer");
				};
			};
		};
	interactive_data_editor_cbutton: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Data editor (interactive)");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_interactive_data_editor_cbut(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create interactive_data_editor");
				};
			};
		};
	element_creator_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Element creator");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_element_creator_create_butto(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create element_creator");
				};
			};
		};
	element_point_viewer_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Element point viewer");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_element_point_viewer_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create element_point_viewer");
				};
			};
		};
	grid_field_calculator_btn: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Grid field calculator");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_grid_field_calculator_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create grid_field_calculator");
				};
			};
		};
	im_control_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Input controller");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_im_control_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create im_control");
				};
			};
		};
	node_viewer_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Node viewer");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_node_viewer_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create node_viewer");
				};
			};
		};
	interactive_node_editor_cbutton: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Node editor (interactive)");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_interactive_node_editor_cbut(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create interactive_node_editor");
				};
			};
		};
	tracking_editor_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Tracking");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_tracking_editor_create_butto(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create tracking_editor");
				};
			};
		};
	unemap_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Unemap");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_unemap_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("UNEMAP Open");
				};
			};
		};
	digitizer_3d_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("3-D Digitizer");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_3d_digitizer_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create 3d_digitizer");
				};
			};
		};
!*******************************************************************************
	graphics_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Graphics");
			XmNmnemonic = keysym("G");
			XmNsensitive = true;
			};
		controls
			{
			XmPulldownMenu graphics_pulldown_menu;
			};
		};
	graphics_pulldown_menu: XmPulldownMenu
		{
		controls
			{
			XmPushButton three_d_window_create_button;
			XmPushButton material_editor_create_button;
			XmPushButton scene_editor_create_button;
			XmPushButton spectrum_editor_create_button;
			XmPushButton time_editor_create_button;
			XmPushButton volume_editor_create_button;
			XmSeparator{ };
			XmCascadeButton projections_button;
			};
		};
!*******************************************************************************
	three_d_window_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("3-D Window");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_three_d_window_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create window");
				};
			};
		};
	material_editor_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Material editor");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_material_editor_create_butto(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create graphical_material_editor");
				};
			};
		};
	scene_editor_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Scene editor");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_scene_editor_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx edit scene");
				};
			};
		};
	spectrum_editor_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Spectrum editor");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_spectrum_editor_create_butto(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx edit spectrum");
				};
			};
		};
	time_editor_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Time editor");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_time_editor_create_butto(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create time_editor");
				};
			};
		};
	volume_editor_create_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = compound_string("Volume editor");
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_volume_editor_create_button(command_window_structure);
				};
			XmNactivateCallback = procedures
				{
				callback_command("gfx create vt_editor");
				};
			};
		};
	projections_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("2-D Projections");
			XmNmnemonic = keysym("P");
			XmNsensitive = true;
			};
		controls
			{
			XmPulldownMenu
				{
				controls
					{
					XmPushButton
						{
						arguments
							{
							XmNlabelString = compound_string("xy");
							XmNuserData = execute_command_structure;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								callback_command("fem define window on xy");
								};
							};
						};
					XmPushButton
						{
						arguments
							{
							XmNlabelString = compound_string("xz");
							XmNuserData = execute_command_structure;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								callback_command("fem define window on xz");
								};
							};
						};
					XmPushButton
						{
						arguments
							{
							XmNlabelString = compound_string("yz");
							XmNuserData = execute_command_structure;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								callback_command("fem define window on yz");
								};
							};
						};
					};
				};
			};
		};
	help_menu_bar: XmMenuBar
		{
		arguments
			{
			XmNspacing = large_widget_spacing;
			XmNshadowThickness = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmCascadeButton help_button;
			};
		};
	help_button: XmCascadeButton
		{
		arguments
			{
			XmNlabelString = compound_string("Help");
			XmNmnemonic = keysym("H");
			XmNsensitive = true;
!			XmNshadowThickness = 0;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
			XmNuserData = execute_command_structure;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				callback_command("Help");
				};
			};
		};

end module;
