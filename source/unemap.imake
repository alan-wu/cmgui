XCOMM **************************************************************************
XCOMM FILE : unemap.imake
XCOMM
XCOMM LAST MODIFIED : 3 June 2002
XCOMM
XCOMM DESCRIPTION :
XCOMM Makefile for unemap
XCOMM ==========================================================================
/* The UnemapMake filename should match the filename into which this is being
	written.  This is done in the dependency rules in unemap.make i.e.
	for sgi
		image -T unemap.imake -f /dev/null -s unemap.make
	for linux
		image -DLINUX -T unemap.imake -f /dev/null -s unemap_linux.make */

SHELL=/bin/sh

BIN_PATH=$(CMGUI_DEV_ROOT)/bin
SOURCE_PATH=$(CMGUI_DEV_ROOT)/source
UTILITIES_PATH=$(CMGUI_DEV_ROOT)/utilities
#if defined (CMISS_ROOT_DEFINED)
PRODUCT_PATH=$(CMISS_ROOT)/cmgui
#else /* defined (CMISS_ROOT_DEFINED) */
PRODUCT_PATH=$(CMGUI_DEV_ROOT)
#endif /* defined (CMISS_ROOT_DEFINED) */
PRODUCT_SOURCE_PATH=$(PRODUCT_PATH)/source
PRODUCT_UTILITIES_PATH=$(PRODUCT_PATH)/utilities

#if defined (IRIX) /* switch OperatingSystem */
/* 1 IRIX */
#define IMAGEMAGICK
#if defined (O64)
/* 1.1 IRIX-O64 */
/* the O64 version can be either OPTIMISED or not but only one version is kept
	at the moment */
#define Target unemap64
#define AffineTarget unemap/affine64
#define AnalysisCalculateLibTarget unemap/analysis_calculate64.lib
#define Bmsi2sigTarget unemap/bmsi2sig64
#define Biosense2sigTarget unemap/biosense2sig64
#define Biosense2vrmlTarget unemap/biosense2vrml64
#define CalculateEventsTarget unemap/calculate_events64
#define ChangeCalibrationTarget unemap/change_calibration64
#define ChangeChannelsTarget unemap/change_channels64
#define ChangeConfigurationTarget unemap/change_configuration64
#define ChangeEventsTarget unemap/change_events64
#define ChangeFrequencyTarget unemap/change_frequency64
#define CombineSignalsTarget unemap/combine_signals64
#define DifferenceSignalsTarget unemap/difference_signals64
#define ExtractSignalTarget unemap/extract_signal64
#define FixEcgTarget unemap/fix_ecg64
#define Img2sigTarget unemap/img2sig64
#define MakePlaqueTarget unemap/make_plaque64
#define OpticalSignalsTarget unemap/optical_signals64
#define Plt2cnfgTarget unemap/plt2cnfg64
#define Posdat2sigTarget unemap/posdat2sig64
#define RatioSignalsTarget unemap/ratio_signals64
#define RegisterTarget unemap/register64
#define Sig2textTarget unemap/sig2text64
#define TestDelaunayTarget unemap/test_delaunay64
#define TestUnemapHardwareTarget unemap/test_unemap_hardware64
#define Text2sigTarget unemap/text2sig64
#define Tuff2sigTarget unemap/tuff2sig64
#define UniqueChannelsTarget unemap/unique_channels64
#define Uid2uidhTarget uid2uidh64
#define Makefile unemap_sgi64.make
#define DependMake unemap_sgi64.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/64
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/64
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/64
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/64
#else /* defined (O64) */
/* 1.2 IRIX-N32 */
#if defined (OPTIMISED)
/* 1.2.1 IRIX-N32-OPTIMISED */
#if defined (USE_UNEMAP_3D)
/* 1.2.2.2 IRIX-N32-!OPTIMISED-USE_UNEMAP_3D */
/* this version uses nodes just for 3D window , */
/* USE_UNEMAP_NODES uses nodes for as much as possible   */
#define Target unemap_3d_optimised
#define AffineTarget unemap/affine_3d_optimised
#define AnalysisCalculateLibTarget unemap/analysis_calculate_3d_optimised.lib
#define Bmsi2sigTarget unemap/bmsi2sig_3d_optimised
#define Biosense2sigTarget unemap/biosense2sig_3d_optimised
#define Biosense2vrmlTarget unemap/biosense2vrml_3d_optimised
#define CalculateEventsTarget unemap/calculate_events_3d_optimised
#define ChangeCalibrationTarget unemap/change_calibration_3d_optimised
#define ChangeChannelsTarget unemap/change_channels_3d_optimised
#define ChangeConfigurationTarget unemap/change_configuration_3d_optimised
#define ChangeEventsTarget unemap/change_events_3d_optimised
#define ChangeFrequencyTarget unemap/change_frequency_3d_optimised
#define CombineSignalsTarget unemap/combine_signals_3d_optimised
#define DifferenceSignalsTarget unemap/difference_signals_3d_optimised
#define ExtractSignalTarget unemap/extract_signal_3d_optimised
#define FixEcgTarget unemap/fix_ecg_3d_optimised
#define Img2sigTarget unemap/img2sig_3d_optimised
#define MakePlaqueTarget unemap/make_plaque_3d_optimised
#define OpticalSignalsTarget unemap/optical_signals_3d_optimised
#define Plt2cnfgTarget unemap/plt2cnfg_3d_optimised
#define Posdat2sigTarget unemap/posdat2sig_3d_optimised
#define RatioSignalsTarget unemap/ratio_signals_3d_optimised
#define RegisterTarget unemap/register_3d_optimised
#define Sig2textTarget unemap/sig2text_3d_optimised
#define TestDelaunayTarget unemap/test_delaunay_3d_optimised
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_3d_optimised
#define Text2sigTarget unemap/text2sig_3d_optimised
#define Tuff2sigTarget unemap/tuff2sig_3d_optimised
#define UniqueChannelsTarget unemap/unique_channels_3d_optimised
#define Uid2uidhTarget uid2uidh
#define Makefile unemap_sgi3d_optimised.make
#define DependMake unemap_sgi3d_optimised.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/3d_optimised
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/3d_optimised
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/n32
#else /* defined (USE_UNEMAP_3D) */
#define Target unemap_optimised
#define Makefile unemap_sgioptimised.make
#define AffineTarget unemap/affine_optimised
#define AnalysisCalculateLibTarget unemap/analysis_calculate_optimised.lib
#define Bmsi2sigTarget unemap/bmsi2sig_optimised
#define Biosense2sigTarget unemap/biosense2sig_optimised
#define Biosense2vrmlTarget unemap/biosense2vrml_optimised
#define CalculateEventsTarget unemap/calculate_events_optimised
#define ChangeCalibrationTarget unemap/change_calibration_optimised
#define ChangeChannelsTarget unemap/change_channels_optimised
#define ChangeConfigurationTarget unemap/change_configuration_optimised
#define ChangeEventsTarget unemap/change_events_optimised
#define ChangeFrequencyTarget unemap/change_frequency_optimised
#define CombineSignalsTarget unemap/combine_signals_optimised
#define DifferenceSignalsTarget unemap/difference_signals_optimised
#define ExtractSignalTarget unemap/extract_signal_optimised
#define FixEcgTarget unemap/fix_ecg_optimised
#define Img2sigTarget unemap/img2sig_optimised
#define MakePlaqueTarget unemap/make_plaque_optimised
#define OpticalSignalsTarget unemap/optical_signals_optimised
#define Plt2cnfgTarget unemap/plt2cnfg_optimised
#define Posdat2sigTarget unemap/posdat2sig_optimised
#define RatioSignalsTarget unemap/ratio_signals_optimised
#define RegisterTarget unemap/register_optimised
#define Sig2textTarget unemap/sig2text_optimised
#define TestDelaunayTarget unemap/test_delaunay_optimised
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_optimised
#define Text2sigTarget unemap/text2sig_optimised
#define Tuff2sigTarget unemap/tuff2sig_optimised
#define UniqueChannelsTarget unemap/unique_channels_optimised
#define Uid2uidhTarget uid2uidh
#define DependMake unemap_sgioptimised.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/n32_optnon
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/n32_optnon
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/n32
#endif /* defined (USE_UNEMAP_3D) */
#else /* defined (OPTIMISED) */
/* 1.2.2 IRIX-N32-!OPTIMISED */
#if defined (USE_UNEMAP_NODES)
/* 1.2.2.1 IRIX-N32-!OPTIMISED-USE_UNEMAP_NODES */
/* this version uses nodes for as much as possible, */
/* USE_UNEMAP_3D uses nodes just for 3D window  */
#define Target unemap_nodes
#define AffineTarget unemap/affine_nodes
#define AnalysisCalculateLibTarget unemap/analysis_calculate_nodes.lib
#define Bmsi2sigTarget unemap/bmsi2sig_nodes
#define Biosense2sigTarget unemap/biosense2sig_nodes
#define Biosense2vrmlTarget unemap/biosense2vrml_nodes
#define CalculateEventsTarget unemap/calculate_events_nodes
#define ChangeCalibrationTarget unemap/change_calibration_nodes
#define ChangeChannelsTarget unemap/change_channels_nodes
#define ChangeConfigurationTarget unemap/change_configuration_nodes
#define ChangeEventsTarget unemap/change_events_nodes
#define ChangeFrequencyTarget unemap/change_frequency_nodes
#define CombineSignalsTarget unemap/combine_signals_nodes
#define DifferenceSignalsTarget unemap/difference_signals_nodes
#define ExtractSignalTarget unemap/extract_signal_nodes
#define FixEcgTarget unemap/fix_ecg_nodes
#define Img2sigTarget unemap/img2sig_nodes
#define MakePlaqueTarget unemap/make_plaque_nodes
#define OpticalSignalsTarget unemap/optical_signals_nodes
#define Plt2cnfgTarget unemap/plt2cnfg_nodes
#define Posdat2sigTarget unemap/posdat2sig_nodes
#define RatioSignalsTarget unemap/ratio_signals_nodes
#define RegisterTarget unemap/register_nodes
#define Sig2textTarget unemap/sig2text_nodes
#define TestDelaunayTarget unemap/test_delaunay_nodes
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_nodes
#define Text2sigTarget unemap/text2sig_nodes
#define Tuff2sigTarget unemap/tuff2sig_nodes
#define UniqueChannelsTarget unemap/unique_channels_nodes
#define Uid2uidhTarget uid2uidh
#define Makefile unemap_sginodes.make
#define DependMake unemap_sginodes.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/n32
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/n32
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/n32
#else /* defined (USE_UNEMAP_NODES) */
#if defined (USE_UNEMAP_3D)
/* 1.2.2.2 IRIX-N32-!OPTIMISED-USE_UNEMAP_3D */
/* this version uses nodes just for 3D window , */
/* USE_UNEMAP_NODES uses nodes for as much as possible   */
#define Target unemap_3d
#define AffineTarget unemap/affine_3d
#define AnalysisCalculateLibTarget unemap/analysis_calculate_3d.lib
#define Bmsi2sigTarget unemap/bmsi2sig_3d
#define Biosense2sigTarget unemap/biosense2sig_3d
#define Biosense2vrmlTarget unemap/biosense2vrml_3d
#define CalculateEventsTarget unemap/calculate_events_3d
#define ChangeCalibrationTarget unemap/change_calibration_3d
#define ChangeChannelsTarget unemap/change_channels_3d
#define ChangeConfigurationTarget unemap/change_configuration_3d
#define ChangeEventsTarget unemap/change_events_3d
#define ChangeFrequencyTarget unemap/change_frequency_3d
#define CombineSignalsTarget unemap/combine_signals_3d
#define DifferenceSignalsTarget unemap/difference_signals_3d
#define ExtractSignalTarget unemap/extract_signal_3d
#define FixEcgTarget unemap/fix_ecg_3d
#define Img2sigTarget unemap/img2sig_3d
#define MakePlaqueTarget unemap/make_plaque_3d
#define OpticalSignalsTarget unemap/optical_signals_3d
#define Plt2cnfgTarget unemap/plt2cnfg_3d
#define Posdat2sigTarget unemap/posdat2sig_3d
#define RatioSignalsTarget unemap/ratio_signals_3d
#define RegisterTarget unemap/register_3d
#define Sig2textTarget unemap/sig2text_3d
#define TestDelaunayTarget unemap/test_delaunay_3d
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_3d
#define Text2sigTarget unemap/text2sig_3d
#define Tuff2sigTarget unemap/tuff2sig_3d
#define UniqueChannelsTarget unemap/unique_channels_3d
#define Uid2uidhTarget uid2uidh
#define Makefile unemap_sgi3d.make
#define DependMake unemap_sgi3d.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/3d
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/3d
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/n32
#else /* defined (USE_UNEMAP_3D) */
/* 1.2.2.3 IRIX-N32-!OPTIMISED-!USE_UNEMAP_NODES */
/* The normal debug and memory check versions keep the same extension as they
	only differ in one file */
#if !defined (MEMORY_CHECK)
/* 1.2.2.3.1 IRIX-N32-!OPTIMISED-!USE_UNEMAP_NODES-!MEMORY_CHECK */
#define Target unemap32
#define AffineTarget unemap/affine32
#define AnalysisCalculateLibTarget unemap/analysis_calculate32.lib
#define Bmsi2sigTarget unemap/bmsi2sig32
#define Biosense2sigTarget unemap/biosense2sig32
#define Biosense2vrmlTarget unemap/biosense2vrml32
#define CalculateEventsTarget unemap/calculate_events32
#define ChangeCalibrationTarget unemap/change_calibration32
#define ChangeChannelsTarget unemap/change_channels32
#define ChangeConfigurationTarget unemap/change_configuration32
#define ChangeEventsTarget unemap/change_events32
#define ChangeFrequencyTarget unemap/change_frequency32
#define CombineSignalsTarget unemap/combine_signals32
#define DifferenceSignalsTarget unemap/difference_signals32
#define ExtractSignalTarget unemap/extract_signal32
#define FixEcgTarget unemap/fix_ecg32
#define Img2sigTarget unemap/img2sig32
#define MakePlaqueTarget unemap/make_plaque32
#define OpticalSignalsTarget unemap/optical_signals32
#define Plt2cnfgTarget unemap/plt2cnfg32
#define Posdat2sigTarget unemap/posdat2sig32
#define RatioSignalsTarget unemap/ratio_signals32
#define RegisterTarget unemap/register32
#define Sig2textTarget unemap/sig2text32
#define TestDelaunayTarget unemap/test_delaunay32
#define TestUnemapHardwareTarget unemap/test_unemap_hardware32
#define Text2sigTarget unemap/text2sig32
#define Tuff2sigTarget unemap/tuff2sig32
#define UniqueChannelsTarget unemap/unique_channels32
#define Uid2uidhTarget uid2uidh
#define Makefile unemap_sgi.make
#define DependMake unemap_sgi.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/n32_nonodes
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/n32_nonodes
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/n32
#else /* !defined (MEMORY_CHECK) */
/* 1.2.2.3.1 IRIX-N32-!OPTIMISED-!USE_UNEMAP_NODES-MEMORY_CHECK */
#define Target unemap_memorycheck
#define AffineTarget unemap/affine32
#define AnalysisCalculateLibTarget unemap/analysis_calculate32.lib
#define Bmsi2sigTarget unemap/bmsi2sig32
#define Biosense2sigTarget unemap/biosense2sig32
#define Biosense2vrmlTarget unemap/biosense2vrml32
#define CalculateEventsTarget unemap/calculate_events32
#define ChangeCalibrationTarget unemap/change_calibration32
#define ChangeChannelsTarget unemap/change_channels32
#define ChangeConfigurationTarget unemap/change_configuration32
#define ChangeEventsTarget unemap/change_events32
#define ChangeFrequencyTarget unemap/change_frequency32
#define CombineSignalsTarget unemap/combine_signals32
#define DifferenceSignalsTarget unemap/difference_signals32
#define ExtractSignalTarget unemap/extract_signal32
#define FixEcgTarget unemap/fix_ecg32
#define Img2sigTarget unemap/img2sig32
#define MakePlaqueTarget unemap/make_plaque32
#define OpticalSignalsTarget unemap/optical_signals32
#define Plt2cnfgTarget unemap/plt2cnfg32
#define Posdat2sigTarget unemap/posdat2sig32
#define RatioSignalsTarget unemap/ratio_signals32
#define RegisterTarget unemap/register32
#define Sig2textTarget unemap/sig2text32
#define TestDelaunayTarget unemap/test_delaunay32
#define TestUnemapHardwareTarget unemap/test_unemap_hardware32
#define Text2sigTarget unemap/text2sig32
#define Tuff2sigTarget unemap/tuff2sig32
#define UniqueChannelsTarget unemap/unique_channels32
#define Uid2uidhTarget uid2uidh
#define Makefile unemap_sgi_memorycheck.make
#define DependMake unemap_sgi_memorycheck.depend
#define ObjSuffix o
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/n32_nonodes
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/n32_nonodes
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/n32
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/n32
#endif /* !defined (MEMORY_CHECK) */
#endif /* defined (USE_UNEMAP_NODES) */
#endif /* defined (USE_UNEMAP_3D) */
#endif /* defined (OPTIMISED) */
#endif /* defined (O64) */
#elif defined (LINUX) /* switch OperatingSystem */
/* 2 LINUX */
#define IMAGEMAGICK
#if defined (USE_UNEMAP_NODES)
/* 2.1 LINUX-USE_UNEMAP_NODES */
/* this version uses nodes for as much as possible , */
/* USE_UNEMAP_3D uses nodes just for 3D window    */
#define Target unemap_linux_nodes
#define AffineTarget unemap/affine_linux_nodes
#define AnalysisCalculateLibTarget unemap/analysis_calculate_linux_nodes.lib
#define Bmsi2sigTarget unemap/bmsi2sig_linux_nodes
#define Biosense2sigTarget unemap/biosense2sig_linux_nodes
#define Biosense2vrmlTarget unemap/biosense2vrml_linux_nodes
#define CalculateEventsTarget unemap/calculate_events_linux_nodes
#define ChangeCalibrationTarget unemap/change_calibration_linux_nodes
#define ChangeChannelsTarget unemap/change_channels_linux_nodes
#define ChangeConfigurationTarget unemap/change_configuration_linux_nodes
#define ChangeEventsTarget unemap/change_events_linux_nodes
#define ChangeFrequencyTarget unemap/change_frequency_linux_nodes
#define CombineSignalsTarget unemap/combine_signals_linux_nodes
#define DifferenceSignalsTarget unemap/difference_signals_linux_nodes
#define ExtractSignalTarget unemap/extract_signal_linux_nodes
#define FixEcgTarget unemap/fix_ecg_linux_nodes
#define Img2sigTarget unemap/img2sig_linux_nodes
#define MakePlaqueTarget unemap/make_plaque_linux_nodes
#define OpticalSignalsTarget unemap/optical_signals_linux_nodes
#define Plt2cnfgTarget unemap/plt2cnfg_linux_nodes
#define Posdat2sigTarget unemap/posdat2sig_linux_nodes
#define RatioSignalsTarget unemap/ratio_signals_linux_nodes
#define RegisterTarget unemap/register_linux_nodes
#define Sig2textTarget unemap/sig2text_linux_nodes
#define TestDelaunayTarget unemap/test_delaunay_linux_nodes
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_linux_nodes
#define Text2sigTarget unemap/text2sig_linux_nodes
#define Tuff2sigTarget unemap/tuff2sig_linux_nodes
#define UniqueChannelsTarget unemap/unique_channels_linux_nodes
#define Uid2uidhTarget uid2uidh_linux
#define Makefile unemap_linux_nodes.make
#define DependMake unemap_linux_nodes.depend
#define ObjSuffix o
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/linux_nodes_g
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/linux_nodes_g
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/linux_nodes_g
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/linux_nodes_g
#else /* defined (USE_UNEMAP_NODES) */
#if defined (USE_UNEMAP_3D)
/* 2.2 LINUX-USE_UNEMAP_3D */
/* this version uses nodes just for 3D window  */
/* USE_UNEMAP_NODES uses nodes  for as much as possible   */
#if !defined (OPTIMISED)
#define Target unemap_linux_3d
#define AffineTarget unemap/affine_linux_3d
#define AnalysisCalculateLibTarget unemap/analysis_calculate_linux_3d.lib
#define Bmsi2sigTarget unemap/bmsi2sig_linux_3d
#define Biosense2sigTarget unemap/biosense2sig_linux_3d
#define Biosense2vrmlTarget unemap/biosense2vrml_linux_3d
#define CalculateEventsTarget unemap/calculate_events_linux_3d
#define ChangeCalibrationTarget unemap/change_calibration_linux_3d
#define ChangeChannelsTarget unemap/change_channels_linux_3d
#define ChangeConfigurationTarget unemap/change_configuration_linux_3d
#define ChangeEventsTarget unemap/change_events_linux_3d
#define ChangeFrequencyTarget unemap/change_frequency_linux_3d
#define CombineSignalsTarget unemap/combine_signals_linux_3d
#define DifferenceSignalsTarget unemap/difference_signals_linux_3d
#define ExtractSignalTarget unemap/extract_signal_linux_3d
#define FixEcgTarget unemap/fix_ecg_linux_3d
#define Img2sigTarget unemap/img2sig_linux_3d
#define MakePlaqueTarget unemap/make_plaque_linux_3d
#define OpticalSignalsTarget unemap/optical_signals_linux_3d
#define Plt2cnfgTarget unemap/plt2cnfg_linux_3d
#define Posdat2sigTarget unemap/posdat2sig_linux_3d
#define RatioSignalsTarget unemap/ratio_signals_linux_3d
#define RegisterTarget unemap/register_linux_3d
#define Sig2textTarget unemap/sig2text_linux_3d
#define TestDelaunayTarget unemap/test_delaunay_linux_3d
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_linux_3d
#define Text2sigTarget unemap/text2sig_linux_3d
#define Tuff2sigTarget unemap/tuff2sig_linux_3d
#define UniqueChannelsTarget unemap/unique_channels_linux_3d
#define Uid2uidhTarget uid2uidh_linux
#define Makefile unemap_linux_3d.make
#define DependMake unemap_linux_3d.depend
#define ObjSuffix o
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/linux_3d_g
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/linux_3d_g
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/linux_3d_g
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/linux_3d_g
#else /* !defined (OPTIMISED) */
#define Target unemap_linux_3d_optimised
#define AffineTarget unemap/affine_linux_3d_optimised
#define AnalysisCalculateLibTarget unemap/analysis_calculate_linux_3d_optimised.lib
#define Bmsi2sigTarget unemap/bmsi2sig_linux_3d_optimised
#define Biosense2sigTarget unemap/biosense2sig_linux_3d_optimised
#define Biosense2vrmlTarget unemap/biosense2vrml_linux_3d_optimised
#define CalculateEventsTarget unemap/calculate_events_linux_3d_optimised
#define ChangeCalibrationTarget unemap/change_calibration_linux_3d_optimised
#define ChangeChannelsTarget unemap/change_channels_linux_3d_optimised
#define ChangeConfigurationTarget unemap/change_configuration_linux_3d_optimised
#define ChangeEventsTarget unemap/change_events_linux_3d_optimised
#define ChangeFrequencyTarget unemap/change_frequency_linux_3d_optimised
#define CombineSignalsTarget unemap/combine_signals_linux_3d_optimised
#define DifferenceSignalsTarget unemap/difference_signals_linux_3d_optimised
#define ExtractSignalTarget unemap/extract_signal_linux_3d_optimised
#define FixEcgTarget unemap/fix_ecg_linux_3d_optimised
#define Img2sigTarget unemap/img2sig_linux_3d_optimised
#define MakePlaqueTarget unemap/make_plaque_linux_3d_optimised
#define OpticalSignalsTarget unemap/optical_signals_linux_3d_optimised
#define Plt2cnfgTarget unemap/plt2cnfg_linux_3d_optimised
#define Posdat2sigTarget unemap/posdat2sig_linux_3d_optimised
#define RatioSignalsTarget unemap/ratio_signals_linux_3d_optimised
#define RegisterTarget unemap/register_linux_3d_optimised
#define Sig2textTarget unemap/sig2text_linux_3d_optimised
#define TestDelaunayTarget unemap/test_delaunay_linux_3d_optimised
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_linux_3d_optimised
#define Text2sigTarget unemap/text2sig_linux_3d_optimised
#define Tuff2sigTarget unemap/tuff2sig_linux_3d_optimised
#define UniqueChannelsTarget unemap/unique_channels_linux_3d_optimised
#define Uid2uidhTarget uid2uidh_linux_optimised
#define Makefile unemap_linux_3d_optimised.make
#define DependMake unemap_linux_3d_optimised.depend
#define ObjSuffix o
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/linux_3d_optimised
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/linux_3d_optimised
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/linux_3d_optimised
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/linux_3d_optimised
#endif /* !defined (OPTIMISED) */
#else /* defined (USE_UNEMAP_3D) */
/* 2.3 LINUX-!USE_UNEMAP_NODES */
#if !defined (OPTIMISED)
#define Target unemap_linux
#define AffineTarget unemap/affine_linux
#define AnalysisCalculateLibTarget unemap/analysis_calculate_linux.lib
#define Bmsi2sigTarget unemap/bmsi2sig_linux
#define Biosense2sigTarget unemap/biosense2sig_linux
#define Biosense2vrmlTarget unemap/biosense2vrml_linux
#define CalculateEventsTarget unemap/calculate_events_linux
#define ChangeCalibrationTarget unemap/change_calibration_linux
#define ChangeChannelsTarget unemap/change_channels_linux
#define ChangeConfigurationTarget unemap/change_configuration_linux
#define ChangeEventsTarget unemap/change_events_linux
#define ChangeFrequencyTarget unemap/change_frequency_linux
#define CombineSignalsTarget unemap/combine_signals_linux
#define DifferenceSignalsTarget unemap/difference_signals_linux
#define ExtractSignalTarget unemap/extract_signal_linux
#define FixEcgTarget unemap/fix_ecg_linux
#define Img2sigTarget unemap/img2sig_linux
#define MakePlaqueTarget unemap/make_plaque_linux
#define OpticalSignalsTarget unemap/optical_signals_linux
#define Plt2cnfgTarget unemap/plt2cnfg_linux
#define Posdat2sigTarget unemap/posdat2sig_linux
#define RatioSignalsTarget unemap/ratio_signals_linux
#define RegisterTarget unemap/register_linux
#define Sig2textTarget unemap/sig2text_linux
#define TestDelaunayTarget unemap/test_delaunay_linux
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_linux
#define Text2sigTarget unemap/text2sig_linux
#define Tuff2sigTarget unemap/tuff2sig_linux
#define UniqueChannelsTarget unemap/unique_channels_linux
#define Uid2uidhTarget uid2uidh_linux
#define Makefile unemap_linux.make
#define DependMake unemap_linux.depend
#define ObjSuffix o
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/linux_g
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/linux_g
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/linux_g
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/linux_g
#else /* !defined (OPTIMISED) */
#define Target unemap_linux_optimised
#define AffineTarget unemap/affine_linux_optimised
#define AnalysisCalculateLibTarget unemap/analysis_calculate_linux_optimised.lib
#define Bmsi2sigTarget unemap/bmsi2sig_linux_optimised
#define Biosense2sigTarget unemap/biosense2sig_linux_optimised
#define Biosense2vrmlTarget unemap/biosense2vrml_linux_optimised
#define CalculateEventsTarget unemap/calculate_events_linux_optimised
#define ChangeCalibrationTarget unemap/change_calibration_linux_optimised
#define ChangeChannelsTarget unemap/change_channels_linux_optimised
#define ChangeConfigurationTarget unemap/change_configuration_linux_optimised
#define ChangeEventsTarget unemap/change_events_linux_optimised
#define ChangeFrequencyTarget unemap/change_frequency_linux_optimised
#define CombineSignalsTarget unemap/combine_signals_linux_optimised
#define DifferenceSignalsTarget unemap/difference_signals_linux_optimised
#define ExtractSignalTarget unemap/extract_signal_linux_optimised
#define FixEcgTarget unemap/fix_ecg_linux_optimised
#define Img2sigTarget unemap/img2sig_linux_optimised
#define MakePlaqueTarget unemap/make_plaque_linux_optimised
#define OpticalSignalsTarget unemap/optical_signals_linux_optimised
#define Plt2cnfgTarget unemap/plt2cnfg_linux_optimised
#define Posdat2sigTarget unemap/posdat2sig_linux_optimised
#define RatioSignalsTarget unemap/ratio_signals_linux_optimised
#define RegisterTarget unemap/register_linux_optimised
#define Sig2textTarget unemap/sig2text_linux_optimised
#define TestDelaunayTarget unemap/test_delaunay_linux_optimised
#define TestUnemapHardwareTarget unemap/test_unemap_hardware_linux_optimised
#define Text2sigTarget unemap/text2sig_linux_optimised
#define Tuff2sigTarget unemap/tuff2sig_linux_optimised
#define UniqueChannelsTarget unemap/unique_channels_linux_optimised
#define Uid2uidhTarget uid2uidh_linux_optimised
#define Makefile unemap_linux_optimised.make
#define DependMake unemap_linux_optimised.depend
#define ObjSuffix o
/* Can't use linux on its own as this is defined! */
OBJECT_PATH=$(CMGUI_DEV_ROOT)/object/unemap/linux_optimised
PRODUCT_OBJECT_PATH=$(PRODUCT_PATH)/object/unemap/linux_optimised
UIDH_PATH=$(CMGUI_DEV_ROOT)/uidh/unemap/linux_optimised
PRODUCT_UIDH_PATH=$(PRODUCT_PATH)/uidh/unemap/linux_optimised
#endif /* !defined (OPTIMISED) */
#endif /* defined (USE_UNEMAP_3D) */
#endif /* defined (USE_UNEMAP_NODES) */
#endif /* switch OperatingSystem */

#if defined (CMISS_ROOT_DEFINED)
VPATH=$(BIN_PATH):$(UTILITIES_PATH):$(OBJECT_PATH):$(UIDH_PATH):$(PRODUCT_SOURCE_PATH):$(PRODUCT_OBJECT_PATH):$(PRODUCT_UIDH_PATH)
#else /* defined (CMISS_ROOT) */
VPATH=$(BIN_PATH):$(UTILITIES_PATH):$(OBJECT_PATH):$(UIDH_PATH)
#endif /* defined (CMISS_ROOT) */

/* Include all the common rules */
#include INCLUDE_IMAKEFILE

SOURCE_DIRECTORY_INC = -I$(SOURCE_PATH) -I$(PRODUCT_SOURCE_PATH)

#if defined (IRIX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DSGI -Dmips
#elif defined(LINUX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DGENERIC_PC
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
PLATFORM_SWITCH = -DIBM
PLATFORM_SWITCH = -DSGI
PLATFORM_SWITCH = -DVAX
PLATFORM_SWITCH = -DALPHA
#endif /* (OLD_CODE) */

OPERATING_SYSTEM = -DUNIX
#if defined (OLD_CODE)
OPERATING_SYSTEM = -DWIN32
???DB.  Win32 is an API not an operating system
OPERATING_SYSTEM = -DVMS
#endif /* (OLD_CODE) */

WINDOWING_SYSTEM = -DMOTIF
#if defined (OLD_CODE)
WINDOWING_SYSTEM = -DWINDOWS
#endif /* (OLD_CODE) */

#if !defined (IMAGEMAGICK)
IMAGEMAGICK_SWITCH =
IMAGEMAGICK_LIB = 
#else /* !defined (IMAGEMAGICK) */
#if defined (CMISS_ROOT_DEFINED)
IMAGEMAGICK_PATH = $(CMISS_ROOT)/image_libraries
#else /* defined (CMISS_ROOT_DEFINED) */
IMAGEMAGICK_PATH = $(CMGUI_DEV_ROOT)/image_libraries
#endif /* defined (CMISS_ROOT_DEFINED) */
#if defined (IRIX) /* switch OperatingSystem */
IMAGEMAGICK_SWITCH = -DIMAGEMAGICK
#if defined (O64)
IMAGEMAGICK_INC = -I$(IMAGEMAGICK_PATH)/includeirix-64/
IMAGEMAGICK_LIB = $(IMAGEMAGICK_PATH)/libirix-64/libMagick.a $(IMAGEMAGICK_PATH)/libirix-64/libtiff.a $(IMAGEMAGICK_PATH)/libirix-64/libpng.a $(IMAGEMAGICK_PATH)/libirix-64/libjpeg.a $(IMAGEMAGICK_PATH)/libirix-64/libxml2.a $(IMAGEMAGICK_PATH)/libirix-64/libz.a
#else /* defined (O64) */
IMAGEMAGICK_INC = -I$(IMAGEMAGICK_PATH)/includeirix-n32/
IMAGEMAGICK_LIB = $(IMAGEMAGICK_PATH)/libirix-n32/libMagick.a $(IMAGEMAGICK_PATH)/libirix-n32/libtiff.a $(IMAGEMAGICK_PATH)/libirix-n32/libpng.a $(IMAGEMAGICK_PATH)/libirix-n32/libjpeg.a $(IMAGEMAGICK_PATH)/libirix-n32/libxml2.a $(IMAGEMAGICK_PATH)/libirix-n32/libz.a
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */
IMAGEMAGICK_SWITCH = -DIMAGEMAGICK -D_FILE_OFFSET_BITS=64
IMAGEMAGICK_INC = -I$(IMAGEMAGICK_PATH)/includelinux/
IMAGEMAGICK_LIB = $(IMAGEMAGICK_PATH)/liblinux/libMagick.a $(IMAGEMAGICK_PATH)/liblinux/libtiff.a $(IMAGEMAGICK_PATH)/liblinux/libpng.a $(IMAGEMAGICK_PATH)/liblinux/libjpeg.a $(IMAGEMAGICK_PATH)/liblinux/libxml2.a $(IMAGEMAGICK_PATH)/liblinux/libz.a
#endif /* switch OperatingSystem */
#endif /* !defined (IMAGEMAGICK) */

#if defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D)
#if defined (IRIX) /* switch OperatingSystem */
#if defined (O64)
XCOMM for OpenGL without SGI movie (64bit doesnt have libraries as of Jan99)
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API -DDM_BUFFERS 
GRAPHICS_LIB = -lGL -lGLU
#else /* defined (O64) */
XCOMM  for OpenGL with SGI movie
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API -DDM_BUFFERS -DSGI_MOVIE_FILE -DSGI_DIGITAL_MEDIA
GRAPHICS_LIB = -delay_load -lmoviefile -delay_load -ldmedia -lGL -lGLU
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */
XCOMM for OpenGL without SGI movie
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API
GRAPHICS_LIB = -L/usr/local/lib -lGL -lGLU
#endif /* switch OperatingSystem */
#endif /* (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D)*/

#if defined (USE_UNEMAP_NODES)
USE_NODES_SWITCH = -DUNEMAP_USE_NODES -DUNEMAP_USE_3D
#else /* (USE_UNEMAP_NODES) */
#if defined (USE_UNEMAP_3D)
USE_NODES_SWITCH = -DUNEMAP_USE_3D
#else /* defined (USE_UNEMAP_3D) */
USE_NODES_SWITCH =
#endif /* defined (USE_UNEMAP_3D) */
#endif /* (USE_UNEMAP_NODES) */

UIDH_INC = -I$(UIDH_PATH) -I$(PRODUCT_UIDH_PATH)

#if defined (IRIX) && ( defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D) )
EXTERNAL_INPUT_DEFINES = -DDIALS -DSPACEBALL -DPOLHEMUS -DFARO -DEXT_INPUT
EXTERNAL_INPUT_LIB = -lXext -lXi
#else /* defined (IRIX) && ( defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D) ) */
EXTERNAL_INPUT_DEFINES =
EXTERNAL_INPUT_LIB =
#endif /* defined (IRIX) && ( defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D) ) */

POSTSCRIPT_DEFINES =

XCOMM By default some names are "mangled" to get external names <= 32 characters
#if defined (OLD_CODE)
NAME_DEFINES =
#endif /* (OLD_CODE) */
NAME_DEFINES = -DFULL_NAMES

XCOMM Temporary flags that are used during development
TEMPORARY_DEVELOPMENT_FLAGS =
#if defined (OLD_CODE)
TEMPORARY_DEVELOPMENT_FLAGS = -DTEST_TRUE_COLOUR_VISUAL
TEMPORARY_DEVELOPMENT_FLAGS = -DWINDOWS_DEV_FLAG
#endif /* (OLD_CODE) */

#if defined (OLD_CODE)
CFLAGS = /float=ieee /standard=ansi89
CFLAGS =
CFLAGS = -ansi -pedantic -fullwarn -woff 841 -wlint,-faivu
#if defined (IRIX) /* switch OperatingSystem */
CFLAGS = -ansi -pedantic -woff 1521,1048
#elif defined(LINUX) /* switch OperatingSystem */
CFLAGS = -ansi -pedantic
#endif /* switch OperatingSystem */
#endif /* defined (OLD_CODE) */

#if defined (OLD_CODE)
LIB = -lMrm -lXm -lXt -lX11 -lPW -lm -lmalloc_cv
???DB.  For linux, to make sure that staticly linked
LIB = /usr/X11R6/lib/libMrm.a /usr/X11R6/lib/libXm.a /usr/X11R6/lib/libXpm.a -lXt -lXext -lX11 -lSM -lICE -lm
LIB = -lMrm -lXm -lXt -lX11 -lPW -lm
LIB = -lMrm -lXm -lXt -lX11 -lXpm -lm
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
LIB = -lMrm -lXm -lXt -lX11 -lPW -lftn -lm -lXext -lpthread
#elif defined(LINUX) /* switch OperatingSystem */
XCOMM ???DB.  What is g2c for?  Stops linking on my laptop
XCOMM LIB = -lMrm -lXm -lXt -lX11 -lXmu -lXext -lg2c -lm -ldl -lXp -lSM -lICE -lpthread
LIB = -lMrm -lXm -lXt -lX11 -lXmu -lXext -lm -ldl -lXp -lSM -lICE -lpthread
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
XCOMM ???DB.  Until can remove CMISS link from user_interface
WORMHOLE_INC = -I/product/cmiss/wormhole/source
WORMHOLE_INC = -I/usr/people/bullivan/wormhole/source
WORMHOLE_INC = -I/home/bullivan/wormhole/source
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
WORMHOLE_LIB = -L${CMISS_ROOT}/wormhole/lib -lwormhole_n32
WORMHOLE_INC = -I${CMISS_ROOT}/wormhole/source
#elif defined(LINUX) /* switch OperatingSystem */
WORMHOLE_LIB = -L{CMISS_ROOT}/wormhole/lib -lwormhole
WORMHOLE_INC = -I{CMISS_ROOT}/wormhole/source
#endif /* switch OperatingSystem */

#if defined (LINUX)
X11_INC = -I/usr/X11R6/include
#else
X11_INC =
#endif

START_ALL_DEFINES =
END_ALL_DEFINES =

START_ALL_INCLUDES =
END_ALL_INCLUDES =

#if defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D)
ALL_DEFINES = $(START_ALL_DEFINES) \
	$(COMPILE_DEFINES) $(TARGET_TYPE_DEFINES) \
	$(PLATFORM_SWITCH) $(OPERATING_SYSTEM) $(WINDOWING_SYSTEM) $(USE_NODES_SWITCH) \
	$(EXTERNAL_INPUT_DEFINES) $(NAME_DEFINES) $(TEMPORARY_DEVELOPMENT_FLAGS) \
	$(GRAPHICS_LIBRARY_SWITCH) $(IMAGEMAGICK_SWITCH)\
	-DNOT_ACQUISITION_ONLY \
	-DSPECTRAL_TOOLS \
	$(END_ALL_DEFINES)
#else
ALL_DEFINES = $(START_ALL_DEFINES) \
	$(COMPILE_DEFINES) $(TARGET_TYPE_DEFINES) \
	$(PLATFORM_SWITCH) $(OPERATING_SYSTEM) $(WINDOWING_SYSTEM) $(USE_NODES_SWITCH) \
	$(EXTERNAL_INPUT_DEFINES) $(NAME_DEFINES) $(TEMPORARY_DEVELOPMENT_FLAGS) \
	$(IMAGEMAGICK_SWITCH) -DNOT_ACQUISITION_ONLY \
	-DSPECTRAL_TOOLS \
	$(END_ALL_DEFINES)
#endif /* (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D)*/

ALL_INCLUDES = $(START_ALL_INCLUDES) \
	$(SOURCE_DIRECTORY_INC) \
	$(WORMHOLE_INC) $(IMAGEMAGICK_INC) $(UIDH_INC) $(X11_INC) \
	$(END_ALL_INCLUDES)

ALL_FLAGS = $(OPTIMISATION_FLAGS) $(COMPILE_FLAGS) $(TARGET_TYPE_FLAGS) \
	$(ALL_DEFINES) $(ALL_INCLUDES)

#if defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D)
ALL_LIB = $(GRAPHICS_LIB) $(IMAGEMAGICK_LIB) $(LIB) $(EXTERNAL_INPUT_LIB)
#else
ALL_LIB = $(IMAGEMAGICK_LIB) $(LIB) $(EXTERNAL_INPUT_LIB)
#endif /* defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D) */

COMMAND_SRCS = \
	command/parser.c

#if defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D)
CHOOSE_SRCS = \
	choose/choose_computed_field.c \
	choose/choose_fe_field.c \
	choose/choose_node_group.c \
	choose/chooser.c
COLOUR_SRCS = \
	colour/edit_var.c
COMPUTED_FIELD_SRCS = \
	computed_field/computed_field.c \
	computed_field/computed_field_component_operations.c \
	computed_field/computed_field_composite.c \
	computed_field/computed_field_coordinate.c \
	computed_field/computed_field_finite_element.c \
	computed_field/computed_field_find_xi.c \
	computed_field/computed_field_fibres.c \
	computed_field/computed_field_integration.c \
	computed_field/computed_field_set.c \
	computed_field/computed_field_update.c \
	computed_field/computed_field_value_index_ranges.c \
	computed_field/computed_field_vector_operations.c \
	computed_field/computed_field_wrappers.c
FINITE_ELEMENT_SRCS = \
	finite_element/export_finite_element.c \
	finite_element/finite_element_discretization.c \
	finite_element/finite_element_time.c \
	finite_element/finite_element_to_graphics_object.c \
	finite_element/finite_element_to_iso_lines.c \
	finite_element/finite_element_to_streamlines.c \
	finite_element/finite_element.c \
	finite_element/finite_element_adjacent_elements.c \
	finite_element/import_finite_element.c
GENERAL_SRCS = \
	general/any_object.c \
	general/callback.c \
	general/compare.c \
	general/debug.c \
	general/error_handler.c \
	general/geometry.c \
	general/heapsort.c \
	general/image_utilities.c \
	general/indexed_multi_range.c \
	general/machine.c \
	general/matrix_vector.c \
	general/multi_range.c \
	general/myio.c \
	general/mystring.c \
	general/child_process.c \
	general/value.c \
	general/postscript.c \
	general/statistics.c
GRAPHICS_SRCS = \
	graphics/complex.c \
	graphics/laguer.c \
	graphics/spectrum.c \
	graphics/environment_map.c \
	graphics/texture_line.c \
	graphics/mcubes.c \
	graphics/makegtobj.c \
	graphics/glyph.c \
	graphics/graphical_element.c \
	graphics/auxiliary_graphics_types.c \
	graphics/element_group_settings.c \
	graphics/element_point_ranges.c \
	graphics/volume_texture.c \
	graphics/material.c \
	graphics/rendergl.c \
	graphics/graphics_object.c \
	graphics/graphics_library.c \
	graphics/light.c \
	graphics/light_model.c \
	graphics/colour.c \
	graphics/scene_viewer.c \
	graphics/scene.c \
	graphics/selected_graphic.c \
	graphics/spectrum_settings.c \
 	graphics/texture.c \
 	graphics/transform_tool.c
INTERACTION_SRCS = \
	interaction/interaction_graphics.c \
	interaction/interaction_volume.c \
	interaction/interactive_tool.c \
	interaction/interactive_toolbar_widget.c \
	interaction/interactive_event.c
POSITION_SRCS = \
	io_devices/input_module.c \
	io_devices/matrix.c
NODE_SRCS = \
	node/node_operations.c \
	node/node_tool.c
SELECTION_SRCS = \
	selection/element_point_ranges_selection.c \
	selection/element_selection.c \
	selection/node_selection.c
THREE_D_DRAWING_SRCS = \
	three_d_drawing/dm_interface.c \
	three_d_drawing/graphics_buffer.c \
	three_d_drawing/movie_extensions.c \
	three_d_drawing/ThreeDDraw.c
TIME_SRCS = \
	time/time.c \
	time/time_keeper.c \
	time/time_editor.c \
	time/time_editor_dialog.c
UNEMAP_SRCS = \
	unemap/acquisition.c \
	unemap/acquisition_window.c \
	unemap/acquisition_work_area.c \
	unemap/analysis.c \
	unemap/analysis_calculate.c \
	unemap/analysis_drawing.c \
	unemap/analysis_window.c \
	unemap/analysis_work_area.c \
	unemap/bard.c \
	unemap/beekeeper.c \
	unemap/cardiomapp.c \
	unemap/delaunay.c \
	unemap/edf.c \
	unemap/eimaging_time_dialog.c \
	unemap/drawing_2d.c \
	unemap/interpolate.c \
	unemap/map_dialog.c \
	unemap/mapping.c \
	unemap/mapping_window.c \
	unemap/neurosoft.c \
	unemap/pacing_window.c \
	unemap/page_window.c \
	unemap/rig.c \
	unemap/rig_node.c \
	unemap/setup_dialog.c \
	unemap/spectral_methods.c \
	unemap/system_window.c \
	unemap/trace_window.c \
	unemap/unemap_package.c \
	unemap/unemap_hardware_client.c
#else
CHOOSE_SRCS =
COLOUR_SRCS =
COMPUTED_FIELD_SRCS =
FINITE_ELEMENT_SRCS =
GENERAL_SRCS = \
	general/callback.c \
	general/compare.c \
	general/debug.c \
	general/error_handler.c \
	general/geometry.c \
	general/heapsort.c \
	general/image_utilities.c \
	general/machine.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	general/postscript.c
GRAPHICS_SRCS = \
	graphics/colour.c \
	graphics/material.c \
	graphics/spectrum.c \
	graphics/spectrum_settings.c \
	graphics/texture.c
INTERACTION_SRCS =
POSITION_SRCS =
NODE_SRCS =
SELECTION_SRCS =
TIME_SRCS = \
	time/time.c \
	time/time_keeper.c \
	time/time_editor.c \
	time/time_editor_dialog.c
THREE_D_DRAWING_SRCS =
UNEMAP_SRCS = \
	unemap/acquisition.c \
	unemap/acquisition_window.c \
	unemap/acquisition_work_area.c \
	unemap/analysis.c \
	unemap/analysis_calculate.c \
	unemap/analysis_drawing.c \
	unemap/analysis_window.c \
	unemap/analysis_work_area.c \
	unemap/bard.c \
	unemap/beekeeper.c \
	unemap/cardiomapp.c \
	unemap/delaunay.c \
	unemap/edf.c \
	unemap/eimaging_time_dialog.c \
	unemap/drawing_2d.c \
	unemap/interpolate.c \
	unemap/map_dialog.c \
	unemap/mapping.c \
	unemap/mapping_window.c \
	unemap/neurosoft.c \
	unemap/pacing_window.c \
	unemap/page_window.c \
	unemap/rig.c \
	unemap/rig_node.c \
	unemap/setup_dialog.c \
	unemap/spectral_methods.c \
	unemap/system_window.c \
	unemap/trace_window.c \
	unemap/unemap_package.c \
	unemap/unemap_hardware_client.c
#endif /* defined (USE_UNEMAP_NODES) || defined (USE_UNEMAP_3D) */
USER_INTERFACE_SRCS = \
	user_interface/call_work_procedures.c \
	user_interface/confirmation.c \
	user_interface/event_dispatcher.c \
	user_interface/filedir.c \
	user_interface/message.c \
	user_interface/printer.c \
	user_interface/user_interface.c

SRCS = \
	$(CHOOSE_SRCS) \
	$(COLOUR_SRCS) \
	$(COMMAND_SRCS) \
	$(COMPUTED_FIELD_SRCS) \
	$(FINITE_ELEMENT_SRCS) \
	$(GENERAL_SRCS) \
	$(GRAPHICS_SRCS) \
	$(INTERACTION_SRCS) \
	$(POSITION_SRCS) \
	$(NODE_SRCS) \
	$(SELECTION_SRCS) \
	$(THREE_D_DRAWING_SRCS) \
	$(TIME_SRCS) \
	$(UNEMAP_SRCS) \
	$(USER_INTERFACE_SRCS)

#if defined (MEMORY_CHECK)
OBJSA = $(SRCS:.c=.ObjSuffix)
OBJSB = $(OBJSA:.cpp=.ObjSuffix)
/* Override the one changed file in the source list */
OBJSC = $(OBJSB:general/debug.ObjSuffix=general/debug_memory_check.ObjSuffix)
OBJS = $(OBJSC:.f=.ObjSuffix)
#else /* defined (MEMORY_CHECK) */
OBJSA = $(SRCS:.c=.ObjSuffix)
OBJSB = $(OBJSA:.cpp=.ObjSuffix)
OBJS = $(OBJSB:.f=.ObjSuffix)
#endif /* defined (MEMORY_CHECK) */

transfer :
	tar -cvf - \
	../unemap.make unemap.imake common.imake unemap.c version.h \
	$(UTILITIES_PATH)/uid2uidh $(UTILITIES_PATH)/uid2uidh_linux \
	unemap/WildC unemap/WildH unemap/WildUil unemap/WildRc \
	unemap_hardware_service/WildC unemap_hardware_service/WildH \
	unemap_hardware_service/WildUil \
	unemap/utilities/WildC unemap/utilities/WildH unemap/utilities/WildUil \
	command/parser.c command/parser.h \
	computed_field/computed_field.h \
	computed_field/computed_field_value_index_ranges.h finite_element/finite_element.h \
	finite_element/finite_element_to_graphics_object.h \
	finite_element/finite_element_to_streamlines.h \
	general/WildC general/WildH general/WildUil \
	graphics/auxiliary_graphics_types.h graphics/colour.c graphics/colour.h \
	graphics/element_group_settings.h graphics/environment_map.h \
	graphics/graphical_element.h graphics/graphics_object.h graphics/material.c \
	graphics/material.h graphics/selected_graphic.h graphics/spectrum.c \
	graphics/spectrum.h graphics/spectrum_settings.c \
	graphics/spectrum_settings.h graphics/graphics_library.h graphics/light.h \
	graphics/scene.h graphics/element_point_ranges.h graphics/texture.c \
	graphics/texture.h graphics/volume_texture.h \
	interaction/interaction_volume.h \
	io_devices/WildC io_devices/WildH io_devices/WildUil \
	selection/WildH \
	time/WildC time/WildH time/WildUil \
	three_d_drawing/WildH \
	user_interface/WildC user_interface/WildH user_interface/WildUil \
	| gzip > unemap_tar.gz

$(OBJECT_PATH)/version.ObjSuffix.h : $(OBJS)
	if [ ! -d $(OBJECT_PATH) ]; then \
		mkdir -p $(OBJECT_PATH); \
	fi	
	echo '/* This is a generated file.  Do not edit.  Edit unemap.c or unemap.imake instead */' > $(OBJECT_PATH)/version.ObjSuffix.h;	  
	date > date.h
	sed 's/"//;s/./#define VERSION "unemap version 001.001.010  &/;s/.$$/&\\nCopyright 1996-2002, Auckland UniServices Ltd."/' < date.h >> $(OBJECT_PATH)/version.ObjSuffix.h

unemap.ObjSuffix : unemap.c $(OBJECT_PATH)/version.ObjSuffix.h
	@if [ -f $*.c ]; then \
		set -x; \
		cat $(OBJECT_PATH)/version.ObjSuffix.h $*.c > $(OBJECT_PATH)/$*.ObjSuffix.c ; \
	else \
		set -x; \
		cat $(OBJECT_PATH)/version.ObjSuffix.h $(PRODUCT_SOURCE_PATH)/$*.c > $(OBJECT_PATH)/$*.ObjSuffix.c ; \
	fi
	$(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(OBJECT_PATH)/$*.ObjSuffix.c;

Target : $(OBJS) unemap.ObjSuffix
	if [ ! -d $(BIN_PATH) ]; then \
		mkdir -p $(BIN_PATH); \
	fi
#if defined (IRIX) /* switch OperatingSystem */
	cd $(OBJECT_PATH) ; (ls $(OBJS) unemap.ObjSuffix 2>&1 | sed "s%Cannot access %product_object/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	cd $(OBJECT_PATH) ; (ls $(OBJS) unemap.ObjSuffix 2>&1 | sed "s%ls: %product_object/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	cd $(OBJECT_PATH) ; \
	rm -f product_object ; \
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \
	$(LINK) -o $(BIN_PATH)/Target $(ALL_FLAGS) `cat object.list` $(ALL_LIB)

#if defined (MEMORY_CHECK)
/* Specify rule for making a memory checking object with the normal c file.
	This allows us to make a memory checking version without creating a new
	extension */
general/debug_memory_check.ObjSuffix: general/debug.c general/debug.h
	if [ ! -d $(OBJECT_PATH)/general ]; then \
		mkdir -p $(OBJECT_PATH)/general; \
	fi
	if [ -f general/debug.c ]; then \
		$(CC) -o $(OBJECT_PATH)/general/debug_memory_check.ObjSuffix $(ALL_FLAGS) -DMEMORY_CHECKING general/debug.c; \
	else \
		$(CC) -o $(OBJECT_PATH)/general/debug_memory_check.ObjSuffix $(ALL_FLAGS) -DMEMORY_CHECKING $(PRODUCT_PATH)/general/debug.c; \
	fi
#endif /* defined (MEMORY_CHECK) */

utilities : AffineTarget AnalysisCalculateLibTarget Bmsi2sigTarget \
Biosense2sigTarget Biosense2vrmlTarget CalculateEventsTarget \
ChangeCalibrationTarget ChangeChannelsTarget ChangeConfigurationTarget \
ChangeEventsTarget ChangeFrequencyTarget CombineSignalsTarget \
DifferenceSignalsTarget ExtractSignalTarget FixEcgTarget Img2sigTarget \
MakePlaqueTarget OpticalSignalsTarget Plt2cnfgTarget Posdat2sigTarget \
RatioSignalsTarget RegisterTarget Sig2textTarget TestDelaunayTarget \
TestUnemapHardwareTarget Text2sigTarget Tuff2sigTarget UniqueChannelsTarget

AFFINE_SRCS = \
	unemap/utilities/affine.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(AffineTarget,$(UTILITIES_PATH),AFFINE_SRCS,AFFINE_OBJSA,AFFINE_OBJSB,AFFINE_OBJS,-lm) 

ANALYSIS_CALCULATE_LIB_SRCS = \
	unemap/analysis_calculate.c

BuildLibraryTarget(AnalysisCalculateLibTarget,$(UTILITIES_PATH),ANALYSIS_CALCULATE_LIB_SRCS,ANALYSIS_CALCULATE_LIB_OBJSA,ANALYSIS_CALCULATE_LIB_OBJSB,ANALYSIS_CALCULATE_LIB_OBJS,) 

BMSI2SIG_SRCS = \
	unemap/utilities/bmsi2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(Bmsi2sigTarget,$(UTILITIES_PATH),BMSI2SIG_SRCS,BMSI2SIG_OBJSA,BMSI2SIG_OBJSB,BMSI2SIG_OBJS,-lm) 

BIOSENSE2SIG_SRCS = \
	unemap/utilities/biosense2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(Biosense2sigTarget,$(UTILITIES_PATH),BIOSENSE2SIG_SRCS,BIOSENSE2SIG_OBJSA,BIOSENSE2SIG_OBJSB,BIOSENSE2SIG_OBJS,-lm) 

BIOSENSE2VRML_SRCS = \
	unemap/utilities/biosense2vrml.c \
	general/debug.c \
	general/myio.c \
	general/mystring.c \
	user_interface/message.c

BuildNormalTarget(Biosense2vrmlTarget,$(UTILITIES_PATH),BIOSENSE2VRML_SRCS,BIOSENSE2VRML_OBJSA,BIOSENSE2VRML_OBJSB,BIOSENSE2VRML_OBJS,-lm) 

CALCULATE_EVENTS_SRCS = \
	unemap/utilities/calculate_events.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/analysis.c \
	unemap/analysis_calculate.c \
	unemap/interpolate.c \
	unemap/rig.c \
	unemap/rig_node.c \
	user_interface/message.c

BuildNormalTarget(CalculateEventsTarget,$(UTILITIES_PATH),CALCULATE_EVENTS_SRCS,CALCULATE_EVENTS_OBJSA,CALCULATE_EVENTS_OBJSB,CALCULATE_EVENTS_OBJS,$(LIB)) 

CHANGE_CALIBRATION_SRCS = \
	unemap/utilities/change_calibration.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(ChangeCalibrationTarget,$(UTILITIES_PATH),CHANGE_CALIBRATION_SRCS,CHANGE_CALIBRATION_OBJSA,CHANGE_CALIBRATION_OBJSB,CHANGE_CALIBRATION_OBJS,-lm) 

CHANGE_CHANNELS_SRCS = \
	unemap/utilities/change_channels.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(ChangeChannelsTarget,$(UTILITIES_PATH),CHANGE_CHANNELS_SRCS,CHANGE_CHANNELS_OBJSA,CHANGE_CHANNELS_OBJSB,CHANGE_CHANNELS_OBJS,-lm) 

CHANGE_CONFIGURATION_SRCS = \
	unemap/utilities/change_configuration.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(ChangeConfigurationTarget,$(UTILITIES_PATH),CHANGE_CONFIGURATION_SRCS,CHANGE_CONFIGURATION_OBJSA,CHANGE_CONFIGURATION_OBJSB,CHANGE_CONFIGURATION_OBJS,-lm) 

CHANGE_EVENTS_SRCS = \
	unemap/utilities/change_events.c

BuildNormalTarget(ChangeEventsTarget,$(UTILITIES_PATH),CHANGE_EVENTS_SRCS,CHANGE_EVENTS_OBJSA,CHANGE_EVENTS_OBJSB,CHANGE_EVENTS_OBJS,-lm) 

CHANGE_FREQUENCY_SRCS = \
	unemap/utilities/change_frequency.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(ChangeFrequencyTarget,$(UTILITIES_PATH),CHANGE_FREQUENCY_SRCS,CHANGE_FREQUENCY_OBJSA,CHANGE_FREQUENCY_OBJSB,CHANGE_FREQUENCY_OBJS,-lm) 

COMBINE_SIGNALS_SRCS = \
	unemap/utilities/combine_signals.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(CombineSignalsTarget,$(UTILITIES_PATH),COMBINE_SIGNALS_SRCS,COMBINE_SIGNALS_OBJSA,COMBINE_SIGNALS_OBJSB,COMBINE_SIGNALS_OBJS,-lm) 

DIFFERENCE_SIGNALS_SRCS = \
	unemap/utilities/difference_signals.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(DifferenceSignalsTarget,$(UTILITIES_PATH),DIFFERENCE_SIGNALS_SRCS,DIFFERENCE_SIGNALS_OBJSA,DIFFERENCE_SIGNALS_OBJSB,DIFFERENCE_SIGNALS_OBJS,-lm) 

EXTRACT_SIGNAL_SRCS = \
	unemap/utilities/extract_signal.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(ExtractSignalTarget,$(UTILITIES_PATH),EXTRACT_SIGNAL_SRCS,EXTRACT_SIGNAL_OBJSA,EXTRACT_SIGNAL_OBJSB,EXTRACT_SIGNAL_OBJS,-lm) 

FIX_ECG_SRCS = \
	unemap/utilities/fix_ecg.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(FixEcgTarget,$(UTILITIES_PATH),FIX_ECG_SRCS,FIX_ECG_OBJSA,FIX_ECG_OBJSB,FIX_ECG_OBJS,-lm) 

IMG2SIG_SRCS = \
	unemap/utilities/img2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(Img2sigTarget,$(UTILITIES_PATH),IMG2SIG_SRCS,IMG2SIG_OBJSA,IMG2SIG_OBJSB,IMG2SIG_OBJS,-lm) 

MAKE_PLAQUE_SRCS = \
	unemap/utilities/make_plaque.c

BuildNormalTarget(MakePlaqueTarget,$(UTILITIES_PATH),MAKE_PLAQUE_SRCS,MAKE_PLAQUE_OBJSA,MAKE_PLAQUE_OBJSB,MAKE_PLAQUE_OBJS,-lm) 

OPTICAL_SIGNALS_SRCS = \
	unemap/utilities/optical_signals.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/rig.c \
	unemap/rig_node.c \
	unemap/spectral_methods.c \
	user_interface/message.c

BuildNormalTarget(OpticalSignalsTarget,$(UTILITIES_PATH),OPTICAL_SIGNALS_SRCS,OPTICAL_SIGNALS_OBJSA,OPTICAL_SIGNALS_OBJSB,OPTICAL_SIGNALS_OBJS,-lm) 

PLT2CNFG_SRCS = \
	unemap/utilities/plt2cnfg.c

BuildNormalTarget(Plt2cnfgTarget,$(UTILITIES_PATH),PLT2CNFG_SRCS,PLT2CNFG_OBJSA,PLT2CNFG_OBJSB,PLT2CNFG_OBJS,-lm) 

POSDAT2SIG_SRCS = \
	unemap/utilities/posdat2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(Posdat2sigTarget,$(UTILITIES_PATH),POSDAT2SIG_SRCS,POSDAT2SIG_OBJSA,POSDAT2SIG_OBJSB,POSDAT2SIG_OBJS,-lm) 

RATIO_SIGNALS_SRCS = \
	unemap/utilities/ratio_signals.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/analysis.c \
	unemap/analysis_calculate.c \
	unemap/rig.c \
	unemap/rig_node.c \
	user_interface/message.c

BuildNormalTarget(RatioSignalsTarget,$(UTILITIES_PATH),RATIO_SIGNALS_SRCS,RATIO_SIGNALS_OBJSA,RATIO_SIGNALS_OBJSB,RATIO_SIGNALS_OBJS,$(LIB)) 

REGISTER_SRCS = \
	unemap/utilities/register.c \
	command/parser.c \
	general/compare.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/unemap_hardware_client.c \
	unemap/rig.c \
	user_interface/event_dispatcher.c \
	user_interface/message.c

BuildNormalTarget(RegisterTarget,$(UTILITIES_PATH),REGISTER_SRCS,REGISTER_OBJSA,REGISTER_OBJSB,REGISTER_OBJS,$(LIB)) 

SIG2TEXT_SRCS = \
	unemap/utilities/sig2text.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/rig.c \
	unemap/rig_node.c \
	user_interface/message.c

BuildNormalTarget(Sig2textTarget,$(UTILITIES_PATH),SIG2TEXT_SRCS,SIG2TEXT_OBJSA,SIG2TEXT_OBJSB,SIG2TEXT_OBJS,$(LIB)) 

TEST_DELAUNAY_SRCS = \
	unemap/utilities/test_delaunay.c \
	general/debug.c \
	general/mystring.c \
	unemap/delaunay.c \
	user_interface/message.c

BuildNormalTarget(TestDelaunayTarget,$(UTILITIES_PATH),TEST_DELAUNAY_SRCS,TEST_DELAUNAY_OBJSA,TEST_DELAUNAY_OBJSB,TEST_DELAUNAY_OBJS,$(LIB)) 

TEST_UNEMAP_HARDWARE_SRCS = \
	unemap/utilities/test_unemap_hardware.c \
	general/compare.c \
	general/debug.c \
	general/mystring.c \
	unemap/unemap_hardware_client.c \
	user_interface/event_dispatcher.c \
	user_interface/message.c

BuildNormalTarget(TestUnemapHardwareTarget,$(UTILITIES_PATH),TEST_UNEMAP_HARDWARE_SRCS,TEST_UNEMAP_HARDWARE_OBJSA,TEST_UNEMAP_HARDWARE_OBJSB,TEST_UNEMAP_HARDWARE_OBJS,$(LIB)) 

TEXT2SIG_SRCS = \
	unemap/utilities/text2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/rig.c \
	unemap/rig_node.c \
	user_interface/message.c

BuildNormalTarget(Text2sigTarget,$(UTILITIES_PATH),TEXT2SIG_SRCS,TEXT2SIG_OBJSA,TEXT2SIG_OBJSB,TEXT2SIG_OBJS,$(LIB)) 

TUFF2SIG_SRCS = \
	unemap/utilities/tuff2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(Tuff2sigTarget,$(UTILITIES_PATH),TUFF2SIG_SRCS,TUFF2SIG_OBJSA,TUFF2SIG_OBJSB,TUFF2SIG_OBJS,-lm) 

UNIQUE_CHANNELS_SRCS = \
	unemap/utilities/unique_channels.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BuildNormalTarget(UniqueChannelsTarget,$(UTILITIES_PATH),UNIQUE_CHANNELS_SRCS,UNIQUE_CHANNELS_OBJSA,UNIQUE_CHANNELS_OBJSB,UNIQUE_CHANNELS_OBJS,-lm) 

UTILITIES_SRCS = \
	$(UNIQUE_CHANNELS_SRCS) \
	$(TUFF2SIG_SRCS) \
	$(TEXT2SIG_SRCS) \
	$(TEST_UNEMAP_HARDWARE_SRCS) \
	$(TEST_DELAUNAY_SRCS) \
	$(SIG2TEXT_SRCS) \
	$(REGISTER_SRCS) \
	$(RATIO_SIGNALS_SRCS) \
	$(PLT2CNFG_SRCS) \
	$(OPTICAL_SIGNALS_SRCS) \
	$(MAKE_PLAQUE_SRCS) \
	$(IMG2SIG_SRCS) \
	$(FIX_ECG_SRCS) \
	$(EXTRACT_SIGNAL_SRCS) \
	$(DIFFERENCE_SIGNALS_SRCS) \
	$(COMBINE_SIGNALS_SRCS) \
	$(CHANGE_FREQUENCY_SRCS) \
	$(CHANGE_EVENTS_SRCS) \
	$(CHANGE_CONFIGURATION_SRCS) \
	$(CHANGE_CHANNELS_SRCS) \
	$(CHANGE_CALIBRATION_SRCS) \
	$(CALCULATE_EVENTS_SRCS) \
	$(BIOSENSE2VRML_SRCS) \
	$(BIOSENSE2SIG_SRCS) \
	$(BMSI2SIG_SRCS) \
	$(AFFINE_SRCS)

depend :
	echo -n > DependMake
	(makedepend -f DependMake -Y -o.ObjSuffix -- $(ALL_FLAGS) -- unemap.c 2> DependMake.tmp)
	(makedepend -f DependMake -a -Y -o.ObjSuffix -- $(ALL_FLAGS) -- $(SRCS) 2>> DependMake.tmp)	
	(makedepend -f DependMake -a -Y -o.ObjSuffix -- $(ALL_FLAGS) -- $(UTILITIES_SRCS) 2>> DependMake.tmp)
	/* The uidh get their full path in the dependencies which stops the VPATH
	.uil.uidh rule from picking up dependencies so I remove this PATH */
	sed "s%$(UIDH_PATH)/%%g" DependMake > DependMake.tmp2
	mv DependMake.tmp2 DependMake
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(SRCS) 2>&1 | sed "s%Cannot access %%;s%: No such file or directory%%;s%.*%&: &%;s%\.[^.]*:%.o:%" >> DependMake)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(SRCS) 2>&1 | sed "s%ls: %%;s%: No such file or directory%%;s%.*%&: &%;s%\.[^.]*:%.o:%" >> DependMake)
#endif /* switch OperatingSystem */
	/* Try and make a rule for the uidhs if they don't exist already,
	It is bad, based on the format of the error output from makedepend and it only
	gets the first inclusion.  If it fails then you can get the correct makedepend 
	by ensuring all the uidh files already exist before you makedepend */
	( grep uidh DependMake.tmp | grep makedepend | awk -v Obj=ObjSuffix -F "[ ,]" '{printf("%s.%s:",substr($$4, 1, length($$4) - 2),Obj); for(i = 1 ; i <= NF ; i++)  { if (match($$i,"uidh")) printf(" %s", substr($$i, 2, length($$i) -2)) } printf("\n");}' >> DependMake)
	rm DependMake.tmp

/* sinclude used so that the makefile can be run when the dependency file doesn't exist,
 it should then make one */
sinclude $(PRODUCT_SOURCE_PATH)/DependMake
sinclude DependMake
