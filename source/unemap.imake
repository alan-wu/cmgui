XCOMM **************************************************************************
XCOMM  FILE : unemap.imake
XCOMM
XCOMM  LAST MODIFIED : 19 October 1999
XCOMM
XCOMM  DESCRIPTION :
XCOMM  Makefile for unemap
XCOMM ???DB.  Based on cmgui.imake
XCOMM ???DB.  Isn't quite right - compare with unemap.imake.save
XCOMM ==========================================================================
/* The UnemapMake filename should match the filename into which this is being
	written.  This is done in the dependency rules in unemap.make i.e.
	for sgi
		image -T unemap.imake -f dummy.imake -s unemap.make
	for linux
		image -DLINUX -T unemap.imake -f dummy.imake -s unemap_linux.make */

#if defined (IRIX) /* switch OperatingSystem */
/* 1 IRIX */
#if defined (O64)
/* 1.1 IRIX-O64 */
/* the O64 version can be either OPTIMISED or not but only one version is kept
	at the moment */
#define UidPath uid64
#define UnemapTarget unemap64
#define Bmsi2sigTarget unemap/utilities/bmsi2sig64
#define ChangeCalibrationTarget unemap/utilities/change_calibration64
#define ChangeChannelsTarget unemap/utilities/change_channels64
#define ChangeConfigurationTarget unemap/utilities/change_configuration64
#define ChangeEventsTarget unemap/utilities/change_events64
#define ChangeFrequencyTarget unemap/utilities/change_frequency64
#define CombineSignalsTarget unemap/utilities/combine_signals64
#define DifferenceSignalsTarget unemap/utilities/difference_signals64
#define ExtractSignalTarget unemap/utilities/extract_signal64
#define Img2sigTarget unemap/utilities/img2sig64
#define Plt2cnfgTarget unemap/utilities/plt2cnfg64
#define Posdat2sigTarget unemap/utilities/posdat2sig64
#define RegisterTarget unemap/utilities/register64
#define TestUnemapHardwareTarget unemap/utilities/test_unemap_hardware64
#define UnemapMake unemap_sgi64.make
#define DependMake unemap_sgi64.depend
#define ObjSuffix o64non
#else /* defined (O64) */
/* 1.2 IRIX-N32 */
#define UidPath uid
#if defined (OPTIMISED)
/* 1.2.1 IRIX-N32-OPTIMISED */
#define UnemapTarget unemap_optimised
#define UnemapMake unemap_sgioptimised.make
#define Bmsi2sigTarget unemap/utilities/bmsi2sig_optimised
#define ChangeCalibrationTarget unemap/utilities/change_calibration_optimised
#define ChangeChannelsTarget unemap/utilities/change_channels_optimised
#define ChangeConfigurationTarget unemap/utilities/change_configuration_optimised
#define ChangeEventsTarget unemap/utilities/change_events_optimised
#define ChangeFrequencyTarget unemap/utilities/change_frequency_optimised
#define CombineSignalsTarget unemap/utilities/combine_signals_optimised
#define DifferenceSignalsTarget unemap/utilities/difference_signals_optimised
#define ExtractSignalTarget unemap/utilities/extract_signal_optimised
#define Img2sigTarget unemap/utilities/img2sig_optimised
#define Plt2cnfgTarget unemap/utilities/plt2cnfg_optimised
#define Posdat2sigTarget unemap/utilities/posdat2sig_optimised
#define RegisterTarget unemap/utilities/register_optimised
#define TestUnemapHardwareTarget unemap/utilities/test_unemap_hardware_optimised
#define DependMake unemap_sgioptimised.depend
#define ObjSuffix ooptnon
#else /* defined (OPTIMISED) */
/* 1.2.2 IRIX-N32-!OPTIMISED */
#if defined (USE_UNEMAP_NODES)
/* 1.2.2.1 IRIX-N32-!OPTIMISED-USE_UNEMAP_NODES */
/* currently only version with nodes */
#define UnemapTarget unemap_nodes
#define Bmsi2sigTarget unemap/utilities/bmsi2sig_nodes
#define ChangeCalibrationTarget unemap/utilities/change_calibration_nodes
#define ChangeChannelsTarget unemap/utilities/change_channels_nodes
#define ChangeConfigurationTarget unemap/utilities/change_configuration_nodes
#define ChangeEventsTarget unemap/utilities/change_events_nodes
#define ChangeFrequencyTarget unemap/utilities/change_frequency_nodes
#define CombineSignalsTarget unemap/utilities/combine_signals_nodes
#define DifferenceSignalsTarget unemap/utilities/difference_signals_nodes
#define ExtractSignalTarget unemap/utilities/extract_signal_nodes
#define Img2sigTarget unemap/utilities/img2sig_nodes
#define Plt2cnfgTarget unemap/utilities/plt2cnfg_nodes
#define Posdat2sigTarget unemap/utilities/posdat2sig_nodes
#define RegisterTarget unemap/utilities/register_nodes
#define TestUnemapHardwareTarget unemap/utilities/test_unemap_hardware_nodes
#define UnemapMake unemap_sginodes.make
#define DependMake unemap_sginodes.depend
/* must be same as default cmgui make, (with nodes) */
#define ObjSuffix o
#else /* defined (USE_UNEMAP_NODES) */
/* 1.2.2.2 IRIX-N32-!OPTIMISED-!USE_UNEMAP_NODES */
#define UnemapTarget unemap32
#define Bmsi2sigTarget unemap/utilities/bmsi2sig32
#define ChangeCalibrationTarget unemap/utilities/change_calibration32
#define ChangeChannelsTarget unemap/utilities/change_channels32
#define ChangeConfigurationTarget unemap/utilities/change_configuration32
#define ChangeEventsTarget unemap/utilities/change_events32
#define ChangeFrequencyTarget unemap/utilities/change_frequency32
#define CombineSignalsTarget unemap/utilities/combine_signals32
#define DifferenceSignalsTarget unemap/utilities/difference_signals32
#define ExtractSignalTarget unemap/utilities/extract_signal32
#define Img2sigTarget unemap/utilities/img2sig32
#define Plt2cnfgTarget unemap/utilities/plt2cnfg32
#define Posdat2sigTarget unemap/utilities/posdat2sig32
#define RegisterTarget unemap/utilities/register32
#define TestUnemapHardwareTarget unemap/utilities/test_unemap_hardware32
#define UnemapMake unemap_sgi.make
#define DependMake unemap_sgi.depend
#define ObjSuffix onon
#endif /* defined (USE_UNEMAP_NODES) */
#endif /* defined (OPTIMISED) */
#endif /* defined (O64) */
#elif defined (LINUX) /* switch OperatingSystem */
/* 2 LINUX */
#define UidPath uid_linux
#define UnemapTarget unemap_linux
#define Bmsi2sigTarget unemap/utilities/bmsi2sig_linux
#define ChangeCalibrationTarget unemap/utilities/change_calibration_linux
#define ChangeChannelsTarget unemap/utilities/change_channels_linux
#define ChangeConfigurationTarget unemap/utilities/change_configuration_linux
#define ChangeEventsTarget unemap/utilities/change_events_linux
#define ChangeFrequencyTarget unemap/utilities/change_frequency_linux
#define CombineSignalsTarget unemap/utilities/combine_signals_linux
#define DifferenceSignalsTarget unemap/utilities/difference_signals_linux
#define ExtractSignalTarget unemap/utilities/extract_signal_linux
#define Img2sigTarget unemap/utilities/img2sig_linux
#define Plt2cnfgTarget unemap/utilities/plt2cnfg_linux
#define Posdat2sigTarget unemap/utilities/posdat2sig_linux
#define RegisterTarget unemap/utilities/register_linux
#define TestUnemapHardwareTarget unemap/utilities/test_unemap_hardware_linux
#define UnemapMake unemap_linux.make
#define DependMake unemap_linux.depend
#define ObjSuffix olinuxnon
#endif /* switch OperatingSystem */

#if defined (USE_UNEMAP_NODES)
#if defined (IRIX) /* switch OperatingSystem */
#if defined (O64)
XCOMM for OpenGL without SGI movie (64bit doesnt have libraries as of Jan99)
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API
GRAPHICS_LIB = -lGL -lGLU
#else /* defined (O64) */
XCOMM  for OpenGL with SGI movie
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API -DSGI_MOVIE_FILE -DSGI_DIGITAL_MEDIA
GRAPHICS_LIB = -delay_load -lmoviefile -delay_load -ldmedia -lGL -lGLU
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */
XCOMM for OpenGL without SGI movie
GRAPHICS_LIBRARY_SWITCH = -DOPENGL_API
GRAPHICS_LIB = -lGL -lGLU
#endif /* switch OperatingSystem */
#endif /* (USE_UNEMAP_NODES) */

#if defined (USE_UNEMAP_NODES)
USE_NODES_SWITCH = -DUNEMAP_USE_NODES
#else
USE_NODES_SWITCH =
#endif

#if defined (OLD_CODE)
SHELL=/bin/tcsh
#endif /* defined (OLD_CODE) */
SHELL=/bin/sh

#if defined (OLD_CODE)
PRODUCT_PATH=/usr/people/bullivan/cmgui/uni_source
UTILITIES_PATH=/usr/people/bullivan/cmgui/cvs_unemap/utilities
PRODUCT_PATH=.
#endif /* defined (OLD_CODE) */
PRODUCT_PATH=$(CMISS_ROOT)/cmgui/source
UTILITIES_PATH=$(CMISS_ROOT)/cmgui/source/utilities

#if defined (IRIX) /* switch OperatingSystem */
VPATH=$(PRODUCT_PATH)
#elif defined (LINUX) /* switch OperatingSystem */
XCOMM LINUX treats VPATH slightly differently and does not notice
XCOMM	that a local *.c file has changed if a valid *.olinux file
XCOMM	is found in the PRODUCT_PATH directories so use vpath and
XCOMM the VPATH is not searched for *.olinux.  This has the penalty
XCOMM of requiring all the objects to be built locally.
vpath %.c $(PRODUCT_PATH)
vpath %.f $(PRODUCT_PATH)
vpath %.h $(PRODUCT_PATH)
vpath %.cpp $(PRODUCT_PATH)
vpath %.uil $(PRODUCT_PATH)
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
CC = cc -n32 -c -o
CPP = CC -n32 -c -o
FORTRAN = f77 -n32 -c -o
LINK = cc -n32 -o
LINK = cc -n32 -multigot -o
CC = cc -n32 -c -g -o
CPP = CC -n32 -c -g -o
FORTRAN = f77 -n32 -c -g -o
LINK = ld -n32 -g -multigot -o
LINK = cc -n32 -g -multigot -o
LINK = f77 -n32 -g -multigot -o
CC = cc -c -o
CPP = CC -c -o
FORTRAN = f77 -c -o
LINK = cc -o
#endif

#if defined (IRIX) /* switch OperatingSystem */

UIDTOUID64 = $(UTILITIES_PATH)/uid2uid64
UIL = uil
UIL64 = uil64
#if defined (OPTIMISED)
CC_START = cc -c -O
CPP_START = CC -c -O
FORTRAN_START = f77 -c -O
LINK_START = cc -O
#else /* defined (OPTIMISED) */
CC_START = cc -c -g -fullwarn -DUSE_PARAMETER_ON -mips3
CPP_START = CC -c -g -fullwarn -DUSE_PARAMETER_ON -mips3
FORTRAN_START = f77 -c -g -fullwarn -mips3
LINK_START = cc -g -fullwarn -mips3
#endif /* defined (OPTIMISED) */

#if defined (O64)
CC = ${CC_START} -G0 -64 -DO64 -o
CPP = ${CPP_START} -G0 -64 -DO64 -o
FORTRAN = ${FORTRAN_START} -G0 -64 -DO64 -o
LINK = ${LINK_START} -G0 -64 -DO64 -o
#else /* defined (O64) */
CC = ${CC_START} -n32 -o
CPP = ${CPP_START} -n32 -o
FORTRAN = ${FORTRAN_START} -n32 -o
LINK = ${LINK_START} -n32 -o
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */

UIDTOUID64 = $(UTILITIES_PATH)/uid2uid64_linux
UIL = uil
UIL64 = uil64  /* There is a test in the rule to see if this is available */
CC = egcs -c -g -o
CPP = egcs -c -o
FORTRAN = g77 -c -o
LINK = egcs -static -L/usr/X11R6/lib -g -o

#endif /* switch OperatingSystem */

BASE_DIRECTORY_INC = -I$(CMGUI_BASE_DIRECTORY) -I$(PRODUCT_PATH)

#if defined (IRIX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DSGI -Dmips
#elif defined(LINUX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DGENERIC_PC
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
PLATFORM_SWITCH = -DIBM
PLATFORM_SWITCH = -DSGI
PLATFORM_SWITCH = -DVAX
PLATFORM_SWITCH = -DALPHA
#endif /* (OLD_CODE) */

OPERATING_SYSTEM = -DUNIX
#if defined (OLD_CODE)
OPERATING_SYSTEM = -DWIN32
???DB.  Win32 is an API not an operating system
OPERATING_SYSTEM = -DVMS
#endif /* (OLD_CODE) */

WINDOWING_SYSTEM = -DMOTIF
#if defined (OLD_CODE)
WINDOWING_SYSTEM = -DWINDOWS
#endif /* (OLD_CODE) */

#if defined (IRIX) && defined (USE_UNEMAP_NODES)
EXTERNAL_INPUT_DEFINES = -DDIALS -DSPACEBALL -DPOLHEMUS -DFARO -DEXT_INPUT
EXTERNAL_INPUT_LIB = -lXext -lXi
#else /* defined (IRIX) && defined (USE_UNEMAP_NODES) */
EXTERNAL_INPUT_DEFINES =
EXTERNAL_INPUT_LIB =
#endif /* defined (IRIX) && defined (USE_UNEMAP_NODES) */

POSTSCRIPT_DEFINES =

XCOMM By default some names are "mangled" to get external names <= 32 characters
#if defined (OLD_CODE)
NAME_DEFINES =
#endif /* (OLD_CODE) */
NAME_DEFINES = -DFULL_NAMES

XCOMM Temporary flags that are used during development
TEMPORARY_DEVELOPMENT_FLAGS =
#if defined (OLD_CODE)
TEMPORARY_DEVELOPMENT_FLAGS = -DTEST_TRUE_COLOUR_VISUAL
TEMPORARY_DEVELOPMENT_FLAGS = -DWINDOWS_DEV_FLAG
#endif /* (OLD_CODE) */

#if defined (OLD_CODE)
CFLAGS = /float=ieee /standard=ansi89
CFLAGS =
CFLAGS = -ansi -pedantic -fullwarn -woff 841 -wlint,-faivu
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
CFLAGS = -ansi -pedantic -woff 1521,1048
#elif defined(LINUX) /* switch OperatingSystem */
CFLAGS = -ansi -pedantic
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
LIB = -lMrm -lXm -lXt -lX11 -lPW -lm -lmalloc_cv
???DB.  For linux, to make sure that staticly linked
LIB = /usr/X11R6/lib/libMrm.a /usr/X11R6/lib/libXm.a /usr/X11R6/lib/libXpm.a -lXt -lXext -lX11 -lSM -lICE -lm
LIB = -lMrm -lXm -lXt -lX11 -lPW -lm
LIB = -lMrm -lXm -lXt -lX11 -lXpm -lm
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
LIB = -lMrm -lXm -lXt -lX11 -lPW -lftn -lm
#elif defined(LINUX) /* switch OperatingSystem */
LIB = -lMrm -lXm -lXt -lX11 -lXpm -lXext -lm -ldl -lXp -lSM -lICE
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
XCOMM ???DB.  Until can remove CMISS link from user_interface
WORMHOLE_INC = -I/product/cmiss/wormhole/source
WORMHOLE_INC = -I/usr/people/bullivan/wormhole/source
WORMHOLE_INC = -I/home/bullivan/wormhole/source
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
WORMHOLE_LIB = -L${CMISS_ROOT}/wormhole/lib -lwormhole_n32
WORMHOLE_INC = -I${CMISS_ROOT}/wormhole/source
#elif defined(LINUX) /* switch OperatingSystem */
WORMHOLE_LIB = -L/home/bullivan/wormhole/lib -lwormhole
WORMHOLE_INC = -I/home/bullivan/wormhole/source
#endif /* switch OperatingSystem */

START_ALL_DEFINES =
END_ALL_DEFINES =

START_ALL_INCLUDES =
END_ALL_INCLUDES =

#if defined (USE_UNEMAP_NODES)
ALL_DEFINES = $(START_ALL_DEFINES) \
	$(PLATFORM_SWITCH) $(OPERATING_SYSTEM) $(WINDOWING_SYSTEM) $(USE_NODES_SWITCH) \
	$(EXTERNAL_INPUT_DEFINES) $(NAME_DEFINES) $(TEMPORARY_DEVELOPMENT_FLAGS) \
	$(GRAPHICS_LIBRARY_SWITCH) \
	-DNOT_ACQUISITION_ONLY \
	-DSPECTRAL_TOOLS \
	$(END_ALL_DEFINES)
#else
ALL_DEFINES = $(START_ALL_DEFINES) \
	$(PLATFORM_SWITCH) $(OPERATING_SYSTEM) $(WINDOWING_SYSTEM) $(USE_NODES_SWITCH) \
	$(EXTERNAL_INPUT_DEFINES) $(NAME_DEFINES) $(TEMPORARY_DEVELOPMENT_FLAGS) \
	-DNOT_ACQUISITION_ONLY \
	-DSPECTRAL_TOOLS \
	$(END_ALL_DEFINES)
#endif /* (USE_UNEMAP_NODES) */

ALL_INCLUDES = $(START_ALL_INCLUDES) \
	$(BASE_DIRECTORY_INC) \
	$(WORMHOLE_INC) \
	$(END_ALL_INCLUDES)

ALL_FLAGS = $(CFLAGS) $(ALL_DEFINES) $(ALL_INCLUDES)

#if defined (USE_UNEMAP_NODES)
ALL_LIB = $(LIB) $(EXTERNAL_INPUT_LIB) $(GRAPHICS_LIB)
#else
ALL_LIB = $(LIB) $(EXTERNAL_INPUT_LIB)
#endif

#if defined (OLD_CODE)
ALL_LIB = alpha.opt/opt
#endif /* defined (OLD_CODE) */

.MAKEOPTS : -r

.SUFFIXES :
.SUFFIXES : .ObjSuffix .c .cpp .f .uil .uid64

.c.ObjSuffix:
	if [ -d $(*D) ]; \
	then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.c ]; \
	then \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $*.c; \
	else \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/$*.c; \
	fi

.cpp.ObjSuffix:
	if [ -d $(*D) ]; \
	then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.cpp ]; \
	then \
		$(CPP) $*.ObjSuffix $(ALL_FLAGS) $*.cpp; \
	else \
		$(CPP) $*.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/$*.cpp; \
	fi

.f.ObjSuffix:
	if [ -d $(*D) ]; \
	then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.f ]; \
	then \
		$(FORTRAN) $*.ObjSuffix $(BASE_DIRECTORY_INC) $*.f; \
	else \
		$(FORTRAN) $*.ObjSuffix $(BASE_DIRECTORY_INC) $(PRODUCT_PATH)/$*.f; \
	fi
#if defined (OLD_CODE) /* Used to put object in correct directory with g77 */
#if defined (LINUX)
	mv `echo $*.o | cut -f2 -d/` $*.ObjSuffix
#endif /* defined (LINUX) */
#endif /* defined (OLD_CODE) */

.uil.uid64:
	if [ -d $(*D) ]; then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.uil ]; then \
	   $(UIL) -o $*.uid $*.uil; \
	   if which $(UIL64) > /dev/null ; then \
	   	$(UIL64) -o $*_64bit.uid $*.uil; \
	   	$(UIDTOUID64) $*.uid -64bit $*_64bit.uid $*.uid64; \
		rm $*.uid $*_64bit.uid; \
	   else \
	   	$(UIDTOUID64) $*.uid $*.uid64; \
		rm $*.uid; \
	   fi ; \
	else \
	   $(UIL) -o $*.uid $(PRODUCT_PATH)/$*.uil; \
	   if which $(UIL64) > /dev/null ; then \
	   	$(UIL64) -o $*_64bit.uid $(PRODUCT_PATH)/$*.uil; \
	   	$(UIDTOUID64) $*.uid -64bit $*_64bit.uid $*.uid64; \
		rm $*.uid $*_64bit.uid; \
	   else \
	   	$(UIDTOUID64) $*.uid $*.uid64; \
		rm $*.uid; \
	   fi ; \
	fi

COMMAND_SRCS = \
	command/parser.c
#if defined (USE_UNEMAP_NODES)
FINITE_ELEMENT_SRCS = \
	finite_element/finite_element_to_graphics_object.c \
	finite_element/finite_element_to_streamlines.c \
	finite_element/finite_element.c \
	finite_element/computed_field.c
#else /* defined (USE_UNEMAP_NODES) */
FINITE_ELEMENT_SRCS =
#endif /* defined (USE_UNEMAP_NODES) */
#if defined (USE_UNEMAP_NODES)
GENERAL_SRCS = \
	general/callback.c \
	general/compare.c \
	general/debug.c \
	general/error_handler.c \
	general/geometry.c \
	general/heapsort.c \
	general/image_utilities.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	general/child_process.c \
	general/value.c \
	general/postscript.c
#else
GENERAL_SRCS = \
	general/callback.c \
	general/compare.c \
	general/debug.c \
	general/error_handler.c \
	general/geometry.c \
	general/heapsort.c \
	general/image_utilities.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	general/postscript.c
#endif /* (USE_UNEMAP_NODES) */

#if defined (USE_UNEMAP_NODES)
COLOUR_SRCS = \
	colour/edit_var.c
#else
COLOUR_SRCS =
#endif /*(USE_UNEMAP_NODES) */
#if defined (USE_UNEMAP_NODES)
MIRAGE_SRCS = \
	mirage/photogrammetry.c
#else
MIRAGE_SRCS =
#endif /*(USE_UNEMAP_NODES) */
#if defined (USE_UNEMAP_NODES)
THREE_D_DRAWING_SRCS = \
	three_d_drawing/dm_interface.c \
	three_d_drawing/movie_extensions.c \
	three_d_drawing/ThreeDDraw.c
#else
THREE_D_DRAWING_SRCS =
#endif /*(USE_UNEMAP_NODES) */

#if defined (USE_UNEMAP_NODES)
GRAPHICS_SRCS = \
	graphics/complex.c \
	graphics/laguer.c \
	graphics/spectrum.c \
	graphics/environment_map.c \
	graphics/texture_line.c \
	graphics/mcubes.c \
	graphics/makegtobj.c \
	graphics/graphical_element.c \
	graphics/auxiliary_graphics_types.c \
	graphics/element_group_settings.c \
	graphics/volume_texture.c \
	graphics/rendergl.c \
	graphics/graphics_object.c \
	graphics/graphics_library.c \
	graphics/light.c \
	graphics/light_model.c \
	graphics/colour.c \
	graphics/graphics_window.c \
	graphics/scene_viewer.c \
	graphics/scene.c
#else
GRAPHICS_SRCS = \
	graphics/colour.c
#endif
#if defined (USE_UNEMAP_NODES)
POSITION_SRCS = \
	io_devices/input_module.c \
	io_devices/matrix.c
#else /* defined (USE_UNEMAP_NODES) */
POSITION_SRCS =
#endif /* defined (USE_UNEMAP_NODES) */
TIME_SRCS = \
	time/time.c \
	time/time_keeper.c \
	time/time_editor.c \
	time/time_editor_dialog.c
#if defined (USE_UNEMAP_NODES)
UNEMAP_SRCS = \
	unemap/acquisition.c \
	unemap/acquisition_window.c \
	unemap/acquisition_work_area.c \
	unemap/analysis.c \
	unemap/analysis_window.c \
	unemap/analysis_work_area.c \
	unemap/bard.c \
	unemap/beekeeper.c \
	unemap/cardiomapp.c \
	unemap/drawing_2d.c \
	unemap/interpolate.c \
	unemap/map_dialog.c \
	unemap/mapping.c \
	unemap/mapping_window.c \
	unemap/material.c \
	unemap/neurosoft.c \
	unemap/page_window.c \
	unemap/rig.c \
	unemap/rig_node.c \
	unemap/setup_dialog.c \
	unemap/spectral_methods.c \
	unemap/spectrum_settings.c \
	unemap/system_window.c \
	unemap/texture.c \
	unemap/trace_window.c \
	unemap/unemap_package.c \
	unemap/unemap_hardware_client.c \
	unemap/user_interface.c
#else
UNEMAP_SRCS = \
	unemap/acquisition.c \
	unemap/acquisition_window.c \
	unemap/acquisition_work_area.c \
	unemap/analysis.c \
	unemap/analysis_window.c \
	unemap/analysis_work_area.c \
	unemap/bard.c \
	unemap/beekeeper.c \
	unemap/cardiomapp.c \
	unemap/drawing_2d.c \
	unemap/interpolate.c \
	unemap/map_dialog.c \
	unemap/mapping.c \
	unemap/mapping_window.c \
	unemap/material.c \
	unemap/neurosoft.c \
	unemap/page_window.c \
	unemap/rig.c \
	unemap/rig_node.c \
	unemap/setup_dialog.c \
	unemap/spectrum.c \
	unemap/spectral_methods.c \
	unemap/spectrum_settings.c \
	unemap/system_window.c \
	unemap/texture.c \
	unemap/trace_window.c \
	unemap/unemap_package.c \
	unemap/unemap_hardware_client.c \
	unemap/user_interface.c
#endif
USER_INTERFACE_SRCS = \
	user_interface/confirmation.c \
	user_interface/filedir.c \
	user_interface/message.c \
	user_interface/printer.c

SRCS = \
	$(COLOUR_SRCS) \
	$(COMMAND_SRCS) \
	$(FINITE_ELEMENT_SRCS) \
	$(GENERAL_SRCS) \
	$(GRAPHICS_SRCS) \
	$(MIRAGE_SRCS) \
	$(POSITION_SRCS) \
	$(THREE_D_DRAWING_SRCS) \
	$(TIME_SRCS) \
	$(UNEMAP_SRCS) \
	$(USER_INTERFACE_SRCS)

OBJSA = $(SRCS:.c=.ObjSuffix)
OBJSB = $(OBJSA:.cpp=.ObjSuffix)
OBJS = $(OBJSB:.f=.ObjSuffix)

all : oscheck
	if [ -s $(PRODUCT_PATH)/DependMake ] ; then \
		make -f UnemapMake UnemapTarget ; \
	else \
		make -f UnemapMake depend ; \
		make -f UnemapMake UnemapTarget ; \
	fi

XCOMM Check that the makefile is being used on the correct system
#if defined (IRIX)
oscheck :
	@if ! sysinfo > /dev/null ; then \
	   echo "Incorrect Operating System for SGI Make" ;\
      exit ;\
   fi
#else /* defined (IRIX) */
#if defined (LINUX)
oscheck :
	/* Do something that only works under LINUX */
	@echo -n > /dev/null
#else /* defined (LINUX) */
oscheck :
	echo "No known operating system defined for imake"
#endif  /* defined (LINUX) */
#endif  /* defined (IRIX) */

#if defined (OLD_CODE)
update :
	if [ "$(PWD)" = "$(PRODUCT_PATH)" -a "$(USER)" = "cmiss" ]; \
	then \
		cvs update -d && \
		chgrp -R cmgui_programmers *; \
		make -f UnemapMake CMGUI_BASE_DIRECTORY=$(PRODUCT_PATH); \
		chgrp -R cmgui_programmers *; \
	else \
		echo "Must be cmiss and in $(PRODUCT_PATH)"; \
	fi
#endif /* defined (OLD_CODE) */

depend :
	echo -n > DependMake
	(makedepend -f DependMake -Y -o.ObjSuffix -- $(ALL_FLAGS) -- unemap.c 2> DependMake.tmp)
	(makedepend -f DependMake -a -Y -o.ObjSuffix -- $(ALL_FLAGS) -- $(SRCS) 2>> DependMake.tmp)
	/* Try and make a rule for the uid64s if they don't exist already, It is bad,
		based on the format of the error output from makedepend and it only gets the
		first inclusion.  If it fails then you can get the correct makedepend by
		ensuring all the uid64 files already exist before you makedepend */
	( grep uid64 DependMake.tmp | grep makedepend | awk -F "[ ,]" '{printf("%s:",$$4); for(i = 1 ; i <= NF ; i++)  { if (match($$i,"uid64")) printf(" %s", substr($$i, 2, length($$i) -2)) } printf("\n");}' >> DependMake)
	rm DependMake.tmp

	  /* Can't put / by * or it thinks there is a comment so I have put the * into
			the variable and used that instead */
#define WildObj *.ObjSuffix
#define WildUil *.uil
#define WildUid *.uid
#define WildC *.c
#define WildCpp *.cpp
#define WildCmn *.cmn
#define WildH *.h
#define WildF *.f
#define WildMms *.mms
#define WildXbm *.xbm
#define WildRc *.rc
#define WildPx *.px
clean :
	-rm $(OBJS)

clobber : clean
	-rm unemap

transfer :
	tar -cvf - \
	unemap.make unemap.c version.h \
	unemap/WildC unemapWildH unemap/WildUil \
	unemap/utilities/WildC unemap/utilitiesWildH unemap/utilities/WildUil \
	command/parser.c command/parser.h \
	general/WildC generalWildH general/WildUil \
	graphics/colour.c graphics/colour.h graphics/material.c graphics/material.h \
	graphics/spectrum.c graphics/spectrum.h graphics/spectrum_settings.c \
	graphics/spectrum_settings.h graphics/graphics_library.h graphics/texture.c \
	graphics/texture.h \
	io_devices/WildC io_devicesWildH io_devices/WildUil \
	user_interface/WildC user_interfaceWildH user_interface/WildUil \
	| gzip > unemap_tar.gz

$(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h : $(OBJS)
	date > date.h
	sed 's/"//;s/./#define VERSION "unemap version 001.001.010  &/;s/.$$/&\\nCopyright 1996-1999, Auckland UniServices Ltd."/' < date.h > unemap_version.ObjSuffix.h

unemap.ObjSuffix : unemap.c $(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h
	if [ -f $*.c ]; \
	then \
	   cat $(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h $*.c > $*.ObjSuffix.c ; \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $*.ObjSuffix.c; \
		rm $*.ObjSuffix.c ; \
	else \
	   cat $(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h $(PRODUCT_PATH)/$*.c > $*.ObjSuffix.c ; \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $*.ObjSuffix.c; \
		rm $*.ObjSuffix.c ; \
	fi

UnemapTarget : $(OBJS) unemap.ObjSuffix
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(OBJS) unemap.ObjSuffix 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(OBJS) unemap.ObjSuffix 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) UnemapTarget `cat object.list` $(ALL_LIB)

XCOMM ???DB.  unemap has different flags
unemap/material.ObjSuffix : graphics/material.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/material.c ]; \
	then \
		$(CC) unemap/material.ObjSuffix $(ALL_FLAGS) graphics/material.c; \
	else \
		$(CC) unemap/material.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/material.c; \
	fi

unemap/spectrum.ObjSuffix : graphics/spectrum.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/spectrum.c ]; \
	then \
		$(CC) unemap/spectrum.ObjSuffix $(ALL_FLAGS) graphics/spectrum.c; \
	else \
		$(CC) unemap/spectrum.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/spectrum.c; \
	fi

unemap/spectrum_settings.ObjSuffix : graphics/spectrum_settings.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/spectrum_settings.c ]; \
	then \
		$(CC) unemap/spectrum_settings.ObjSuffix $(ALL_FLAGS) graphics/spectrum_settings.c; \
	else \
		$(CC) unemap/spectrum_settings.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/spectrum_settings.c; \
	fi

unemap/texture.ObjSuffix : graphics/texture.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/texture.c ]; \
	then \
		$(CC) unemap/texture.ObjSuffix $(ALL_FLAGS) graphics/texture.c; \
	else \
		$(CC) unemap/texture.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/texture.c; \
	fi

unemap/user_interface.ObjSuffix : user_interface/user_interface.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f user_interface/user_interface.c ]; \
	then \
		$(CC) unemap/user_interface.ObjSuffix $(ALL_FLAGS) user_interface/user_interface.c; \
	else \
		$(CC) unemap/user_interface.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/user_interface/user_interface.c; \
	fi

utilities : Bmsi2sigTarget ChangeCalibrationTarget ChangeChannelsTarget \
ChangeConfigurationTarget ChangeEventsTarget ChangeFrequencyTarget \
CombineSignalsTarget DifferenceSignalsTarget ExtractSignalTarget \
Img2sigTarget Plt2cnfgTarget Posdat2sigTarget RegisterTarget \
TestUnemapHardwareTarget

BMSI2SIG_SRCS = \
	unemap/utilities/bmsi2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

BMSI2SIG_OBJSA = $(BMSI2SIG_SRCS:.c=.ObjSuffix)
BMSI2SIG_OBJSB = $(BMSI2SIG_OBJSA:.cpp=.ObjSuffix)
BMSI2SIG_OBJS = $(BMSI2SIG_OBJSB:.f=.ObjSuffix)

Bmsi2sigTarget: $(BMSI2SIG_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(BMSI2SIG_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(BMSI2SIG_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) Bmsi2sigTarget `cat object.list` -lm

CHANGE_CALIBRATION_SRCS = \
	unemap/utilities/change_calibration.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

CHANGE_CALIBRATION_OBJSA = $(CHANGE_CALIBRATION_SRCS:.c=.ObjSuffix)
CHANGE_CALIBRATION_OBJSB = $(CHANGE_CALIBRATION_OBJSA:.cpp=.ObjSuffix)
CHANGE_CALIBRATION_OBJS = $(CHANGE_CALIBRATION_OBJSB:.f=.ObjSuffix)

ChangeCalibrationTarget: $(CHANGE_CALIBRATION_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(CHANGE_CALIBRATION_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(CHANGE_CALIBRATION_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) ChangeCalibrationTarget `cat object.list` -lm

CHANGE_CHANNELS_SRCS = \
	unemap/utilities/change_channels.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

CHANGE_CHANNELS_OBJSA = $(CHANGE_CHANNELS_SRCS:.c=.ObjSuffix)
CHANGE_CHANNELS_OBJSB = $(CHANGE_CHANNELS_OBJSA:.cpp=.ObjSuffix)
CHANGE_CHANNELS_OBJS = $(CHANGE_CHANNELS_OBJSB:.f=.ObjSuffix)

ChangeChannelsTarget: $(CHANGE_CHANNELS_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(CHANGE_CHANNELS_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(CHANGE_CHANNELS_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) ChangeChannelsTarget `cat object.list` -lm

CHANGE_CONFIGURATION_SRCS = \
	unemap/utilities/change_configuration.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

CHANGE_CONFIGURATION_OBJSA = $(CHANGE_CONFIGURATION_SRCS:.c=.ObjSuffix)
CHANGE_CONFIGURATION_OBJSB = $(CHANGE_CONFIGURATION_OBJSA:.cpp=.ObjSuffix)
CHANGE_CONFIGURATION_OBJS = $(CHANGE_CONFIGURATION_OBJSB:.f=.ObjSuffix)

ChangeConfigurationTarget: $(CHANGE_CONFIGURATION_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(CHANGE_CONFIGURATION_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(CHANGE_CONFIGURATION_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) ChangeConfigurationTarget `cat object.list` -lm

CHANGE_EVENTS_SRCS = \
	unemap/utilities/change_events.c

CHANGE_EVENTS_OBJSA = $(CHANGE_EVENTS_SRCS:.c=.ObjSuffix)
CHANGE_EVENTS_OBJSB = $(CHANGE_EVENTS_OBJSA:.cpp=.ObjSuffix)
CHANGE_EVENTS_OBJS = $(CHANGE_EVENTS_OBJSB:.f=.ObjSuffix)

ChangeEventsTarget: $(CHANGE_EVENTS_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(CHANGE_EVENTS_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(CHANGE_EVENTS_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) ChangeEventsTarget `cat object.list` -lm

CHANGE_FREQUENCY_SRCS = \
	unemap/utilities/change_frequency.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

CHANGE_FREQUENCY_OBJSA = $(CHANGE_FREQUENCY_SRCS:.c=.ObjSuffix)
CHANGE_FREQUENCY_OBJSB = $(CHANGE_FREQUENCY_OBJSA:.cpp=.ObjSuffix)
CHANGE_FREQUENCY_OBJS = $(CHANGE_FREQUENCY_OBJSB:.f=.ObjSuffix)

ChangeFrequencyTarget: $(CHANGE_FREQUENCY_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(CHANGE_FREQUENCY_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(CHANGE_FREQUENCY_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) ChangeFrequencyTarget `cat object.list` -lm

COMBINE_SIGNALS_SRCS = \
	unemap/utilities/combine_signals.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

COMBINE_SIGNALS_OBJSA = $(COMBINE_SIGNALS_SRCS:.c=.ObjSuffix)
COMBINE_SIGNALS_OBJSB = $(COMBINE_SIGNALS_OBJSA:.cpp=.ObjSuffix)
COMBINE_SIGNALS_OBJS = $(COMBINE_SIGNALS_OBJSB:.f=.ObjSuffix)

CombineSignalsTarget: $(COMBINE_SIGNALS_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(COMBINE_SIGNALS_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(COMBINE_SIGNALS_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) CombineSignalsTarget `cat object.list` -lm

DIFFERENCE_SIGNALS_SRCS = \
	unemap/utilities/difference_signals.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

DIFFERENCE_SIGNALS_OBJSA = $(DIFFERENCE_SIGNALS_SRCS:.c=.ObjSuffix)
DIFFERENCE_SIGNALS_OBJSB = $(DIFFERENCE_SIGNALS_OBJSA:.cpp=.ObjSuffix)
DIFFERENCE_SIGNALS_OBJS = $(DIFFERENCE_SIGNALS_OBJSB:.f=.ObjSuffix)

DifferenceSignalsTarget: $(DIFFERENCE_SIGNALS_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(DIFFERENCE_SIGNALS_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(DIFFERENCE_SIGNALS_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) DifferenceSignalsTarget `cat object.list` -lm

EXTRACT_SIGNAL_SRCS = \
	unemap/utilities/extract_signal.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

EXTRACT_SIGNAL_OBJSA = $(EXTRACT_SIGNAL_SRCS:.c=.ObjSuffix)
EXTRACT_SIGNAL_OBJSB = $(EXTRACT_SIGNAL_OBJSA:.cpp=.ObjSuffix)
EXTRACT_SIGNAL_OBJS = $(EXTRACT_SIGNAL_OBJSB:.f=.ObjSuffix)

ExtractSignalTarget: $(EXTRACT_SIGNAL_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(EXTRACT_SIGNAL_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(EXTRACT_SIGNAL_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) ExtractSignalTarget `cat object.list` -lm

IMG2SIG_SRCS = \
	unemap/utilities/img2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

IMG2SIG_OBJSA = $(IMG2SIG_SRCS:.c=.ObjSuffix)
IMG2SIG_OBJSB = $(IMG2SIG_OBJSA:.cpp=.ObjSuffix)
IMG2SIG_OBJS = $(IMG2SIG_OBJSB:.f=.ObjSuffix)

Img2sigTarget: $(IMG2SIG_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(IMG2SIG_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(IMG2SIG_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) Img2sigTarget `cat object.list` -lm

PLT2CNFG_SRCS = \
	unemap/utilities/plt2cnfg.c

PLT2CNFG_OBJSA = $(PLT2CNFG_SRCS:.c=.ObjSuffix)
PLT2CNFG_OBJSB = $(PLT2CNFG_OBJSA:.cpp=.ObjSuffix)
PLT2CNFG_OBJS = $(PLT2CNFG_OBJSB:.f=.ObjSuffix)

Plt2cnfgTarget: $(PLT2CNFG_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(PLT2CNFG_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(PLT2CNFG_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) Plt2cnfgTarget `cat object.list` -lm

POSDAT2SIG_SRCS = \
	unemap/utilities/posdat2sig.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/interpolate.c \
	unemap/rig.c \
	user_interface/message.c

POSDAT2SIG_OBJSA = $(POSDAT2SIG_SRCS:.c=.ObjSuffix)
POSDAT2SIG_OBJSB = $(POSDAT2SIG_OBJSA:.cpp=.ObjSuffix)
POSDAT2SIG_OBJS = $(POSDAT2SIG_OBJSB:.f=.ObjSuffix)

Posdat2sigTarget: $(POSDAT2SIG_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(POSDAT2SIG_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(POSDAT2SIG_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) Posdat2sigTarget `cat object.list` -lm

REGISTER_SRCS = \
	unemap/utilities/register.c \
	command/parser.c \
	general/debug.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c \
	unemap/unemap_hardware_client.c \
	unemap/rig.c \
	user_interface/message.c

REGISTER_OBJSA = $(REGISTER_SRCS:.c=.ObjSuffix)
REGISTER_OBJSB = $(REGISTER_OBJSA:.cpp=.ObjSuffix)
REGISTER_OBJS = $(REGISTER_OBJSB:.f=.ObjSuffix)

RegisterTarget: $(REGISTER_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(REGISTER_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(REGISTER_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) RegisterTarget `cat object.list` $(LIB)

TEST_UNEMAP_HARDWARE_SRCS = \
	unemap/utilities/test_unemap_hardware.c \
	general/debug.c \
	general/mystring.c \
	unemap/unemap_hardware_client.c \
	user_interface/message.c

TEST_UNEMAP_HARDWARE_OBJSA = $(TEST_UNEMAP_HARDWARE_SRCS:.c=.ObjSuffix)
TEST_UNEMAP_HARDWARE_OBJSB = $(TEST_UNEMAP_HARDWARE_OBJSA:.cpp=.ObjSuffix)
TEST_UNEMAP_HARDWARE_OBJS = $(TEST_UNEMAP_HARDWARE_OBJSB:.f=.ObjSuffix)

TestUnemapHardwareTarget: $(TEST_UNEMAP_HARDWARE_OBJS)
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(TEST_UNEMAP_HARDWARE_OBJS) 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(TEST_UNEMAP_HARDWARE_OBJS) 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) TestUnemapHardwareTarget `cat object.list` $(LIB)

#if defined (OLD_CODE)
utilities : unemap/utilities/change_channels unemap/utilities/change_events

unemap/utilities/change_channels : unemap/utilities/change_channels.ObjSuffix
	$(LINK) unemap/utilities/change_channels unemap/utilities/change_channels.ObjSuffix \
	general/debug.ObjSuffix general/geometry.ObjSuffix general/myio.ObjSuffix general/mystring.ObjSuffix \
	unemap/rig.ObjSuffix unemap/interpolate.ObjSuffix user_interface/message.ObjSuffix \
	-lm

unemap/utilities/change_channels.ObjSuffix : unemap/utilities/change_channels.c
	$(CC) unemap/utilities/change_channels.ObjSuffix -I. unemap/utilities/change_channels.c

unemap/utilities/change_events : unemap/utilities/change_events.ObjSuffix
	$(LINK) unemap/utilities/change_events unemap/utilities/change_events.ObjSuffix

unemap/utilities/change_events.ObjSuffix : unemap/utilities/change_events.c
	$(CC) unemap/utilities/change_events.ObjSuffix -I. unemap/utilities/change_events.c
#endif /* defined (OLD_CODE) */

/* sinclude used so that the makefile can be run when the dependency file doesn't exist,
 it should then make one */
sinclude $(PRODUCT_PATH)/DependMake
