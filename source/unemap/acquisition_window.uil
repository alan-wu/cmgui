!*******************************************************************************
! FILE : acquisition_window.uil
!
! LAST MODIFIED : 20 December 1996
!
! DESCRIPTION :
! The widgets/gadgets for the acquisition window in the acquisition work area.
!===============================================================================
module acquisition
	names = case_sensitive

procedure
	identify_acquisition_acquire_bu;
	acquire_data;
	identify_acquisition_monitoring;
	start_stop_monitoring;
	identify_acquisition_experiment;
	start_stop_experiment;
	identify_acquisition_calibrate;
	set_calibrate_interface_module;
	calibrate_channels;
	identify_acquisition_page_butto;
	identify_acquisition_close_butt;
	close_acquisition_work_area;
	identify_acquisition_drawing_ar;
	expose_acquisition_drawing_area;
	resize_acquisition_drawing_area;
	select_acquisition_drawing_area;
	associate_mapping_acquisition;
	destroy_Acquisition_window;

identifier
	acquisition_window_structure;
	acquisition_work_area_structure;
	identifying_colour;
	system_window_structure;
	widget_spacing;
	! Fonts
	button_font;
	heading_font;
	list_font;
	menu_font;
	normal_font;
	normal_non_proportional_font;
	small_font;

object
! The window for controlling data acquisition
	acquisition_window: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNdialogTitle = "Acquisition";
			XmNbackground = identifying_colour;
			};
		controls
			{
			XmForm acquisition_menu;
			XmDrawingArea acquisition_drawing_area;
			};
		callbacks
			{
			XmNfocusCallback = procedures
				{
				associate_mapping_acquisition(system_window_structure);
				};
			XmNdestroyCallback = procedures
				{
				destroy_Acquisition_window(acquisition_window_structure);
				};
			};
		};
!The area within the data acquisition window for drawing the acquisition segment
	acquisition_drawing_area: XmDrawingArea 
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNresizePolicy = XmRESIZE_NONE;
			XmNleftAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopWidget = XmForm acquisition_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_drawing_ar(acquisition_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_acquisition_drawing_area(acquisition_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_acquisition_drawing_area(acquisition_window_structure);
				};
			XmNinputCallback = procedures
				{
				select_acquisition_drawing_area(acquisition_window_structure);
				};
			};
		};
!The menu for the data acquisition window
	acquisition_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			};
		controls
			{
			XmPushButton acquisition_acquire_button;
!			XmToggleButtonGadget acquisition_monitoring_toggle;
			XmToggleButton acquisition_monitoring_toggle;
			XmToggleButton acquisition_experiment_toggle;
			XmMenuBar acquisition_menu_bar;
			XmPushButtonGadget acquisition_page_button;
			XmSeparator
				{
				arguments
					{
					XmNseparatorType = XmNO_LINE;
					XmNleftAttachment = XmATTACH_WIDGET;
					XmNleftOffset = 0;
					XmNleftWidget = XmPushButtonGadget acquisition_page_button;
					XmNrightAttachment = XmATTACH_WIDGET;
					XmNrightOffset = 0;
					XmNrightWidget = XmPushButtonGadget acquisition_close_button;
					XmNtopAttachment = XmATTACH_FORM;
					XmNtopOffset = 0;
					XmNbottomAttachment = XmATTACH_FORM;
					XmNbottomOffset = 0;
					};
				};
			XmPushButtonGadget acquisition_close_button;
			};
		};
!Clicking this button triggers data acquisition
	acquisition_acquire_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Acquire");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_acquire_bu(acquisition_window_structure);
				};
			XmNactivateCallback = procedures
				{
				acquire_data(acquisition_window_structure);
				};
			};
		};
!Toggles between monitoring and not monitoring the measurement rig
!	acquisition_monitoring_toggle: XmToggleButtonGadget
	acquisition_monitoring_toggle: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Monitoring");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNfillOnSelect = true;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmPushButton acquisition_acquire_button;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_monitoring(acquisition_window_structure);
				};
			XmNarmCallback = procedures
				{
				start_stop_monitoring(acquisition_window_structure);
				};
			XmNdisarmCallback = procedures
				{
				start_stop_monitoring(acquisition_window_structure);
				};
			};
		};
!Toggles between the experiment running and not running
	acquisition_experiment_toggle: XmToggleButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Experiment");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNfillOnSelect = true;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
!			XmNleftWidget = XmToggleButtonGadget acquisition_monitoring_toggle;
			XmNleftWidget = XmToggleButton acquisition_monitoring_toggle;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_experiment(acquisition_window_structure);
				};
			XmNarmCallback = procedures
				{
				start_stop_experiment(acquisition_window_structure);
				};
			XmNdisarmCallback = procedures
				{
				start_stop_experiment(acquisition_window_structure);
				};
			};
		};
	acquisition_menu_bar: XmMenuBar
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNorientation = XmHORIZONTAL;
			XmNspacing = widget_spacing;
			XmNentryAlignment = XmALIGNMENT_CENTER;
			XmNpacking = XmPACK_TIGHT;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNshadowThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton acquisition_experiment_toggle;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmCascadeButtonGadget acquisition_calibrate_button;
			};
		};
!Clicking this button starts calibration of the channels
	acquisition_calibrate_button: XmCascadeButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Calibrate");
			XmNfontList = button_font;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 1");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(1);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 2");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(2);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 3");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(3);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 4");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(4);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 5");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(5);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 6");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(6);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 7");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(7);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 8");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(8);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 9");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(9);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 10");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(10);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 11");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(11);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 12");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(12);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 13");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(13);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 14");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(14);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 15");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(15);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interface module 16");
							XmNfontList = button_font;
							};
						callbacks
							{
							XmNactivateCallback = procedures
								{
								set_calibrate_interface_module(16);
								calibrate_channels(acquisition_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_calibrate(acquisition_window_structure);
				};
			};
		};
!Brings up a menu of pages to display
	acquisition_page_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Page");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmMenuBar acquisition_menu_bar;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_page_butto(acquisition_window_structure);
				};
			};
		};
!Closes the data acquisition work area
	acquisition_close_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Close");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_NONE;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_acquisition_close_butt(acquisition_window_structure);
				};
			XmNactivateCallback = procedures
				{
				close_acquisition_work_area(acquisition_work_area_structure);
				};
			};
		};

end module;
