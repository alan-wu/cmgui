!*******************************************************************************
! FILE : analysis_window.uil
!
! LAST MODIFIED : 13 October 1999
!
! DESCRIPTION :
! The widgets/gadgets for the analysis window in the analysis work area.
!===============================================================================
module analysis
	names = case_sensitive

procedure
	identify_analysis_menu;
	identify_analysis_reset_button;
	analysis_reset_to_raw_signals;
	identify_analysis_baseline_butt;
	analysis_set_baseline;
	identify_analysis_range_button;
	analysis_set_range;
	identify_analysis_previous_butt;
!OLD_CODE
!	identify_analysis_previous_acce;
	analysis_previous_signal;
	identify_analysis_next_button;
!OLD_CODE
!	identify_analysis_next_accelera;
	analysis_next_signal;
	identify_analysis_accept_button;
!OLD_CODE
!	identify_analysis_accept_accele;
	analysis_accept_signal;
	identify_analysis_reject_button;
!OLD_CODE
!	identify_analysis_reject_accele;
	analysis_reject_signal;
	identify_analysis_close_button;
	close_analysis_work_area;
	identify_interval_drawing_area;
	expose_interval_drawing_area;
	resize_interval_drawing_area;
	select_analysis_interval;
	identify_analysis_map_button;
	identify_analysis_map_potential;
	display_map_with_check;
	identify_analysis_map_integral;
	identify_analysis_map_gradient;
	id_analysis_map_single_activati;
	id_analysis_map_multiple_activa;
	identify_analysis_file_button;
	identify_analysis_file_read_sig;
	open_file_and_read;
	identify_analysis_file_overlay;
	identify_analysis_file_save_int;
	analysis_write_interval;
	id_analysis_file_save_int_as;
	open_file_and_write;
	identify_analysis_file_save_tim;
	write_event_times_file;
	identify_analysis_file_read_tim;
	identify_analysis_file_save_pot;
	identify_analysis_file_read_bar;
	identify_analysis_file_read_bee;
	identify_analysis_file_read_car;
	identify_analysis_file_read_neu;
	identify_analysis_print_button;
	identify_analysis_print_all_but;
	identify_analysis_print_page_bu;
	identify_analysis_print_selecte;
	identify_analysis_order_choice;
	identify_analysis_order_event_b;
	set_analysis_order_event;
	identify_analysis_order_channel;
	set_analysis_order_channel;
	identify_analysis_layout_choice;
	identify_analysis_layout_separa;
	set_analysis_layout_separate;
	identify_analysis_layout_overla;
	set_analysis_layout_overlap;
	identify_analysis_region_choice;
	identify_analysis_region_pull_d;
	identify_analysis_region_place;
	identify_signals_drawing_area;
	expose_signals_drawing_area;
	resize_signals_drawing_area;
	select_signals_drawing_area;
	associate_mapping_analysis;
	destroy_Analysis_window;

identifier
	widget_spacing;
	identifying_colour;
	analysis_window_structure;
	analysis_work_area_structure;
	system_window_structure;
	read_signal_file_data;
	overlay_signal_file_data;
	write_signal_file_data;
	read_event_times_file_data;
	read_bard_data_file_data;
	read_beekeeper_data_file_data;
	read_cardiomapp_data_file_data;
	read_neurosoft_data_file_data;
	print_all_signals_data;
	print_selected_signals_data;
	! Fonts
	button_font;
	heading_font;
	list_font;
	menu_font;
	normal_font;
	normal_non_proportional_font;
	small_font;

object
	analysis_window: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
!			XmNdialogTitle = "Analysis";
			XmNbackground = identifying_colour;
			};
		controls
			{
			XmPanedWindow analysis_paned_window;
			};
		callbacks
			{

			XmNfocusCallback = procedures
				{
				associate_mapping_analysis(system_window_structure);
				};
			XmNdestroyCallback = procedures
				{
				destroy_Analysis_window(analysis_window_structure);
				};
			};
		};
	analysis_paned_window: XmPanedWindow
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNmarginWidth = 0;
			XmNmarginHeight = 0;
			XmNspacing = widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmForm interval_area;
			XmForm signals_area;
			};
		};
	interval_area: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNbackground = identifying_colour;
			};
		controls
			{
			XmForm interval_menu;
			XmDrawingArea interval_drawing_area;
			};
		};
	interval_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmPushButton analysis_reset_button;
			XmPushButton analysis_baseline_button;
			XmPushButton analysis_range_button;
			XmPushButton analysis_previous_button;
			XmPushButton analysis_next_button;
			XmPushButton analysis_accept_button;
			XmPushButton analysis_reject_button;
			XmPushButton analysis_close_button;
!OLD_CODE begin
!?????DB.  A bit of a hack to get accelerators for previous and next.  Required
!?????  because Motif is so restrictive.
!      XmMenuBar
!        {
!        arguments
!          {
!          XmNborderWidth = 0;
!          XmNorientation = XmHORIZONTAL;
!          XmNspacing = 0;
!          XmNentryAlignment = XmALIGNMENT_CENTER;
!          XmNpacking = XmPACK_TIGHT;
!          XmNmarginHeight = 0;
!          XmNmarginWidth = 0;
!          XmNwidth = 0;
!          XmNshadowThickness = 0;
!          XmNleftAttachment = XmATTACH_FORM;
!          XmNleftOffset = 0;
!          XmNrightAttachment = XmATTACH_NONE;
!          XmNtopAttachment = XmATTACH_FORM;
!          XmNtopOffset = 0;
!          XmNbottomAttachment = XmATTACH_FORM;
!          XmNbottomOffset = 0;
!          };
!        controls
!          {
!          XmCascadeButtonGadget
!            {
!            arguments
!              {
!              XmNlabelString =
!              compound_string("");
!              XmNshadowThickness = 0;
!              XmNhighlightThickness = 0;
!              XmNwidth = 0;
!              };
!            controls
!              {
!              XmPulldownMenu
!                {
!                arguments
!                  {
!                  XmNborderWidth = 0;
!                  };
!                controls
!                  {
!                  XmPushButtonGadget
!                    {
!                    arguments
!                      {
!                      XmNaccelerator = "<Key>n: Activate()";
!                      XmNsensitive = false;
!                      };
!                    callbacks
!                      {
!                      MrmNcreateCallback = procedures
!                        {
!                        identify_analysis_next_accelera(
!													analysis_window_structure);
!                        };
!                      XmNactivateCallback = procedures
!                        {
!                        analysis_next_signal(analysis_work_area_structure);
!                        };
!                      };
!                    };
!                  XmPushButtonGadget
!                    {
!                    arguments
!                      {
!                      XmNaccelerator = "<Key>p: Activate()";
!                      XmNsensitive = false;
!                      };
!                    callbacks
!                      {
!                      MrmNcreateCallback = procedures
!                        {
!                        identify_analysis_previous_acce(
!													analysis_window_structure);
!                        };
!                      XmNactivateCallback = procedures
!                        {
!                        analysis_previous_signal(analysis_work_area_structure);
!                        };
!                      };
!                    };
!                  XmPushButtonGadget
!                    {
!                    arguments
!                      {
!                      XmNaccelerator = "<Key>a: Activate()";
!                      XmNsensitive = false;
!                      };
!                    callbacks
!                      {
!                      MrmNcreateCallback = procedures
!                        {
!                        identify_analysis_accept_accele(
!													analysis_window_structure);
!                        };
!                      XmNactivateCallback = procedures
!                        {
!                        analysis_accept_signal(analysis_work_area_structure);
!                        };
!                      };
!                    };
!                  XmPushButtonGadget
!                    {
!                    arguments
!                      {
!                      XmNaccelerator = "<Key>r: Activate()";
!                      XmNsensitive = false;
!                      };
!                    callbacks
!                      {
!                      MrmNcreateCallback = procedures
!                        {
!                        identify_analysis_reject_accele(
!													analysis_window_structure);
!                        };
!                      XmNactivateCallback = procedures
!                        {
!                        analysis_reject_signal(analysis_work_area_structure);
!                        };
!                      };
!                    };
!                  };
!                };
!              };
!            };
!          };
!        };
!OLD_CODE end
			};
		};
	analysis_reset_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Reset");
			XmNfontList = button_font;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_reset_button(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_reset_to_raw_signals(analysis_work_area_structure);
				};
			};
		};
	analysis_baseline_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Baseline");
			XmNfontList = button_font;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton analysis_reset_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_baseline_butt(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_set_baseline(analysis_work_area_structure);
				};
			};
		};
	analysis_range_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Range");
			XmNfontList = button_font;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton analysis_baseline_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_range_button(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_set_range(analysis_work_area_structure);
				};
			};
		};
	analysis_previous_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Previous");
			XmNfontList = button_font;
			XmNmnemonic = 80;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton analysis_range_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_previous_butt(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_previous_signal(analysis_work_area_structure);
				};
			};
		};
	analysis_next_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Next");
			XmNfontList = button_font;
			XmNmnemonic = 78;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton analysis_previous_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_next_button(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_next_signal(analysis_work_area_structure);
				};
			};
		};
	analysis_accept_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Accept");
			XmNfontList = button_font;
			XmNmnemonic = 65;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton analysis_next_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_accept_button(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_accept_signal(analysis_work_area_structure);
				};
			};
		};
	analysis_reject_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Reject");
			XmNfontList = button_font;
			XmNmnemonic = 82;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton analysis_accept_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_reject_button(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_reject_signal(analysis_work_area_structure);
				};
			};
		};
	analysis_close_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Close");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_close_button(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				close_analysis_work_area(analysis_work_area_structure);
				};
			};
		};
	interval_drawing_area: XmDrawingArea
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = XmForm interval_menu;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_interval_drawing_area(analysis_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_interval_drawing_area(analysis_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_interval_drawing_area(analysis_window_structure);
				};
			XmNinputCallback = procedures
				{
				select_analysis_interval(analysis_work_area_structure);
				};
			};
		};
	signals_area: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNbackground = identifying_colour;
			};
		controls
			{
			XmForm analysis_menu;
			XmDrawingArea signals_drawing_area;
			};
		};
	analysis_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			};
		controls
			{
			XmMenuBar analysis_menu_bar;
			XmOptionMenu analysis_order_choice;
			XmOptionMenu analysis_layout_choice;
			XmOptionMenu analysis_region_choice;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_menu(analysis_window_structure);
				};
			};
		};
	analysis_menu_bar: XmMenuBar 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNorientation = XmHORIZONTAL;
			XmNspacing = widget_spacing;
			XmNentryAlignment = XmALIGNMENT_CENTER;
			XmNpacking = XmPACK_TIGHT;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNshadowThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNtraversalOn = false;
			!SAB I have disabled the menu from being a tab group
			!	  because I have not installed the accelerators in menus
			};
		controls
			{
			XmCascadeButtonGadget analysis_map_button;
			XmCascadeButtonGadget analysis_file_button;
			XmCascadeButtonGadget analysis_print_button;
			};
		};
	analysis_order_choice: XmOptionMenu 
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmMenuBar analysis_menu_bar;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Event time");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_analysis_order_event_b(analysis_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_analysis_order_event(analysis_work_area_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Channel");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_analysis_order_channel(analysis_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_analysis_order_channel(analysis_work_area_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_order_choice(analysis_window_structure);
				};
			};
		};
	analysis_layout_choice: XmOptionMenu 
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmOptionMenu analysis_order_choice;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Separate");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_analysis_layout_separa(analysis_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_analysis_layout_separate(analysis_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Overlap");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_analysis_layout_overla(analysis_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_analysis_layout_overlap(analysis_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_layout_choice(analysis_window_structure);
				};
			};
		};
	analysis_region_choice: XmOptionMenu 
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmOptionMenu analysis_layout_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu analysis_region_pull_down_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_region_choice(analysis_window_structure);
				};
			};
		};
	analysis_region_pull_down_menu: XmPulldownMenu
		{
		arguments
			{
			XmNborderWidth = 1;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_region_pull_d(analysis_window_structure);
				};
			};
		controls
			{
			XmPushButtonGadget
				{
				arguments
					{
					XmNlabelString =
					compound_string("Place holder");
					XmNfontList = button_font;
					};
				callbacks
					{
					MrmNcreateCallback = procedures
						{
						identify_analysis_region_place(analysis_window_structure);
						};
					};
				};
			};
		};
	analysis_map_button: XmCascadeButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Map");
			XmNfontList = button_font;
			};
		controls
			{
			XmPulldownMenu analysis_map_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_map_button(analysis_window_structure);
				};
			};
		};
	analysis_map_menu: XmPulldownMenu 
		{
		arguments
			{
			XmNborderWidth = 1;
			};
		controls
			{
			XmPushButton analysis_map_potential_button;
			XmPushButton analysis_map_integral_button;
			XmPushButton analysis_map_gradient_button;
			XmPushButton analysis_map_single_acti_button;
			XmPushButton analysis_map_multiple_acti_butt;
			};
		};
	analysis_map_potential_button: XmPushButton
		{
		arguments
			{
			XmNsensitive = false;
			XmNlabelString = 
			compound_string("Potential");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_map_potential(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				display_map_with_check(analysis_work_area_structure);
				};
			};
		};
	analysis_map_integral_button: XmPushButton
		{
		arguments
			{
			XmNsensitive = false;
			XmNlabelString = 
			compound_string("Integral");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_map_integral(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				display_map_with_check(analysis_work_area_structure);
				};
			};
		};
	analysis_map_gradient_button: XmPushButton
		{
		arguments
			{
			XmNsensitive = false;
			XmNlabelString = 
			compound_string("Gradient");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_map_gradient(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
!				display_map_with_check(analysis_work_area_structure);
				};
			};
		};
	analysis_map_single_acti_button: XmPushButton
		{
		arguments
			{
			XmNsensitive = false;
			XmNlabelString = 
			compound_string("Single activation");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_analysis_map_single_activati(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				display_map_with_check(analysis_work_area_structure);
				};
			};
		};
	analysis_map_multiple_acti_butt: XmPushButton
		{
		arguments
			{
			XmNsensitive = false;
			XmNlabelString = 
			compound_string("Multiple activations");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_analysis_map_multiple_activa(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				display_map_with_check(analysis_work_area_structure);
				};
			};
		};
	analysis_file_button: XmCascadeButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("File");
			XmNfontList = button_font;
			};
		controls
			{
			XmPulldownMenu analysis_file_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_button(analysis_window_structure);
				};
			};
		};
	analysis_file_menu: XmPulldownMenu 
		{
		arguments
			{
			XmNborderWidth = 1;
			};
		controls
			{
			XmPushButton analysis_file_read_signals_butt;
			XmPushButton analysis_file_overlay_signals_b;
			XmPushButton analysis_file_save_interval_but;
			XmPushButton analysis_file_save_interval_as_;
			XmPushButton analysis_file_save_times_button;
			XmPushButton analysis_file_read_times_button;
			XmPushButton analysis_file_save_potentials_b;
			XmPushButton analysis_file_read_bard_button;
			XmPushButton analysis_file_read_beekeeper_bu;
			XmPushButton analysis_file_read_cardiomapp_b;
			XmPushButton analysis_file_read_neurosoft_bu;
			};
		};
	analysis_file_read_signals_butt: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Read signals");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_read_sig(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(read_signal_file_data);
				};
			};
		};
	analysis_file_overlay_signals_b: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Overlay signals");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_overlay(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(overlay_signal_file_data);
				};
			};
		};
	analysis_file_save_interval_but: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Save interval");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_save_int(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_write_interval(analysis_work_area_structure);
				};
			};
		};
	analysis_file_save_interval_as_: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Save interval as");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_analysis_file_save_int_as(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_write(write_signal_file_data);
				};
			};
		};
	analysis_file_save_times_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Save event times");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_save_tim(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				write_event_times_file(analysis_window_structure);
				};
			};
		};
	analysis_file_read_times_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Read event times");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_read_tim(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(read_event_times_file_data);
				};
			};
		};
	analysis_file_save_potentials_b: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Save potentials");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_save_pot(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				};
			};
		};
	analysis_file_read_bard_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Read Bard data");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_read_bar(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(read_bard_data_file_data);
				};
			};
		};
	analysis_file_read_beekeeper_bu: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Read Beekeeper eeg data");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_read_bee(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(read_beekeeper_data_file_data);
				};
			};
		};
	analysis_file_read_cardiomapp_b: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Read CardioMapp data");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_read_car(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(read_cardiomapp_data_file_data);
				};
			};
		};
	analysis_file_read_neurosoft_bu: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Read Neurosoft ROW=POINTS data");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_file_read_neu(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_read(read_neurosoft_data_file_data);
				};
			};
		};
	analysis_print_button: XmCascadeButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Print");
			XmNfontList = button_font;
			};
		controls
			{
			XmPulldownMenu analysis_print_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_print_button(analysis_window_structure);
				};
			};
		};
	analysis_print_menu: XmPulldownMenu 
		{
		arguments
			{
			XmNborderWidth = 1;
			};
		controls
			{
			XmPushButton analysis_print_all_button;
			XmPushButton analysis_print_page_button;
			XmPushButton analysis_print_selected_button;
			};
		};
	analysis_print_all_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("All");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_print_all_but(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_write(print_all_signals_data);
				};
			};
		};
	analysis_print_page_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Page");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_print_page_bu(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				};
			};
		};
	analysis_print_selected_button: XmPushButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Selected");
			XmNfontList = button_font;
			XmNsensitive = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_analysis_print_selecte(analysis_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_file_and_write(print_selected_signals_data);
				};
			};
		};
	signals_drawing_area: XmDrawingArea
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = XmForm analysis_menu;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_signals_drawing_area(analysis_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_signals_drawing_area(analysis_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_signals_drawing_area(analysis_window_structure);
				};
			XmNinputCallback = procedures
				{
				select_signals_drawing_area(analysis_work_area_structure);
				};
			};
		};
	event_times_warning_box: XmMessageBox
		{
		arguments
			{
			XmNmessageString = compound_string(
		"What should be done with events that have not been accepted or rejected");
			XmNdialogType = XmDIALOG_QUESTION;
			XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
			XmNokLabelString =
			compound_string("Accept all");
			XmNcancelLabelString =
			compound_string("Reject all");
			XmNhelpLabelString =
			compound_string("Cancel");
			};
		};

end module;

