!*******************************************************************************
! FILE : page_window.uil
!
! LAST MODIFIED : 2 August 2005
!
! DESCRIPTION :
! The widgets/gadgets for a page window in the acquisition work area.
!
! ???DB.  Reorganization to allow
! 1 Starting and stopping stimulation on multiple cards at the same time
! 2 Setting gain and range on all channels at the same time
! 3 Multiple scrolling channels
! 4 Set up selection connection to mapping window
!
! System control
!   experiment
!   isolate
!   sample
!   save (and number of samples to save)
!   calibrate
!   test
!   low pass
!   close
! All devices
!   auto range/gain
!   start/stop all stimulators
! Current device (tied to/selectable from mapping window)
!   name
!   stimulate checkbox (not selectable and not checked if not electrode)
!   associated stimulator on/off checkbox (not selectable if not stimulate
!     checked)
!   gain text field (not selectable if stimulate checked)
!   minimum text field (not selectable if stimulate checked)
!   maximum text field (not selectable if stimulate checked)
!   display checkbox (not selectable if stimulate checked?)
! Scrolling display for current device
! Scrolling display for other selected devices (specify initial in Unemap?)
!===============================================================================
module page
	names = case_sensitive

procedure
	decrement_electrode;
	destroy_Page_window_callback;
	electrode_stimulate_record_call;
	expose_page_scrolling_area;
	identify_page_auto_range_button;
	identify_page_calibrate_button;
	identify_page_close_button;
	close_Page_window_callback;
	identify_page_electrode_form;
	identify_page_electrode_value;
	identify_page_experiment_checkb;
	identify_page_full_range_button;
	identify_page_gain_form;
	identify_page_gain_value;
	identify_page_isolate_checkbox;
	identify_page_low_pass_form;
	identify_page_low_pass_value;
	identify_page_maximum_form;
	identify_page_maximum_value;
	identify_page_minimum_form;
	identify_page_minimum_value;
	identify_page_pacing_button;
	identify_page_sample_checkbox;
	identify_page_save_button;
	identify_page_save_form;
	identify_page_save_number_of_sa;
	identify_page_scrolling_area;
	identify_page_scrolling_checkbo;
	identify_page_set_scrolling_but;
	identify_page_pages_pull_down_m;
	identify_page_start_all_stimula;
	identify_page_stimulate_checkbo;
	identify_page_stimulator_checkb;
	identify_page_stop_all_stimulat;
	identify_page_test_checkbox;
	increment_electrode;
	open_Pacing_window_callback;
	page_auto_range;
	page_full_range;
	page_save_data;
	page_start_all_stimulators;
	page_stop_all_stimulators;
	resize_page_scrolling_area;
	start_calibrating;
	start_stop_experiment_callback;
	start_stop_isolating_callback;
	start_stop_sampling_callback;
	start_stop_testing_callback;
	stimulator_start_stop_callback;
	update_display_device_callback;
	update_display_gain_callback;
	update_display_maximum_callback;
	update_display_minimum_callback;
	update_filter_callback;
	update_save_number_of_samples_c;

identifier
	identifying_colour;
	page_window_structure;
	widget_spacing;
	! Fonts
	button_font;
	heading_font;
	list_font;
	menu_font;
	normal_font;
	normal_non_proportional_font;
	small_font;

object
!The window for monitoring signals
	page_window: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNdialogTitle = "Acquisition";
			XmNbackground = identifying_colour;
			};
		controls
			{
			XmForm page_menu;
			XmDrawingArea scrolling_area;
			};
		callbacks
			{
			XmNfocusCallback = procedures
				{
!				associate_mapping_acquisition(system_window_structure);
				};
			XmNdestroyCallback = procedures
				{
				destroy_Page_window_callback(page_window_structure);
				};
			};
		};
!The menu for the page window
	page_menu: XmForm 
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmForm control_menu;
			XmForm all_devices_menu;
			XmForm current_device_menu;
			};
		};
	control_menu: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmToggleButton page_experiment_checkbox;
			XmToggleButton page_isolate_checkbox;
			XmToggleButton page_sample_checkbox;
			XmForm page_save_form;
			XmPushButtonGadget page_calibrate_button;
			XmToggleButton page_test_checkbox;
			XmForm page_low_pass;
			XmSeparator
				{
				arguments
					{
					XmNseparatorType = XmNO_LINE;
					XmNleftAttachment = XmATTACH_WIDGET;
					XmNleftOffset = 0;
					XmNleftWidget = XmForm page_low_pass;
					XmNrightAttachment = XmATTACH_WIDGET;
					XmNrightOffset = 0;
					XmNrightWidget = XmPushButtonGadget page_close_button;
					XmNtopAttachment = XmATTACH_FORM;
					XmNtopOffset = 0;
					XmNbottomAttachment = XmATTACH_FORM;
					XmNbottomOffset = 0;
					};
				};
			XmPushButtonGadget page_close_button;
			};
		};
!Clicking this button toggles power to the acquisition hardware between on and
!  off
	page_experiment_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Experiment");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_experiment_checkb(page_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				start_stop_experiment_callback(page_window_structure);
				};
			};
		};
!Clicking this button toggles between isolate and record modes
	page_isolate_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Isolate");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton page_experiment_checkbox;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_isolate_checkbox(page_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				start_stop_isolating_callback(page_window_structure);
				};
			};
		};
!Clicking this button turns sampling on and off
	page_sample_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Sample");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton page_isolate_checkbox;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_sample_checkbox(page_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				start_stop_sampling_callback(page_window_structure);
				};
			};
		};
!Controls saving samples
	page_save_form: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton page_sample_checkbox;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPushButtonGadget page_save_button;
			XmTextField page_save_number_of_samples_val;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_save_form(page_window_structure);
				};
			};
		};
!Clicking this button prompts for a file to write the samples to
	page_save_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Save");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_save_button(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				page_save_data(page_window_structure);
				};
			};
		};
	page_save_number_of_samples_val: XmTextField
		{
		arguments
			{
			XmNcolumns = 8;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButtonGadget page_save_button;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_save_number_of_sa(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				update_save_number_of_samples_c(page_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				update_save_number_of_samples_c(page_window_structure);
				};
			};
		};
!Clicking this button starts calibration
	page_calibrate_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Calibrate");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmForm page_save_form;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_calibrate_button(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				start_calibrating(page_window_structure);
				};
			};
		};
!Clicking this button toggles in and out of test mode (electrodes connected to
!  and displaying test signal)
	page_test_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Test");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButtonGadget page_calibrate_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_test_checkbox(page_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				start_stop_testing_callback(page_window_structure);
				};
			};
		};
!Controls the anti-aliasing/low-pass filter
	page_low_pass: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton page_test_checkbox;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmLabelGadget page_low_pass_label;
			XmTextField page_low_pass_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_low_pass_form(page_window_structure);
				};
			};
		};
	page_low_pass_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Low pass:");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	page_low_pass_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget page_low_pass_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_low_pass_value(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				update_filter_callback(page_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				update_filter_callback(page_window_structure);
				};
			};
		};
!Closes the page window
	page_close_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Close");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_NONE;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_close_button(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				close_Page_window_callback(page_window_structure);
				};
			};
		};
!Menu for operations on all devices
	all_devices_menu: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = widget_spacing;
			XmNtopWidget = XmForm control_menu;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmPushButtonGadget page_auto_range_button;
			XmPushButtonGadget page_full_range_button;
			XmMenuBar page_set_scrolling_menu_bar;
			XmPushButtonGadget page_start_all_stimulators_butt;
			XmPushButtonGadget page_stop_all_stimulators_butto;
			XmPushButtonGadget page_pacing_button;
			};
		};
!Clicking this button sets the gain and range of all devices based on the
!  sampling in progress
	page_auto_range_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Auto range");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_auto_range_button(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				page_auto_range(page_window_structure);
				};
			};
		};
!Clicking this button sets the gain to minimum and the range to full
	page_full_range_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Full range");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmPushButtonGadget page_auto_range_button;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_full_range_button(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				page_full_range(page_window_structure);
				};
			};
		};
!So that can have pull down menu of pages to be set scrolling
	page_set_scrolling_menu_bar : XmMenuBar 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNorientation = XmHORIZONTAL;
			XmNspacing = widget_spacing;
			XmNentryAlignment = XmALIGNMENT_CENTER;
			XmNpacking = XmPACK_TIGHT;
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNshadowThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmPushButtonGadget page_full_range_button;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNtraversalOn = false;
			!SAB I have disabled the menu from being a tab group
			!	  because I have not installed the accelerators in menus
			};
		controls
			{
			XmCascadeButtonGadget page_set_scrolling_button;
			};
		};
	page_set_scrolling_button : XmCascadeButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Set scrolling");
			XmNfontList = button_font;
			};
		controls
			{
			XmPulldownMenu page_set_scrolling_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_set_scrolling_but(page_window_structure);
				};
			};
		};
	page_set_scrolling_menu : XmPulldownMenu 
		{
		arguments
			{
			XmNborderWidth = 1;
			};
		controls
			{
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_pages_pull_down_m(page_window_structure);
				};
			};
		};
!Clicking this button starts all stimulators
	page_start_all_stimulators_butt: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Start all stimulators");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmMenuBar page_set_scrolling_menu_bar;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_start_all_stimula(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				page_start_all_stimulators(page_window_structure);
				};
			};
		};
!Clicking this button stops all stimulators
	page_stop_all_stimulators_butto: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Stop all stimulators");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmPushButtonGadget page_start_all_stimulators_butt;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_stop_all_stimulat(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				page_stop_all_stimulators(page_window_structure);
				};
			};
		};
!Clicking this button opens the pacing dialog
	page_pacing_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Pacing");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmMenuBar page_set_scrolling_menu_bar;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_pacing_button(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				open_Pacing_window_callback(page_window_structure);
				};
			};
		};
!Menu for operations on the current device
	current_device_menu: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = widget_spacing;
			XmNtopWidget = XmForm all_devices_menu;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmForm page_electrode;
			XmToggleButton page_scrolling_checkbox;
			XmForm page_gain;
			XmForm page_minimum;
			XmForm page_maximum;
			XmToggleButton page_stimulate_checkbox;
			XmToggleButton page_stimulator_checkbox;
			};
		};
!Controls which device is currently shown in the scrolling display
	page_electrode: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmLabelGadget page_electrode_label;
			XmTextField page_electrode_value;
			XmForm page_electrode_arrows;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_electrode_form(page_window_structure);
				};
			};
		};
	page_electrode_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Electrode:");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	page_electrode_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget page_electrode_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_WIDGET;
			XmNrightWidget = XmForm page_electrode_arrows;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_electrode_value(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				update_display_device_callback(page_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				update_display_device_callback(page_window_structure);
				};
			};
		};
	page_electrode_arrows: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_NONE;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmArrowButtonGadget page_electrode_down_arrow;
			XmSeparator
				{
				arguments
					{
					XmNseparatorType = XmNO_LINE;
					XmNleftAttachment = XmATTACH_FORM;
					XmNleftOffset = 0;
					XmNrightAttachment = XmATTACH_FORM;
					XmNrightOffset = 0;
					XmNtopAttachment = XmATTACH_WIDGET;
					XmNtopOffset = 0;
					XmNtopWidget = XmArrowButtonGadget page_electrode_up_arrow;
					XmNbottomAttachment = XmATTACH_WIDGET;
					XmNbottomOffset = 0;
					XmNbottomWidget = XmArrowButtonGadget page_electrode_down_arrow;
					};
				};
			XmArrowButtonGadget page_electrode_up_arrow;
			};
		};
	page_electrode_down_arrow: XmArrowButtonGadget
		{
		arguments
			{
			XmNarrowDirection = XmARROW_DOWN;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_NONE;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				decrement_electrode(page_window_structure);
				};
			};
		};
	page_electrode_up_arrow: XmArrowButtonGadget
		{
		arguments
			{
			XmNarrowDirection = XmARROW_UP;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			XmNactivateCallback = procedures
				{
				increment_electrode(page_window_structure);
				};
			};
		};
!Controls whether or not the signal is in the scrolling area
	page_scrolling_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Scrolling");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmForm page_electrode;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_scrolling_checkbo(page_window_structure);
				};
			};
		};
!Controls the display gain
	page_gain: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton page_scrolling_checkbox;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmLabelGadget page_gain_label;
			XmTextField page_gain_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_gain_form(page_window_structure);
				};
			};
		};
	page_gain_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Gain:");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	page_gain_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget page_gain_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_gain_value(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				update_display_gain_callback(page_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				update_display_gain_callback(page_window_structure);
				};
			};
		};
!Controls the display minimum
	page_minimum: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmForm page_gain;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmLabelGadget page_minimum_label;
			XmTextField page_minimum_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_minimum_form(page_window_structure);
				};
			};
		};
	page_minimum_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Min:");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	page_minimum_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 6;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget page_minimum_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_minimum_value(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				update_display_minimum_callback(page_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				update_display_minimum_callback(page_window_structure);
				};
			};
		};
!Controls the display maximum
	page_maximum: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmForm page_minimum;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmLabelGadget page_maximum_label;
			XmTextField page_maximum_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_maximum_form(page_window_structure);
				};
			};
		};
	page_maximum_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Max:");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	page_maximum_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 6;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget page_maximum_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_maximum_value(page_window_structure);
				};
			XmNactivateCallback = procedures
				{
				update_display_maximum_callback(page_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				update_display_maximum_callback(page_window_structure);
				};
			};
		};
!Controls whether the electrode is stimulating or recording
	page_stimulate_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Stimulate");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmForm page_maximum;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_stimulate_checkbo(page_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				electrode_stimulate_record_call(page_window_structure);
				};
			};
		};
!Controls whether the stimulator is on or off
	page_stimulator_checkbox: XmToggleButton
		{
		arguments
			{
			XmNlabelString = 
			compound_string("Stimulator  ");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmToggleButton page_stimulate_checkbox;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_stimulator_checkb(page_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				stimulator_start_stop_callback(page_window_structure);
				};
			};
		};
!The area within the page window for scrolling signals
	scrolling_area: XmDrawingArea 
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNresizePolicy = XmRESIZE_NONE;
			XmNleftAttachment = XmATTACH_FORM;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopWidget = XmForm page_menu;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_page_scrolling_area(page_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_page_scrolling_area(page_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_page_scrolling_area(page_window_structure);
				};
			};
		};
!OLD_CODE
!!Clicking this button rescales the scrolling display to fit all values since the
!!  last press of page_reset_scale_button
!	page_scale_button: XmPushButtonGadget
!		{
!		arguments
!			{
!			XmNlabelString = 
!			compound_string("Scale");
!			XmNfontList = button_font;
!			XmNshadowThickness = 0;
!			XmNhighlightThickness = 0;
!			XmNleftAttachment = XmATTACH_WIDGET;
!			XmNleftOffset = widget_spacing;
!			XmNleftWidget = XmForm page_gain;
!			XmNrightAttachment = XmATTACH_NONE;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_scale_button(page_window_structure);
!				};
!			XmNactivateCallback = procedures
!				{
!				page_scale(page_window_structure);
!				};
!			};
!		};
!!Clicking this button causes the display minimum/maximum calculation to be
!! re-started
!	page_reset_scale_button: XmPushButtonGadget
!		{
!		arguments
!			{
!			XmNlabelString = 
!			compound_string("Reset scale");
!			XmNfontList = button_font;
!			XmNshadowThickness = 0;
!			XmNhighlightThickness = 0;
!			XmNleftAttachment = XmATTACH_WIDGET;
!			XmNleftOffset = widget_spacing;
!			XmNleftWidget = XmPushButtonGadget page_scale_button;
!			XmNrightAttachment = XmATTACH_NONE;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_reset_scale_butto(page_window_structure);
!				};
!			XmNactivateCallback = procedures
!				{
!				page_reset_scale(page_window_structure);
!				};
!			};
!		};
!!Controls stimulation
!	page_stimulator: XmForm 
!		{
!		arguments
!			{
!			XmNborderWidth = 0;
!			XmNleftAttachment = XmATTACH_WIDGET;
!			XmNleftOffset = widget_spacing;
!			XmNleftWidget = XmPushButtonGadget page_calibrate_button;
!			XmNrightAttachment = XmATTACH_NONE;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		controls
!			{
!			XmLabelGadget page_stimulator_label;
!			XmForm page_stimulator_arrows;
!			XmForm page_stimulate;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_stimulator_form(page_window_structure);
!				};
!			};
!		};
!	page_stimulator_label: XmLabelGadget
!		{
!		arguments
!			{
!			XmNlabelString =
!			compound_string("Stimulator:");
!			XmNfontList = button_font;
!			XmNalignment = XmALIGNMENT_END;
!			XmNleftAttachment = XmATTACH_FORM;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_NONE;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_stimulator_label(page_window_structure);
!				};
!			};
!		};
!	page_stimulator_arrows: XmForm 
!		{
!		arguments
!			{
!			XmNborderWidth = 0;
!			XmNleftAttachment = XmATTACH_WIDGET;
!			XmNleftWidget = XmLabelGadget page_stimulator_label;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_NONE;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		controls
!			{
!			XmArrowButtonGadget page_stimulator_down_arrow;
!			XmSeparator
!				{
!				arguments
!					{
!					XmNseparatorType = XmNO_LINE;
!					XmNleftAttachment = XmATTACH_FORM;
!					XmNleftOffset = 0;
!					XmNrightAttachment = XmATTACH_FORM;
!					XmNrightOffset = 0;
!					XmNtopAttachment = XmATTACH_WIDGET;
!					XmNtopOffset = 0;
!					XmNtopWidget = XmArrowButtonGadget page_stimulator_up_arrow;
!					XmNbottomAttachment = XmATTACH_WIDGET;
!					XmNbottomOffset = 0;
!					XmNbottomWidget = XmArrowButtonGadget page_stimulator_down_arrow;
!					};
!				};
!			XmArrowButtonGadget page_stimulator_up_arrow;
!			};
!		};
!	page_stimulator_down_arrow: XmArrowButtonGadget
!		{
!		arguments
!			{
!			XmNarrowDirection = XmARROW_DOWN;
!			XmNleftAttachment = XmATTACH_FORM;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_NONE;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			XmNactivateCallback = procedures
!				{
!				decrement_stimulator(page_window_structure);
!				};
!			};
!		};
!	page_stimulator_up_arrow: XmArrowButtonGadget
!		{
!		arguments
!			{
!			XmNarrowDirection = XmARROW_UP;
!			XmNleftAttachment = XmATTACH_FORM;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_NONE;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			XmNactivateCallback = procedures
!				{
!				increment_stimulator(page_window_structure);
!				};
!			};
!		};
!	page_stimulate: XmForm 
!		{
!		arguments
!			{
!			XmNborderWidth = 0;
!			XmNleftAttachment = XmATTACH_WIDGET;
!			XmNleftWidget = XmForm page_stimulator_arrows;
!			XmNleftOffset = widget_spacing;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		controls
!			{
!			XmToggleButton page_stimulate_checkbox;
!			XmTextField page_stimulate_value;
!			XmForm page_stimulate_arrows;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_stimulate_form(page_window_structure);
!				};
!			};
!		};
!	page_stimulate_checkbox: XmToggleButton
!		{
!		arguments
!			{
!			XmNlabelString = 
!			compound_string("Stimulate:");
!			XmNfontList = button_font;
!			XmNalignment = XmALIGNMENT_END;
!			XmNleftAttachment = XmATTACH_FORM;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_NONE;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_stimulate_checkbo(page_window_structure);
!				};
!			XmNvalueChangedCallback = procedures
!				{
!				start_stop_stimulating_callback(page_window_structure);
!				};
!			};
!		};
!	page_stimulate_value: XmTextField
!		{
!		arguments
!			{
!			XmNcolumns = 4;
!			XmNleftAttachment = XmATTACH_WIDGET;
!			XmNleftWidget = XmToggleButton page_stimulate_checkbox;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_WIDGET;
!			XmNrightWidget = XmForm page_stimulate_arrows;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_stimulate_value(page_window_structure);
!				};
!			XmNactivateCallback = procedures
!				{
!				update_stimulate_device_callbac(page_window_structure);
!				};
!			XmNlosingFocusCallback = procedures
!				{
!				update_stimulate_device_callbac(page_window_structure);
!				};
!			};
!		};
!	page_stimulate_arrows: XmForm 
!		{
!		arguments
!			{
!			XmNborderWidth = 0;
!			XmNleftAttachment = XmATTACH_NONE;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		controls
!			{
!			XmArrowButtonGadget page_stimulate_down_arrow;
!			XmSeparator
!				{
!				arguments
!					{
!					XmNseparatorType = XmNO_LINE;
!					XmNleftAttachment = XmATTACH_FORM;
!					XmNleftOffset = 0;
!					XmNrightAttachment = XmATTACH_FORM;
!					XmNrightOffset = 0;
!					XmNtopAttachment = XmATTACH_WIDGET;
!					XmNtopOffset = 0;
!					XmNtopWidget = XmArrowButtonGadget page_stimulate_up_arrow;
!					XmNbottomAttachment = XmATTACH_WIDGET;
!					XmNbottomOffset = 0;
!					XmNbottomWidget = XmArrowButtonGadget page_stimulate_down_arrow;
!					};
!				};
!			XmArrowButtonGadget page_stimulate_up_arrow;
!			};
!		callbacks
!			{
!			MrmNcreateCallback = procedures
!				{
!				identify_page_stimulate_arrows(page_window_structure);
!				};
!			};
!		};
!	page_stimulate_down_arrow: XmArrowButtonGadget
!		{
!		arguments
!			{
!			XmNarrowDirection = XmARROW_DOWN;
!			XmNleftAttachment = XmATTACH_FORM;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_NONE;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_FORM;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			XmNactivateCallback = procedures
!				{
!				decrement_stimulate(page_window_structure);
!				};
!			};
!		};
!	page_stimulate_up_arrow: XmArrowButtonGadget
!		{
!		arguments
!			{
!			XmNarrowDirection = XmARROW_UP;
!			XmNleftAttachment = XmATTACH_FORM;
!			XmNleftOffset = 0;
!			XmNrightAttachment = XmATTACH_FORM;
!			XmNrightOffset = 0;
!			XmNtopAttachment = XmATTACH_FORM;
!			XmNtopOffset = 0;
!			XmNbottomAttachment = XmATTACH_NONE;
!			XmNbottomOffset = 0;
!			};
!		callbacks
!			{
!			XmNactivateCallback = procedures
!				{
!				increment_stimulate(page_window_structure);
!				};
!			};
!		};

end module;
