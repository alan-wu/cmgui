!*******************************************************************************
!FILE : trace_window.uil
!
!LAST MODIFIED : 25 April 2000
!
!DESCRIPTION :
!The widgets/gadgets for the trace window in the analysis work area.
!???DB.  Have modified to include signal analysis/neural mapping
!===============================================================================
module trace
	names = case_sensitive

procedure
	associate_mapping_analysis;
	destroy_Trace_window;
	identify_event_detection_button;
	set_analysis_event_detection;
	identify_frequency_domain_butto;
	set_analysis_frequency_domain;
	identify_power_spectra_button;
	set_analysis_power_spectra;
	identify_cross_correlation_butt;
	set_analysis_cross_correlation;	
	identify_eimaging_butt;
	set_analysis_eimaging;	
	identify_auto_correlation_butto;
	set_analysis_auto_correlation;
	identify_filtering_button;
	set_analysis_filtering;
	identify_beat_averaging_button;
	set_analysis_beat_averaging;
	identify_trace_analysis_mode_ch;
	identify_trace_analysis_mode_ap;
	trace_analysis_mode_apply;
	identify_trace_close_button;
	close_trace_window;
	identify_trace_paned_win;
	identify_trace_1_area;
	identify_trace_1_inverse_menu;
	identify_trace_1_calculate_menu;
	identify_trace_electrodes_ch;
	id_electrodes_accepted_button;
	set_inv_electrodes_accepted;
	id_electrodes_unrejected_button;
	set_inv_electrodes_unrejected;
	id_electrodes_all_button;
	set_inv_electrodes_all;
	identify_trace_waves_ch;
	identify_p_wave_button;
	set_inverse_p_wave;
	identify_qrs_wave_button;
	set_inverse_qrs_wave;
	identify_t_wave_button;
	set_inverse_t_wave;
	identify_pqrs_wave_button;
	set_inverse_pqrs_wave;
	identify_pt_wave_button;
	set_inverse_pt_wave;
	identify_qrst_wave_button;
	set_inverse_qrst_wave;
	identify_pqrst_wave_button;
	set_inverse_pqrst_wave;
	identify_trace_pot_act_ch;
	identify_pot_button;
	set_inverse_potential;
	identify_act_button;
	set_inverse_activation;
	id_trace_inverse_load_butt;	
	load_inverse;
	id_trace_calculate_inverse_butt;
	calculate_inverse;
	id_trace_inverse_improve_butt;
	improve_inverse;
	id_trace_inverse_forward_butt;
	forward_inverse;
	identify_trace_enlarge_menu;
	identify_trace_enlarge_detectio;
	identify_detection_interval_but;
	set_detection_interval;
	identify_detection_level_button;
	set_detection_level;
	identify_detection_threshold_bu;
	set_detection_threshold;
	identify_trace_enlarge_objectiv;
	identify_objective_absolute_but;
	set_objective_absolute_slope;
	identify_objective_positive_but;
	set_objective_positive_slope;
	identify_objective_negative_but;
	set_objective_negative_slope;
	identify_objective_value_button;
	set_objective_value;
	identify_trace_enlarge_calculat;
	calculate_all_event_markers;
	identify_trace_enlarge_datum_ch;
	identify_datum_automatic_button;
	set_datum_automatic;
	identify_datum_fixed_button;
	set_datum_fixed;
	identify_trace_enlarge_events_f;
	identify_trace_enlarge_events_d;
	decrement_number_of_events;
	identify_trace_enlarge_events_l;
	identify_trace_enlarge_events_u;
	increment_number_of_events;
	identify_trace_enlarge_level_va;
	id_trace_average_width_txt;
	id_trace_average_width;
	change_average_width;
	identify_trace_enlarge_thresh_s;
	change_threshold;
	identify_trace_enlarge_thresh_l;
	identify_trace_enlarge_separ_sc;
	change_minimum_separation;
	identify_trace_enlarge_separ_la;
	identify_trace_enlarge_all_curr;
	identify_trace_enlarge_all_butt;
	set_calculate_all;
	identify_trace_enlarge_current;
	set_calculate_current;
	identify_trace_correlation_1_me;
	identify_trace_correlation_1_to;
	toggle_correlation_signal_1_inp;
	id_trace_beat_averaging_1_menu;
	identify_trace_beat_averaging_f;
	identify_trace_beat_averaging_d;
	identify_trace_beat_averaging_l;
	identify_trace_beat_averaging_u;
	identify_trace_beat_averaging_a;
	trace_align_beats_to_events;
	identify_trace_1_drawing_area;
	expose_trace_1_drawing_area;
	resize_trace_1_drawing_area;
	select_trace_1_drawing_area;
	identify_trace_2_area;	
	id_trace_calculate_apply_butt;
	calculate_apply;
	identify_calculate_int_rank_ch;
	id_calculate_intervals_butt;
	calculate_intervals;
	id_calculate_rank_cutoff_butt;
	calculate_rank_cutoff;
	id_calculate_rms_current_ch;
	id_calculate_rms_sig_butt;
	calculate_rms_signal;
	id_calculate_curr_sig_butt;
	calculate_current_signal;
	id_calculate_rms_curr_sig_butt;
	calculate_rms_current_signal;
	id_trace_calculate_butt;
	calculate_calculate;
	identify_trace_cutoff_value;
	change_cutoff_value;
	identify_trace_correlation_2_me;
	identify_trace_correlation_2_to;
	toggle_correlation_signal_2_inp;	
	identify_trace_2_drawing_area;
	expose_trace_2_drawing_area;
	resize_trace_2_drawing_area;
	select_trace_2_drawing_area;
	identify_trace_3_area;
	id_trace_3_interval_menu;
	id_trace_times_button;
	trace_times;
	identify_trace_edit_menu;
	identify_trace_edit_previous_bu;
!OLD_CODE
!	identify_trace_edit_previous_ac;
	analysis_previous_event;
	identify_trace_edit_next_button;
!OLD_CODE
!	identify_trace_edit_next_accele;
	analysis_next_event;
	identify_trace_edit_accept_butt;
!OLD_CODE
!	identify_trace_edit_accept_acce;
	analysis_accept_event;
	identify_trace_edit_reject_butt;
!OLD_CODE
!	identify_trace_edit_reject_acce;
	analysis_reject_event;
	identify_trace_edit_order_choic;
	identify_edit_order_device_butt;
	set_edit_order_device;
	identify_edit_order_beat_button;
	set_edit_order_beat;
	identify_trace_edit_objective_t;
	change_edit_objective_toggle;
	identify_trace_frequency_menu;
	identify_trace_frequency_choice;
	identify_amplitude_phase_button;
	set_frequency_amplitude_phase;
	identify_real_imaginary_button;
	set_frequency_real_imaginary;
	identify_time_window_hamming_bu;
	set_time_window_hamming;
	identify_time_window_parzen_but;
	set_time_window_parzen;
	identify_time_window_square_but;
	set_time_window_square;
	identify_time_window_welch_butt;
	set_time_window_welch;
	identify_trace_time_window_choi;
	identify_trace_power_spectra_me;
	identify_trace_power_spectra_la;
	identify_trace_power_min_f_scro;
	change_power_frequency_range;
	identify_trace_power_min_f_valu;
	identify_trace_power_max_f_scro;
	identify_trace_power_max_f_valu;
	identify_trace_correlation_menu;
	identify_trace_correlation_labe;
	identify_trace_filtering_menu;
	identify_trace_filtering_label;
	identify_trace_filtering_high_s;
	change_filtering;
	identify_trace_filtering_high_v;
	identify_trace_filtering_low_sc;
	identify_trace_filtering_low_va;
	id_trace_filtering_notch_toggle;
	id_trace_filtering_notch_value;
	id_trace_beat_averaging_3_menu;
	id_trace_beat_averaging_baselin;
	change_beat_averaging;
	id_trace_beat_averaging_toggle;
	id_trace_beat_averaging_overlay;
	trace_overlay_beats;
	identify_trace_3_drawing_area;
	expose_trace_3_drawing_area;
	resize_trace_3_drawing_area;
	select_trace_3_drawing_area;

identifier
	widget_spacing;
	identifying_colour;
	trace_window_structure;
	analysis_work_area_structure;
	system_window_structure;
	! Fonts
	button_font;
	heading_font;
	list_font;
	menu_font;
	normal_font;
	normal_non_proportional_font;
	small_font;

object
	trace_window: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNbackground = identifying_colour;
			XmNdialogTitle = "Signal";
			};
		controls
			{
			XmForm trace_menu;
			XmPanedWindow trace_paned_window;
			};
		callbacks
			{
			XmNfocusCallback = procedures
				{
				associate_mapping_analysis(system_window_structure);
				};
			XmNdestroyCallback = procedures
				{
				destroy_Trace_window(trace_window_structure);
				};
			};
		};
	trace_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmOptionMenu trace_analysis_mode_choice;
			XmPushButtonGadget trace_analysis_mode_apply_butto;
			XmForm trace_average_width;
			XmPushButtonGadget trace_close_button;
			};
		};
	trace_analysis_mode_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget event_detection_button;
					XmPushButtonGadget frequency_domain_button;
					XmPushButtonGadget power_spectra_button;
					XmPushButtonGadget cross_correlation_button;
					XmPushButtonGadget auto_correlation_button;
					XmPushButtonGadget filtering_button;
					XmPushButtonGadget beat_averaging_button;
					XmPushButtonGadget eimaging_button;
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_analysis_mode_ch(trace_window_structure);
				};
			};
		};
	event_detection_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Event detection");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_event_detection_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_event_detection(trace_window_structure);
				};
			};
		};
	frequency_domain_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Frequency domain");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_frequency_domain_butto(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_frequency_domain(trace_window_structure);
				};
			};
		};
	power_spectra_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Power spectra");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_power_spectra_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_power_spectra(trace_window_structure);
				};
			};
		};
	cross_correlation_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Cross correlation");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_cross_correlation_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_cross_correlation(trace_window_structure);
				};
			};
		};
	eimaging_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Electrical Imaging");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_eimaging_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_eimaging(trace_window_structure);
				};
			};
		};
	auto_correlation_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Auto correlation");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_auto_correlation_butto(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_auto_correlation(trace_window_structure);
				};
			};
		};
	filtering_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Filtering");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_filtering_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_filtering(trace_window_structure);
				};
			};
		};
	beat_averaging_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Beat averaging");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_beat_averaging_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_analysis_beat_averaging(trace_window_structure);
!				Make beat averaging always use EDA_INTERVAL
				set_detection_interval(analysis_work_area_structure);
				};
			};
		};
	trace_analysis_mode_apply_butto: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Apply");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmOptionMenu trace_analysis_mode_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_analysis_mode_ap(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				trace_analysis_mode_apply(analysis_work_area_structure);
				};
			};
		};	
	trace_average_width: XmForm 
		{
		arguments
			{
			XmNborderWidth = 0;		
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButtonGadget trace_analysis_mode_apply_butto;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_NONE;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmSeparator trace_average_width_sep;
			XmLabel trace_average_width_label;
			XmTextField trace_average_width_txt;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_average_width(trace_window_structure);
				};
			};
		};
	trace_average_width_sep : XmSeparator
		{
		arguments
			{
			XmNorientation = XmVERTICAL;
			XmNleftAttachment = XmATTACH_FORM;		
			XmNleftOffset = 5;
			XmNrightAttachment = XmATTACH_NONE;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNbottomAttachment = XmATTACH_FORM;
			};
		};
	trace_average_width_label: XmLabel
		{
		arguments
			{
			XmNlabelString =
				compound_string("Average width");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmSeparator trace_average_width_sep;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};		
		};
	trace_average_width_txt: XmTextField
		{
		arguments
			{
			XmNcolumns = 8;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmLabel trace_average_width_label;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNmarginHeight = 5;
			XmNhighlightThickness = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_average_width_txt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_average_width(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_average_width(trace_window_structure);
				};
			};
		};
	trace_close_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Close");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_NONE;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_close_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				close_trace_window(trace_window_structure);
				};
			};
		};
	trace_paned_window: XmPanedWindow
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNmarginWidth = 0;
			XmNmarginHeight = 0;
			XmNspacing = widget_spacing;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = XmForm trace_menu;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;			
			};
		controls
			{
			XmForm trace_1_area;
			XmForm trace_2_area;
			XmForm trace_3_area;
			};		
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_paned_win(trace_window_structure);
				};
			};
		};
	trace_1_area: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNbackground = identifying_colour;		
			};
		controls
			{
			XmForm trace_1_inverse_menu;
			XmForm trace_1_calculate_menu;
			XmForm trace_enlarge_menu;
			XmForm trace_correlation_1_menu;
			XmForm trace_beat_averaging_1_menu;				
			XmDrawingArea trace_1_drawing_area;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_1_area(trace_window_structure);
				};
			};
		};
	trace_1_calculate_menu: XmForm 
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;	
			XmNtopWidget = XmForm trace_1_inverse_menu;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = widget_spacing;
			};
		controls
			{				
			XmPushButton trace_apply_button;
			XmOptionMenu trace_int_rank_choice;
			XmOptionMenu trace_RMS_current_choice;
			XmPushButton trace_calculate_button;
			XmLabelGadget trace_cutoff_value_label;
			XmTextField trace_cutoff_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_1_calculate_menu(trace_window_structure);
				};
			};
		};
	trace_apply_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Apply");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;	
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;		
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_calculate_apply_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_apply(analysis_work_area_structure);
				};
			};
		};
		trace_int_rank_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;	
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton trace_apply_button;
			XmNleftOffset = widget_spacing;		
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget intervals_button;
					XmPushButtonGadget rank_cutoff_button;							
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_calculate_int_rank_ch(trace_window_structure);
				};
			};
		};
	intervals_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Intervals");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_calculate_intervals_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_intervals(trace_window_structure);
				};
			};
		};
	rank_cutoff_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Rank cutoff");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_calculate_rank_cutoff_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_rank_cutoff(trace_window_structure);
				};
			};
		};
	trace_RMS_current_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;	
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =  XmOptionMenu trace_int_rank_choice;
			XmNleftOffset = widget_spacing;		
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{	
					XmPushButtonGadget current_signal_button;	
					XmPushButtonGadget rms_signal_button;
					XmPushButtonGadget rms_curr_signal_button;
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_calculate_rms_current_ch(trace_window_structure);
				};
			};
		};
	rms_signal_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("RMS signal");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_calculate_rms_sig_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_rms_signal(trace_window_structure);
				};
			};
		};
	current_signal_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Current signal");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_calculate_curr_sig_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_current_signal(trace_window_structure);
				};
			};
		};
	rms_curr_signal_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("RMS and Current signal");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_calculate_rms_curr_sig_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_rms_current_signal(trace_window_structure);
				};
			};
		};
	trace_calculate_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Calculate");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;	
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =  XmOptionMenu trace_RMS_current_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_calculate_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_calculate(analysis_work_area_structure);
				};
			};
		};
	trace_cutoff_value_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Cut off value");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =  XmPushButton trace_calculate_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	trace_cutoff_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_cutoff_value_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;	
			XmNmarginHeight = 5;
			XmNhighlightThickness = 0;
			XmNvalue ="88";
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_cutoff_value(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_cutoff_value(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_cutoff_value(trace_window_structure);
				};
			};
		};
	trace_1_inverse_menu: XmForm 
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			XmNbottomOffset = widget_spacing;
			};
		controls
			{		
			XmOptionMenu trace_electrodes_choice;
			XmOptionMenu trace_waves_choice;
			XmOptionMenu trace_pot_act_choice;
			XmPushButton trace_inverse_load_button;
			XmPushButton trace_calculate_inverse_button;
			XmPushButton trace_improve_inverse_button;
			XmPushButton trace_forward_inverse_button;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_1_inverse_menu(trace_window_structure);
				};
			};
		};
	trace_electrodes_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{	
					XmPushButtonGadget electrodes_unrejected_button;
					XmPushButtonGadget electrodes_accepted_button;				
					XmPushButtonGadget electrodes_all_button;				
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_electrodes_ch(trace_window_structure);
				};
			};
		};
	electrodes_accepted_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Accepted Electrodes");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_electrodes_accepted_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inv_electrodes_accepted(trace_window_structure);
				};
			};
		};
	electrodes_unrejected_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Unrejected Electrodes");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_electrodes_unrejected_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inv_electrodes_unrejected(trace_window_structure);
				};
			};
		};
	electrodes_all_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("All Electrodes");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_electrodes_all_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inv_electrodes_all(trace_window_structure);
				};
			};
		};
	trace_waves_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;	
			XmNleftWidget = XmOptionMenu trace_electrodes_choice;
			XmNleftOffset = widget_spacing;		
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget p_wave_button;	
					XmPushButtonGadget qrs_wave_button;
					XmPushButtonGadget t_wave_button;
					XmPushButtonGadget pqrs_wave_button;
					XmPushButtonGadget pt_wave_button;
					XmPushButtonGadget qrst_wave_button;
					XmPushButtonGadget pqrst_wave_button;
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_waves_ch(trace_window_structure);
				};
			};
		};
	p_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("P wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_p_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_p_wave(trace_window_structure);
				};
			};
		};
	qrs_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("QRS wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_qrs_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_qrs_wave(trace_window_structure);
				};
			};
		};
	t_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("T wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_t_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_t_wave(trace_window_structure);
				};
			};
		};
	pqrs_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("PQRS wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_pqrs_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_pqrs_wave(trace_window_structure);
				};
			};
		};
	pt_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("PT wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_pt_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_pt_wave(trace_window_structure);
				};
			};
		};
	qrst_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("QRST wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_qrst_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_qrst_wave(trace_window_structure);
				};
			};
		};
	pqrst_wave_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("PQRST wave");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_pqrst_wave_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_pqrst_wave(trace_window_structure);
				};
			};
		};
	trace_pot_act_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;	
			XmNleftWidget = XmOptionMenu trace_waves_choice;
			XmNleftOffset = widget_spacing;		
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget potential_button;	
					XmPushButtonGadget activation_button;	
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_pot_act_ch(trace_window_structure);
				};
			};
		};
	potential_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Potential");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_pot_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_potential(trace_window_structure);
				};
			};
		};
	activation_button: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Activation");
			XmNfontList = button_font;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_act_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				set_inverse_activation(trace_window_structure);
				};
			};
		};
	trace_inverse_load_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Load");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =	XmOptionMenu trace_pot_act_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_inverse_load_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				load_inverse(analysis_work_area_structure);
				};
			};
		};
	trace_calculate_inverse_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Inverse");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =	XmPushButton trace_inverse_load_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_calculate_inverse_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_inverse(analysis_work_area_structure);
				};
			};
		};
	trace_improve_inverse_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Improve");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =	XmPushButton trace_calculate_inverse_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_inverse_improve_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				improve_inverse(analysis_work_area_structure);
				};
			};
		};
	trace_forward_inverse_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Forward");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget =	XmPushButton trace_improve_inverse_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_inverse_forward_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				forward_inverse(analysis_work_area_structure);
				};
			};
		};
	trace_enlarge_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmOptionMenu trace_enlarge_detection_choice;
			XmOptionMenu trace_enlarge_objective_choice;
			XmPushButton trace_enlarge_calculate_button;
			XmOptionMenu trace_enlarge_datum_choice;
			XmForm trace_enlarge_events_number;
			XmTextField trace_enlarge_level_value;
			XmScrollBar trace_enlarge_threshold_scroll;
			XmLabel trace_enlarge_threshold_label;
			XmScrollBar trace_enlarge_separation_scroll;
			XmLabel trace_enlarge_separation_label;
			XmOptionMenu trace_enlarge_all_current_choic;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_menu(trace_window_structure);
				};
			};
		};
	trace_enlarge_detection_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Interval");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_detection_interval_but(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_detection_interval(analysis_work_area_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Level");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_detection_level_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_detection_level(analysis_work_area_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Threshold");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_detection_threshold_bu(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_detection_threshold(analysis_work_area_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_detectio(trace_window_structure);
				};
			};
		};
	trace_enlarge_objective_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmOptionMenu trace_enlarge_detection_choice;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Absolute slope");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_objective_absolute_but(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_objective_absolute_slope(analysis_work_area_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Positive slope");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_objective_positive_but(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_objective_positive_slope(analysis_work_area_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Negative slope");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_objective_negative_but(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_objective_negative_slope(analysis_work_area_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Value");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_objective_value_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_objective_value(analysis_work_area_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_objectiv(trace_window_structure);
				};
			};
		};
	trace_enlarge_calculate_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Calculate");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_calculat(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				calculate_all_event_markers(analysis_work_area_structure);
				};
			};
		};
	trace_enlarge_datum_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Automatic datum");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_datum_automatic_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_datum_automatic(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Fixed datum");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_datum_fixed_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_datum_fixed(trace_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_datum_ch(trace_window_structure);
				};
			};
		};
	trace_enlarge_events_number: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmOptionMenu trace_enlarge_objective_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		controls
			{
			XmArrowButtonGadget trace_enlarge_events_down;
			XmLabelGadget trace_enlarge_events_label;
			XmArrowButtonGadget trace_enlarge_events_up;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_events_f(trace_window_structure);
				};
			};
		};
	trace_enlarge_events_down: XmArrowButtonGadget
		{
		arguments
			{
			XmNarrowDirection = XmARROW_DOWN;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_events_d(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				decrement_number_of_events(analysis_work_area_structure);
				};
			};
		};
	trace_enlarge_events_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("88");
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmArrowButtonGadget trace_enlarge_events_down;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_events_l(trace_window_structure);
				};
			};
		};
	trace_enlarge_events_up: XmArrowButtonGadget
		{
		arguments
			{
			XmNarrowDirection = XmARROW_UP;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_enlarge_events_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_events_u(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				increment_number_of_events(analysis_work_area_structure);
				};
			};
		};
	trace_enlarge_level_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 8;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftOffset = widget_spacing;
			XmNleftWidget = XmOptionMenu trace_enlarge_detection_choice;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			XmNmarginHeight = 5;
			XmNhighlightThickness = 0;
!			XmNmappedWhenManaged = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_level_va(trace_window_structure);
				};
			};
		};
	trace_enlarge_threshold_scroll: XmScrollBar
		{
		arguments
			{	
			XmNwidth = 100;
			XmNminimum = 0;
			XmNsliderSize = 10;
			XmNmaximum = 110;
			XmNorientation = XmHORIZONTAL;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmOptionMenu trace_enlarge_objective_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_thresh_s(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_threshold(trace_window_structure);
				};
			};
		};
	trace_enlarge_threshold_label: XmLabel
		{
		arguments
			{
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmScrollBar trace_enlarge_threshold_scroll;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_thresh_l(trace_window_structure);
				};
			};
		};
	trace_enlarge_separation_scroll: XmScrollBar
		{
		arguments
			{	
			XmNwidth = 100;
			XmNminimum = 1;
			XmNsliderSize = 50;
			XmNmaximum = 550;
			XmNorientation = XmHORIZONTAL;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabel trace_enlarge_threshold_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_separ_sc(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_minimum_separation(trace_window_structure);
				};
			};
		};
	trace_enlarge_separation_label: XmLabel
		{
		arguments
			{
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmScrollBar trace_enlarge_separation_scroll;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_separ_la(trace_window_structure);
				};
			};
		};
	trace_enlarge_all_current_choic: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNspacing = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton trace_enlarge_calculate_button;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
!			XmNmappedWhenManaged = false;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("all");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_trace_enlarge_all_butt(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_calculate_all(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("current");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_trace_enlarge_current(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_calculate_current(trace_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_enlarge_all_curr(trace_window_structure);
				};
			};
		};
	trace_correlation_1_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmToggleButtonGadget trace_correlation_1_toggle;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_correlation_1_me(trace_window_structure);
				};
			};
		};
	trace_correlation_1_toggle: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Signal 1");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_correlation_1_to(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				toggle_correlation_signal_1_inp(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_1_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmForm trace_beat_averaging_number;
			XmPushButtonGadget trace_beat_averaging_align_butt;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_beat_averaging_1_menu(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_number: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmArrowButtonGadget trace_beat_averaging_down;
			XmLabelGadget trace_beat_averaging_label;
			XmArrowButtonGadget trace_beat_averaging_up;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_beat_averaging_f(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_down: XmArrowButtonGadget
		{
		arguments
			{
			XmNarrowDirection = XmARROW_DOWN;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_beat_averaging_d(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				decrement_number_of_events(analysis_work_area_structure);
				};
			};
		};
	trace_beat_averaging_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("88");
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmArrowButtonGadget trace_beat_averaging_down;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_beat_averaging_l(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_up: XmArrowButtonGadget
		{
		arguments
			{
			XmNarrowDirection = XmARROW_UP;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_beat_averaging_label;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = 0;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_beat_averaging_u(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				increment_number_of_events(analysis_work_area_structure);
				};
			};
		};
	trace_beat_averaging_align_butt: XmPushButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Align");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmForm trace_beat_averaging_number;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_beat_averaging_a(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				trace_align_beats_to_events(trace_window_structure);
				};
			};
		};
	trace_1_drawing_area: XmDrawingArea
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_1_drawing_area(trace_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_trace_1_drawing_area(trace_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_trace_1_drawing_area(trace_window_structure);
				};
			XmNinputCallback = procedures
				{
				select_trace_1_drawing_area(analysis_work_area_structure);
				};
			};
		};
	trace_2_area: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNbackground = identifying_colour;
			};
		controls
			{
			XmForm trace_correlation_2_menu;
			XmDrawingArea trace_2_drawing_area;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_2_area(trace_window_structure);
				};
			};
		};
	trace_correlation_2_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmToggleButtonGadget trace_correlation_2_toggle;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_correlation_2_me(trace_window_structure);
				};
			};
		};
	trace_correlation_2_toggle: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Signal 2");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_correlation_2_to(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				toggle_correlation_signal_2_inp(trace_window_structure);
				};
			};
		};
	trace_2_drawing_area: XmDrawingArea
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopWidget = XmForm trace_correlation_2_menu;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_2_drawing_area(trace_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_trace_2_drawing_area(trace_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_trace_2_drawing_area(trace_window_structure);
				};
			XmNinputCallback = procedures
				{
				select_trace_2_drawing_area(analysis_work_area_structure);
				};
			};
		};
	trace_3_area: XmForm
		{
		arguments
			{
			XmNborderWidth = 0;
			XmNbackground = identifying_colour;	
			};
		controls
			{
			XmForm trace_edit_menu;
			XmForm trace_frequency_domain_menu;
			XmForm trace_power_spectra_menu;
			XmForm trace_correlation_menu;
			XmForm trace_filtering_menu;
			XmForm trace_beat_averaging_3_menu;
			XmForm trace_3_interval_menu;
			XmDrawingArea trace_3_drawing_area;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_3_area(trace_window_structure);
				};
			};
		};
	trace_3_interval_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmPushButton trace_times_button;		
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_3_interval_menu(trace_window_structure);
				};
			};
		};
	trace_times_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Times");
			XmNfontList = button_font;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;	
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;		
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_times_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				trace_times(analysis_work_area_structure);
				};
			};
		};
	trace_edit_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmPushButton trace_edit_previous_button;
			XmPushButton trace_edit_next_button;
			XmPushButton trace_edit_accept_button;
			XmPushButton trace_edit_reject_button;
			XmOptionMenu trace_edit_order_choice;
			XmToggleButtonGadget trace_edit_objective_toggle;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_menu(trace_window_structure);
				};
			};
		};
	trace_edit_previous_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Previous");
			XmNfontList = button_font;
			XmNmnemonic = 80;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_previous_bu(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_previous_event(analysis_work_area_structure);
				};
			};
		};
	trace_edit_next_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Next");
			XmNfontList = button_font;
			XmNmnemonic = 78;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton trace_edit_previous_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_next_button(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_next_event(analysis_work_area_structure);
				};
			};
		};
	trace_edit_accept_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Accept");
			XmNfontList = button_font;
			XmNmnemonic = 65;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton trace_edit_next_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_accept_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_accept_event(analysis_work_area_structure);
				};
			};
		};
	trace_edit_reject_button: XmPushButton
		{
		arguments
			{
			XmNlabelString =
			compound_string("Reject");
			XmNfontList = button_font;
			XmNmnemonic = 82;
			XmNsensitive = false;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton trace_edit_accept_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_reject_butt(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				analysis_reject_event(analysis_work_area_structure);
				};
			};
		};
	trace_edit_order_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmPushButton trace_edit_reject_button;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Device order");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_edit_order_device_butt(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_edit_order_device(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Beat order");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_edit_order_beat_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_edit_order_beat(trace_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_order_choic(trace_window_structure);
				};
			};
		};
	trace_edit_objective_toggle: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Objective");
			XmNfontList = button_font;
			XmNsensitive = true;
			XmNshadowThickness = 0;
			XmNhighlightThickness = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmOptionMenu trace_edit_order_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_edit_objective_t(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_edit_objective_toggle(trace_window_structure);
				};
			};
		};
	trace_frequency_domain_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmOptionMenu trace_frequency_domain_choice;
			XmOptionMenu trace_time_domain_window_choice;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_frequency_menu(trace_window_structure);
				};
			};
		};
	trace_frequency_domain_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Amplitude/Phase");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_amplitude_phase_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_frequency_amplitude_phase(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Real/Imaginary");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_real_imaginary_button(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_frequency_real_imaginary(trace_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_frequency_choice(trace_window_structure);
				};
			};
		};
	trace_time_domain_window_choice: XmOptionMenu
		{
		arguments
			{
			XmNmarginHeight = 0;
			XmNmarginWidth = 0;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmOptionMenu trace_frequency_domain_choice;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		controls
			{
			XmPulldownMenu
				{
				arguments
					{
					XmNborderWidth = 1;
					};
				controls
					{
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Hamming window");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_time_window_hamming_bu(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_time_window_hamming(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Parzen window");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_time_window_parzen_but(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_time_window_parzen(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Square window");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_time_window_square_but(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_time_window_square(trace_window_structure);
								};
							};
						};
					XmPushButtonGadget
						{
						arguments
							{
							XmNlabelString =
							compound_string("Welch window");
							XmNfontList = button_font;
							};
						callbacks
							{
							MrmNcreateCallback = procedures
								{
								identify_time_window_welch_butt(trace_window_structure);
								};
							XmNactivateCallback = procedures
								{
								set_time_window_welch(trace_window_structure);
								};
							};
						};
					};
				};
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_time_window_choi(trace_window_structure);
				};
			};
		};
	trace_power_spectra_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmLabelGadget trace_power_spectra_label;
			XmLabelGadget trace_power_min_f_label;
			XmScrollBar trace_power_min_f_scroll;
			XmTextField trace_power_min_f_value;
			XmLabelGadget trace_power_max_f_label;
			XmScrollBar trace_power_max_f_scroll;
			XmTextField trace_power_max_f_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_power_spectra_me(trace_window_structure);
				};
			};
		};
	trace_power_spectra_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Power spectrum");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_power_spectra_la(trace_window_structure);
				};
			};
		};
	trace_power_min_f_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Minimum (Hz)");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_power_spectra_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	trace_power_min_f_scroll: XmScrollBar
		{
		arguments
			{
			XmNminimum = 0;
			XmNsliderSize = 10;
			XmNmaximum = 110;
			XmNorientation = XmHORIZONTAL;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_power_min_f_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_power_min_f_scro(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_power_frequency_range(trace_window_structure);
				};
			};
		};
	trace_power_min_f_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmScrollBar trace_power_min_f_scroll;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_power_min_f_valu(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_power_frequency_range(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_power_frequency_range(trace_window_structure);
				};
			};
		};
	trace_power_max_f_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Maximum (Hz)");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmTextField trace_power_min_f_value;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	trace_power_max_f_scroll: XmScrollBar
		{
		arguments
			{
			XmNminimum = 0;
			XmNsliderSize = 10;
			XmNmaximum = 110;
			XmNorientation = XmHORIZONTAL;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_power_max_f_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_power_max_f_scro(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_power_frequency_range(trace_window_structure);
				};
			};
		};
	trace_power_max_f_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmScrollBar trace_power_max_f_scroll;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_power_max_f_valu(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_power_frequency_range(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_power_frequency_range(trace_window_structure);
				};
			};
		};
	trace_correlation_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmLabelGadget trace_correlation_label;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_correlation_menu(trace_window_structure);
				};
			};
		};
	trace_correlation_label: XmLabelGadget
		{
		arguments
			{
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_correlation_labe(trace_window_structure);
				};
			};
		};
	trace_filtering_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmLabelGadget trace_filtering_label;
			XmLabelGadget trace_filtering_high_label;
			XmScrollBar trace_filtering_high_scroll;
			XmTextField trace_filtering_high_value;
			XmLabelGadget trace_filtering_low_label;
			XmScrollBar trace_filtering_low_scroll;
			XmTextField trace_filtering_low_value;
			XmToggleButtonGadget trace_filtering_notch_toggle;
			XmTextField trace_filtering_notch_value;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_filtering_menu(trace_window_structure);
				};
			};
		};
	trace_filtering_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Filtered");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_filtering_label(trace_window_structure);
				};
			};
		};
	trace_filtering_high_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("High pass");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_filtering_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	trace_filtering_high_scroll: XmScrollBar
		{
		arguments
			{
			XmNminimum = 0;
			XmNsliderSize = 10;
			XmNmaximum = 110;
			XmNorientation = XmHORIZONTAL;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_filtering_high_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_filtering_high_s(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			};
		};
	trace_filtering_high_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmScrollBar trace_filtering_high_scroll;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_filtering_high_v(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			};
		};
	trace_filtering_low_label: XmLabelGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Low pass");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmTextField trace_filtering_high_value;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		};
	trace_filtering_low_scroll: XmScrollBar
		{
		arguments
			{
			XmNminimum = 0;
			XmNsliderSize = 10;
			XmNmaximum = 110;
			XmNorientation = XmHORIZONTAL;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmLabelGadget trace_filtering_low_label;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_filtering_low_sc(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			};
		};
	trace_filtering_low_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmScrollBar trace_filtering_low_scroll;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_filtering_low_va(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			};
		};
	trace_filtering_notch_toggle: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Notch");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_END;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmTextField trace_filtering_low_value;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_filtering_notch_toggle(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			};
		};
	trace_filtering_notch_value: XmTextField
		{
		arguments
			{
			XmNcolumns = 4;
			XmNfontList = button_font;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmToggleButtonGadget trace_filtering_notch_toggle;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_filtering_notch_value(trace_window_structure);
				};
			XmNactivateCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			XmNlosingFocusCallback = procedures
				{
				change_filtering(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_3_menu: XmForm
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_NONE;
			};
		controls
			{
			XmToggleButtonGadget trace_beat_averaging_baseline_t;
			XmToggleButtonGadget trace_beat_averaging_toggle;
			XmToggleButtonGadget trace_beat_averaging_overlay_to;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_beat_averaging_3_menu(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_baseline_t: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Baseline");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = 0;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_beat_averaging_baselin(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_beat_averaging(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_toggle: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Beat average");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmToggleButtonGadget trace_beat_averaging_baseline_t;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_beat_averaging_toggle(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				change_beat_averaging(trace_window_structure);
				};
			};
		};
	trace_beat_averaging_overlay_to: XmToggleButtonGadget
		{
		arguments
			{
			XmNlabelString =
			compound_string("Overlay");
			XmNfontList = button_font;
			XmNalignment = XmALIGNMENT_BEGINNING;
			XmNleftAttachment = XmATTACH_WIDGET;
			XmNleftWidget = XmToggleButtonGadget trace_beat_averaging_toggle;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_NONE;
			XmNtopAttachment = XmATTACH_FORM;
			XmNtopOffset = 0;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = 0;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				id_trace_beat_averaging_overlay(trace_window_structure);
				};
			XmNvalueChangedCallback = procedures
				{
				trace_overlay_beats(trace_window_structure);
				};
			};
		};
	trace_3_drawing_area: XmDrawingArea
		{
		arguments
			{
			XmNborderWidth = 1;
			XmNleftAttachment = XmATTACH_FORM;
			XmNleftOffset = widget_spacing;
			XmNrightAttachment = XmATTACH_FORM;
			XmNrightOffset = widget_spacing;
			XmNtopAttachment = XmATTACH_WIDGET;
			XmNtopOffset = widget_spacing;
			XmNbottomAttachment = XmATTACH_FORM;
			XmNbottomOffset = widget_spacing;
			};
		callbacks
			{
			MrmNcreateCallback = procedures
				{
				identify_trace_3_drawing_area(trace_window_structure);
				};
			XmNexposeCallback = procedures
				{
				expose_trace_3_drawing_area(trace_window_structure);
				};
			XmNresizeCallback = procedures
				{
				resize_trace_3_drawing_area(trace_window_structure);
				};
			XmNinputCallback = procedures
				{
				select_trace_3_drawing_area(analysis_work_area_structure);
				};
			};
		};
end module;
