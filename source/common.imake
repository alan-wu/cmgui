
all : oscheck
	:
#if defined (CMISS_ROOT_DEFINED)
	if [ -s $(PRODUCT_SOURCE_PATH)/DependMake ] ; then \
	    	if [ -f Makefile ]; then \
			$(MAKE) -f Makefile Target ; \
		else \
			$(MAKE) -f $(PRODUCT_SOURCE_PATH)/Makefile Target ; \
		fi \
	else \
	   if [ -f Makefile ]; then \
			$(MAKE) -f Makefile depend ; \
			$(MAKE) -f Makefile Target ; \
		else \
			$(MAKE) -f $(PRODUCT_SOURCE_PATH)/Makefile depend ; \
			$(MAKE) -f $(PRODUCT_SOURCE_PATH)/Makefile Target ; \
		fi \
	fi
#else /* defined (CMISS_ROOT_DEFINED) */
	if [ -s DependMake ] ; then \
	   $(MAKE) -f Makefile Target ; \
	else \
		$(MAKE) -f Makefile depend ; \
		$(MAKE) -f Makefile Target ; \
	fi
#endif /* defined (CMISS_ROOT_DEFINED) */

/* Can't put / by * or it thinks there is a comment so I have put the *
	into the variable and used that instead */
#define WildAll *
#define WildObj *.ObjSuffix
#define WildMake *.make
#define WildUil *.uil
#define WildUid *.uid
#define WildCpp *.cpp
#define WildCmn *.cmn
#define WildC *.c
#define WildH *.h
#define WildInc *.inc
#define WildF *.f
#define WildMms *.mms
#define WildXbm *.xbm
#define WildRc *.rc
#define WildPx *.px
#define WildEx *.ex*
#define WildF90 *.f90
#define WildPm *.pm
#define WildA *.a

UIDTOUIDH = Uid2uidhTarget
#if defined (IRIX) /* switch OperatingSystem */
#if !defined (O64)
UIL = uil
#else /* !defined (O64) */
UIL = uil64
#endif /* !defined (O64) */
CC = cc -c
CPP = CC -c
FORTRAN = f77 -c
CPREPROCESS = cc -P
/* LINK = cc */
/* Must use C++ linker for XML */
LINK = CC
#if defined (OPTIMISED)
OPTIMISATION_FLAGS = -O
COMPILE_FLAGS = -ansi -pedantic -woff 1521
COMPILE_DEFINES = -DOPTIMISED
STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN = NONE /* Must specify a pattern that doesn't match */
#else /* defined (OPTIMISED) */
OPTIMISATION_FLAGS = -g -mips3
COMPILE_FLAGS = -ansi -fullwarn -pedantic -woff 1521
COMPILE_DEFINES = -DREPORT_GL_ERRORS -DUSE_PARAMETER_ON 
XCOMM STRICT_FLAGS = -diag_error 1042,1174,1185,1196,1409,1551,1552,3201
STRICT_FLAGS = -diag_error 1000-9999
DIGITAL_MEDIA_NON_STRICT_FLAGS = -diag_warning 1429
DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN = three_d_drawing/dm_interface.c | three_d_drawing/movie_extensions.c
#endif /* defined (OPTIMISED) */

#if defined (O64)
TARGET_TYPE_FLAGS = -G0 -64
TARGET_TYPE_DEFINES = -DO64
#else /* defined (O64) */
TARGET_TYPE_FLAGS = -n32
TARGET_TYPE_DEFINES =
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */

UIL = uil
CC = gcc -c
CPP = g++ -c
FORTRAN = g77 -c -fno-second-underscore
CPREPROCESS = gcc -E -P
#if defined (DYNAMIC_GL_LINUX)
LINK = gcc
/* LINK = egcs -shared -L/usr/X11R6/lib -v */
/* LINK = gcc -L/usr/X11R6/lib -v */
#else /* defined (DYNAMIC_GL_LINUX) */
LINK = gcc -static -L/usr/X11R6/lib
/*LINK = g++ --no-demangle -rdynamic -L/usr/X11R6/lib*/
#endif /* defined (DYNAMIC_GL_LINUX) */
#if defined (OPTIMISED)
OPTIMISATION_FLAGS = -O
COMPILE_DEFINES = -DOPTIMISED
COMPILE_FLAGS = 
STRICT_FLAGS = -Werror
DIGITAL_MEDIA_NON_STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN = NONE /* Must specify a pattern that doesn't match */
#else /* defined (OPTIMISED) */
OPTIMISATION_FLAGS = -g
COMPILE_DEFINES = -DREPORT_GL_ERRORS -DUSE_PARAMETER_ON
COMPILE_FLAGS = 
/* A bug with gcc on esp56 stops -Wformat from working */
STRICT_FLAGS = -W -Wall -Wno-parentheses -Wno-switch -Wno-format -Werror
DIGITAL_MEDIA_NON_STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN = NONE /* Must specify a pattern that doesn't match */
TARGET_TYPE_FLAGS =
TARGET_TYPE_DEFINES =
#endif /* defined (OPTIMISED) */
#elif defined(AIX) /* switch OperatingSystem */
UIL = uil
CC = xlc -c
CPP = xlc -qnolm -c
FORTRAN = f77 -c
CPREPROCESS = 
LINK = xlc
#if defined (OPTIMISED)
OPTIMISATION_FLAGS = -O2 -qmaxmem=-1
#else /* defined (OPTIMISED) */
OPTIMISATION_FLAGS = -g
#endif /* defined (OPTIMISED) */
COMPILE_FLAGS = 
COMPILE_DEFINES = 
STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN = NONE /* Must specify a pattern that doesn't match */
#if defined (O64)
TARGET_TYPE_FLAGS =  -q64
TARGET_TYPE_DEFINES = -DO64
#else /* defined (O64) */
TARGET_TYPE_FLAGS = -q32
TARGET_TYPE_DEFINES =
#endif /* defined (O64) */
#if defined (O64)
AR_FLAGS = -X64
#endif /* defined (O64) */
#elif defined(WIN32) /* switch OperatingSystem */
UIL = uil
CC = gcc -c -mno-cygwin -fnative-struct
CPP = gcc -c
FORTRAN = f77 -c
CPREPROCESS = 
#if defined (CONSOLE) || defined (GTK_USER_INTERFACE)
LINK = gcc -mno-cygwin -fnative-struct -mconsole
#else /* defined (CONSOLE) || defined (GTK_USER_INTERFACE) */
LINK = gcc -mwindows -mno-cygwin -fnative-struct
#endif /* defined (CONSOLE) */
#if defined (OPTIMISED)
OPTIMISATION_FLAGS = -O2
#else /* defined (OPTIMISED) */
OPTIMISATION_FLAGS = -g
#endif /* defined (OPTIMISED) */
COMPILE_FLAGS = 
COMPILE_DEFINES = 
STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS = 
DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN = NONE /* Must specify a pattern that doesn't match */
TARGET_TYPE_FLAGS =
TARGET_TYPE_DEFINES =
#endif /* switch OperatingSystem */

/* DSO Link command */
DSO_LINK = $(LINK) $(ALL_FLAGS) -shared

.MAKEOPTS : -r

.SUFFIXES :
#if defined (WIN32)
.SUFFIXES : .ObjSuffix .c .cpp .f .uil .uidh .res .rc
#else /* defined (WIN32) */
.SUFFIXES : .ObjSuffix .c .cpp .f .uil .uidh
#endif /* defined (WIN32) */

.c.ObjSuffix: 
	@if [ ! -d $(OBJECT_PATH)/$(*D) ]; then \
		mkdir -p $(OBJECT_PATH)/$(*D); \
	fi
#if defined (CMISS_ROOT_DEFINED)
	@if [ -f $*.c ]; then \
	   case $*.c in  \
	      $(DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN) ) \
	         set -x ; $(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(DIGITAL_MEDIA_NON_STRICT_FLAGS) $*.c;; \
	      * ) \
	         set -x ; $(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $*.c;; \
	   esac ; \
	else \
	   case $*.c in  \
	      $(DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN) ) \
	         set -x ; $(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(DIGITAL_MEDIA_NON_STRICT_FLAGS) $(PRODUCT_SOURCE_PATH)/$*.c;; \
	      * ) \
      		set -x ; $(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(PRODUCT_SOURCE_PATH)/$*.c;; \
	   esac ; \
	fi
#else /* defined (CMISS_ROOT_DEFINED) */
	@case $*.c in  \
	   $(DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN) ) \
	      set -x ; $(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(DIGITAL_MEDIA_NON_STRICT_FLAGS) $*.c;; \
	   * ) \
	      set -x ; $(CC) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $*.c;; \
	esac ;
#endif /* defined (CMISS_ROOT_DEFINED) */

.cpp.ObjSuffix:
	@if [ ! -d $(OBJECT_PATH)/$(*D) ]; then \
		mkdir -p $(OBJECT_PATH)/$(*D); \
	fi
#if defined (CMISS_ROOT_DEFINED)
	@if [ -f $*.cpp ]; then \
	   case $*.cpp in  \
	      $(DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN) ) \
   		   set -x ; $(CPP) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(DIGITAL_MEDIA_NON_STRICT_FLAGS) $*.cpp;; \
	      * ) \
	   	   set -x ; $(CPP) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $*.cpp;; \
	   esac ; \
	else \
	   case $*.cpp in  \
	      $(DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN) ) \
	        set -x ; $(CPP) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(DIGITAL_MEDIA_NON_STRICT_FLAGS) $(PRODUCT_SOURCE_PATH)/$*.cpp;; \
	      * ) \
	        set -x ; $(CPP) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(PRODUCT_SOURCE_PATH)/$*.cpp;; \
	   esac ; \
	fi
#else /* defined (CMISS_ROOT_DEFINED) */
	case $*.cpp in  \
		$(DIGITAL_MEDIA_NON_STRICT_FLAGS_PATTERN) ) \
	  set -x ; $(CPP) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $(DIGITAL_MEDIA_NON_STRICT_FLAGS) $*.cpp;; \
	  * ) \
	  set -x ; $(CPP) -o $(OBJECT_PATH)/$*.ObjSuffix $(ALL_FLAGS) $(STRICT_FLAGS) $*.cpp;; \
	esac ;
#endif /* defined (CMISS_ROOT_DEFINED) */

.f.ObjSuffix: 
	@if [ ! -d $(OBJECT_PATH)/$(*D) ]; then \
		mkdir -p $(OBJECT_PATH)/$(*D); \
	fi
#if defined (CMISS_ROOT_DEFINED)
	@if [ -f $*.f ]; then \
	   case $*.f in  \
	      * ) \
	        set -x ; $(FORTRAN) $(OPTIMISATION_FLAGS) $(TARGET_TYPE_FLAGS) -o $(OBJECT_PATH)/$*.ObjSuffix $(SOURCE_DIRECTORY_INC) $*.f ;; \
	   esac ; \
	else \
	   case $*.f in  \
	      * ) \
	        set -x ; $(FORTRAN) $(OPTIMISATION_FLAGS) $(TARGET_TYPE_FLAGS) -o $(OBJECT_PATH)/$*.ObjSuffix $(SOURCE_DIRECTORY_INC) $(PRODUCT_SOURCE_PATH)/$*.f ;; \
	   esac ; \
	fi
#else /* defined (CMISS_ROOT_DEFINED) */
	case $*.f in  \
		* ) \
	  set -x ; $(FORTRAN) $(OPTIMISATION_FLAGS) $(TARGET_TYPE_FLAGS) -o $(OBJECT_PATH)/$*.ObjSuffix $(SOURCE_DIRECTORY_INC) $*.f ;; \
	esac ;
#endif /* defined (CMISS_ROOT_DEFINED) */

#if defined (WIN32)
.rc.res:
	@if [ ! -d $(OBJECT_PATH)/$(*D) ]; then \
		mkdir -p $(OBJECT_PATH)/$(*D); \
	fi
#if defined (CMISS_ROOT_DEFINED)
	if [ -f $*.rc ]; then \
      SOURCE_RC=$*.rc; \
	else \
      SOURCE_RC=$(PRODUCT_SOURCE_PATH)/$*.rc; \
	fi ; \
	set -x ; \
	windres -o $(OBJECT_PATH)/$*.res -O coff $${SOURCE_RC}
#else /* defined (CMISS_ROOT_DEFINED) */
	set -x ; \
   windres -o $(OBJECT_PATH)/$*.res -O coff $*.rc
#endif /* defined (CMISS_ROOT_DEFINED) */
#else /* defined (WIN32) */
.uil.uidh:
	@if [ ! -d $(UIDH_PATH)/$(*D) ]; then \
		mkdir -p $(UIDH_PATH)/$(*D); \
	fi
#if defined (CMISS_ROOT_DEFINED)
	@if [ -x $(UTILITIES_PATH)/$(UIDTOUIDH) ]; then \
      FOUND_UIDTOUIDH=$(UTILITIES_PATH)/$(UIDTOUIDH); \
   else \
      if [ -x $(PRODUCT_UTILITIES_PATH)/$(UIDTOUIDH) ]; then \
         FOUND_UIDTOUIDH=$(PRODUCT_UTILITIES_PATH)/$(UIDTOUIDH); \
      else \
	      if [ -f Makefile ]; then \
			   $(MAKE) -f Makefile $(UIDTOUIDH) ; \
		   else \
			   $(MAKE) -f $(PRODUCT_SOURCE_PATH)/Makefile $(UIDTOUIDH) ; \
		   fi ; \
   		FOUND_UIDTOUIDH=$(UTILITIES_PATH)/$(UIDTOUIDH); \
   	fi ; \
	fi ; \
	if [ -f $*.uil ]; then \
      SOURCE_UIL=$*.uil; \
	else \
      SOURCE_UIL=$(PRODUCT_SOURCE_PATH)/$*.uil; \
	fi ; \
	set -x ; \
	$(UIL) -o $(UIDH_PATH)/$*.uid $${SOURCE_UIL} && \
   $${FOUND_UIDTOUIDH} $(UIDH_PATH)/$*.uid $(UIDH_PATH)/$*.uidh
#else /* defined (CMISS_ROOT_DEFINED) */
	@if [ ! -x $(UTILITIES_PATH)/$(UIDTOUIDH) ]; then \
	   $(MAKE) -f Makefile $(UIDTOUIDH) ; \
	fi
	set -x ; \
   $(UIL) -o $(UIDH_PATH)/$*.uid $*.uil && \
   $(UTILITIES_PATH)/$(UIDTOUIDH) $(UIDH_PATH)/$*.uid $(UIDH_PATH)/$*.uidh
#endif /* defined (CMISS_ROOT_DEFINED) */
#endif /* defined (WIN32) */

XCOMM Check that the makefile is being used on the correct system
#if defined (IRIX) /* switch OperatingSystem */
oscheck :
	@if ! sysinfo > /dev/null ; then \
	   echo "Incorrect Operating System for SGI Make" ;\
      exit 1 ;\
   fi
#elif defined (LINUX) /* switch OperatingSystem */
oscheck :
	@echo -n > /dev/null
	/* Do something that only works under LINUX */
#elif defined (AIX) /* switch OperatingSystem */
oscheck :
	@echo -n > /dev/null
	/* Do something that only works under AIX */
#elif defined (WIN32) /* switch OperatingSystem */
oscheck :
	@echo -n > /dev/null
	/* Do something that only works under AIX */
#elif 1 /* SGI imake doesn't do else correctly *//* switch OperatingSystem */
oscheck :
	echo "No known operating system defined for imake"
#endif /* switch OperatingSystem */

clean :
	-rm -r $(OBJECT_PATH)
	-rm -r $(UIDH_PATH)

clobber : clean
	-rm $(BIN_PATH)/Target

#if defined (IRIX) /* switch OperatingSystem */
		/* Note: You can't do the switch inside the macro definition */
#define BuildNormalTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%Cannot access %product_object/%;s%: No such file or directory%%" > object.list) ; \  @@\
	$(LINK) -o UTILITIES_PATH/Target $(ALL_FLAGS) `cat object.list` LIBS
#elif defined(LINUX) /* switch OperatingSystem */
#define BuildNormalTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%ls: %product_object/%;s%: No such file or directory%%" > object.list)  ; \ @@\
	$(LINK) -o UTILITIES_PATH/Target $(ALL_FLAGS) `cat object.list` LIBS
#elif defined (AIX) /* switch OperatingSystem */
		/* Note: You can't do the switch inside the macro definition */
#define BuildNormalTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%Cannot access %product_object/%;s%: No such file or directory%%" > object.list) ; \  @@\
	$(LINK) -o UTILITIES_PATH/Target $(ALL_FLAGS) `cat object.list` LIBS
#elif defined (WIN32) /* switch OperatingSystem */
		/* Note: You can't do the switch inside the macro definition */
#define BuildNormalTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%Cannot access %product_object/%;s%: No such file or directory%%" > object.list) ; \  @@\
	$(LINK) -o UTILITIES_PATH/Target $(ALL_FLAGS) `cat object.list` LIBS
#endif /* switch OperatingSystem */

#if defined (IRIX) /* switch OperatingSystem */
		/* Note: You can't do the switch inside the macro definition */
#define BuildLibraryTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%Cannot access %product_object/%;s%: No such file or directory%%" > object.list) ; \  @@\
	rm -f UTILITIES_PATH/Target ; \
	ar $(AR_FLAGS) cr UTILITIES_PATH/Target $(OBJS)
#elif defined(LINUX) /* switch OperatingSystem */
#define BuildLibraryTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%ls: %product_object/%;s%: No such file or directory%%" > object.list)  ; \ @@\
	rm -f UTILITIES_PATH/Target ; \
	ar $(AR_FLAGS) cr UTILITIES_PATH/Target $(OBJS)
#elif defined(AIX) /* switch OperatingSystem */
#define BuildLibraryTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%ls: %product_object/%;s%: No such file or directory%%" > object.list)  ; \ @@\
	rm -f UTILITIES_PATH/Target ; \
	ar $(AR_FLAGS) cr UTILITIES_PATH/Target $(OBJS)
#elif defined(WIN32) /* switch OperatingSystem */
#define BuildLibraryTarget(Target, UTILITIES_PATH, SRCS, OBJSA, OBJSB, OBJS, LIBS)    @@\
OBJSA = $(SRCS:.c=.ObjSuffix)                                                        @@\
OBJSB = $(OBJSA:.cpp=.ObjSuffix)                                                     @@\
OBJS = $(OBJSB:.f=.ObjSuffix)                                                        @@\
                                                                                     @@\
Target: $(OBJS)                                                                      @@\
	@if [ ! -d $(OBJECT_PATH) ]; then \                                               @@\
		mkdir -p $(OBJECT_PATH); \                                                     @@\
	fi	                                                                               @@\
	@if [ ! -d `dirname UTILITIES_PATH/Target` ]; then \                              @@\
		mkdir -p `dirname UTILITIES_PATH/Target` ; \                                   @@\
	fi                                                                                @@\
	cd $(OBJECT_PATH) ; \                                                             @@\
	rm -f product_object ; \                                                          @@\
	ln -s $(PRODUCT_OBJECT_PATH) product_object ; \                                   @@\
	(ls $(OBJS) 2>&1 | sed "s%ls: %product_object/%;s%: No such file or directory%%" > object.list)  ; \ @@\
	rm -f UTILITIES_PATH/Target ; \
	ar $(AR_FLAGS) cr UTILITIES_PATH/Target $(OBJS)
#endif /* switch OperatingSystem */

UID2UIDH_SRCS = \
	utilities/uid2uidh.c

#if defined (IRIX) /* switch OperatingSystem */
UID2UIDH_LIB = -lgen
#elif defined(LINUX) /* switch OperatingSystem */
UID2UIDH_LIB =
#endif /* switch OperatingSystem */

BuildNormalTarget(Uid2uidhTarget,$(UTILITIES_PATH),UID2UIDH_SRCS,UID2UIDH_OBJSA,UID2UIDH_OBJSB,UID2UIDH_OBJS,$(UID2UIDH_LIB)) 

