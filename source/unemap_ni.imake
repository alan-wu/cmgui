XCOMM **************************************************************************
XCOMM FILE : unemap_ni.imake
XCOMM 
XCOMM LAST MODIFIED : 3 January 2000
XCOMM 
XCOMM DESCRIPTION :
XCOMM Makefile for unemap_ni
XCOMM ???DB.  Based on cmgui.imake
XCOMM ==========================================================================
/* The UnemapMake filename should match the filename into which this is being
	written.  This is done in the dependency rules in unemap.make i.e.
	for sgi
		image -T unemap.imake -f dummy.imake -s unemap.make
	for linux
		image -DLINUX -T unemap.imake -f dummy.imake -s unemap_linux.make */

#if defined (IRIX) /* switch OperatingSystem */

#if !defined (O64)
#define UidPath uid
#if !defined (OPTIMISED)
#define UnemapTarget unemap32
#define UnemapMake unemap_ni_sgi.make
#define DependMake unemap_ni_sgi.depend
#define ObjSuffix o
#else /* !defined (OPTIMISED) */
#define UnemapTarget unemap_optimised
#define UnemapMake unemap_ni_sgioptimised.make
#define DependMake unemap_ni_sgioptimised.depend
#define ObjSuffix oopt
#endif /* !defined (OPTIMISED) */
#else /* !defined (O64) */
/* The O64 version can be either OPTIMISED or not but only one
	version is kept at the moment */
#define UidPath uid64
#define UnemapTarget unemap64
#define UnemapMake unemap_ni_sgi64.make
#define DependMake unemap_ni_sgi64.depend
#define ObjSuffix o64
#endif /* !defined (O64) */

#elif defined (LINUX) /* switch OperatingSystem */

#define UidPath uid_linux
#define UnemapTarget unemap_linux
#define UnemapMake unemap_ni_linux.make
#define DependMake unemap_ni_linux.depend
#define ObjSuffix olinux

#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
SHELL=/bin/tcsh
#endif /* defined (OLD_CODE) */
SHELL=/bin/sh

PRODUCT_PATH=$(CMISS_ROOT)/cmgui/source
UTILITIES_PATH=$(CMISS_ROOT)/cmgui/source
#if defined (OLD_CODE)
PRODUCT_PATH=.
PRODUCT_PATH=/usr/people/bullivan/cmgui/uni_source
UTILITIES_PATH=/usr/people/bullivan/cmgui/cvs_unemap/utilities
#endif /* defined (OLD_CODE) */

#if defined (IRIX) /* switch OperatingSystem */
VPATH=$(PRODUCT_PATH)
#elif defined (LINUX) /* switch OperatingSystem */
XCOMM LINUX treats VPATH slightly differently and does not notice
XCOMM	that a local *.c file has changed if a valid *.olinux file
XCOMM	is found in the PRODUCT_PATH directories so use vpath and
XCOMM the VPATH is not searched for *.olinux.  This has the penalty
XCOMM of requiring all the objects to be built locally.
vpath %.c $(PRODUCT_PATH)
vpath %.f $(PRODUCT_PATH)
vpath %.h $(PRODUCT_PATH)
vpath %.cpp $(PRODUCT_PATH)
vpath %.uil $(PRODUCT_PATH)
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
CC = cc -n32 -c -o
CPP = CC -n32 -c -o
FORTRAN = f77 -n32 -c -o
LINK = cc -n32 -o
LINK = cc -n32 -multigot -o
CC = cc -n32 -c -g -o
CPP = CC -n32 -c -g -o
FORTRAN = f77 -n32 -c -g -o
LINK = ld -n32 -g -multigot -o
LINK = cc -n32 -g -multigot -o
LINK = f77 -n32 -g -multigot -o
CC = cc -c -o
CPP = CC -c -o
FORTRAN = f77 -c -o
LINK = cc -o
#endif

#if defined (IRIX) /* switch OperatingSystem */

UIDTOUID64 = $(UTILITIES_PATH)/uid2uid64
UIL = uil
UIL64 = uil64
#if defined (OPTIMISED)
CC_START = cc -c -O
CPP_START = CC -c -O
FORTRAN_START = f77 -c -O
LINK_START = cc -O
#else /* defined (OPTIMISED) */
CC_START = cc -c -g -mips3
CPP_START = CC -c -g -mips3
FORTRAN_START = f77 -c -g -mips3
LINK_START = cc -g -mips3
#endif /* defined (OPTIMISED) */

#if defined (O64)
CC = ${CC_START} -G0 -64 -DO64 -o
CPP = ${CPP_START} -G0 -64 -DO64 -o
FORTRAN = ${FORTRAN_START} -G0 -64 -DO64 -o
LINK = ${LINK_START} -G0 -64 -DO64 -o
#else /* defined (O64) */
CC = ${CC_START} -n32 -o
CPP = ${CPP_START} -n32 -o
FORTRAN = ${FORTRAN_START} -n32 -o
LINK = ${LINK_START} -n32 -o
#endif /* defined (O64) */
#elif defined(LINUX) /* switch OperatingSystem */

UIDTOUID64 = $(UTILITIES_PATH)/uid2uid64linux
UIL = uil
UIL64 = uil64  /* There is a test in the rule to see if this is available */
CC = egcs -c -g -o
CPP = egcs -c -o
FORTRAN = g77 -c -o
LINK = egcs -static -L/usr/X11R6/lib -g -o

#endif /* switch OperatingSystem */

BASE_DIRECTORY_INC = -I$(CMGUI_BASE_DIRECTORY) -I$(PRODUCT_PATH)

#if defined (IRIX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DSGI -Dmips
#elif defined(LINUX) /* switch OperatingSystem */
PLATFORM_SWITCH = -DGENERIC_PC
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
PLATFORM_SWITCH = -DIBM
PLATFORM_SWITCH = -DSGI
PLATFORM_SWITCH = -DVAX
PLATFORM_SWITCH = -DALPHA
#endif /* (OLD_CODE) */

OPERATING_SYSTEM = -DUNIX
#if defined (OLD_CODE)
OPERATING_SYSTEM = -DWIN32
???DB.  Win32 is an API not an operating system
OPERATING_SYSTEM = -DVMS
#endif /* (OLD_CODE) */

WINDOWING_SYSTEM = -DMOTIF
#if defined (OLD_CODE)
WINDOWING_SYSTEM = -DWINDOWS
#endif /* (OLD_CODE) */

UNEMAP_SRCS = \
	unemap/page_window.c \
	unemap/rig.c \
	unemap/unemap_hardware_client.c
UNEMAP_OBJS = \
	unemap/page_window.o \
	unemap/rig.o \
	unemap/unemap_hardware_client.o
UNEMAP_UIDS = \
	UidPath/filedir.uid \
	UidPath/page_window.uid

XCOMM #if defined (IRIX) /* switch OperatingSystem */
XCOMM EXTERNAL_INPUT_DEFINES = -DDIALS -DSPACEBALL -DPOLHEMUS -DFARO -DEXT_INPUT 
XCOMM EXTERNAL_INPUT_LIB = -lXext -lXi
XCOMM #elif defined(LINUX) /* switch OperatingSystem */
EXTERNAL_INPUT_DEFINES = 
EXTERNAL_INPUT_LIB = 
XCOMM #endif /* switch OperatingSystem */
#if defined (OLD_CODE)
EXTERNAL_INPUT_DEFINES = -DSPACEBALL -DEXT_INPUT 
EXTERNAL_INPUT_LIB = 
#endif /* (OLD_CODE) */

#if defined (OLD_CODE)
POSTSCRIPT_DEFINES = -DFEEDBACK_POSTSCRIPT
#endif /* (OLD_CODE) */
POSTSCRIPT_DEFINES =

XCOMM By default some names are "mangled" to get external names <= 32 characters
#if defined (OLD_CODE)
NAME_DEFINES =
#endif /* (OLD_CODE) */
NAME_DEFINES = -DFULL_NAMES

XCOMM Temporary flags that are used during development
TEMPORARY_DEVELOPMENT_FLAGS =
#if defined (OLD_CODE)
TEMPORARY_DEVELOPMENT_FLAGS = -DTEST_TRUE_COLOUR_VISUAL
TEMPORARY_DEVELOPMENT_FLAGS = -DWINDOWS_DEV_FLAG
#endif /* (OLD_CODE) */

#if defined (OLD_CODE)
CFLAGS = /float=ieee /standard=ansi89
CFLAGS =
CFLAGS = -ansi -pedantic -fullwarn -woff 841 -wlint,-faivu
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
CFLAGS = -ansi -pedantic -woff 1521,1048
#elif defined(LINUX) /* switch OperatingSystem */
CFLAGS = -ansi -pedantic
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
LIB = -lMrm -lXm -lXt -lX11 -lPW -lm -lmalloc_cv
???DB.  For linux, to make sure that staticly linked
LIB = /usr/X11R6/lib/libMrm.a /usr/X11R6/lib/libXm.a /usr/X11R6/lib/libXpm.a -lXt -lXext -lX11 -lSM -lICE -lm
LIB = -lMrm -lXm -lXt -lX11 -lPW -lm
LIB = -lMrm -lXm -lXt -lX11 -lXpm -lm
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
LIB = -lMrm -lXm -lXt -lX11 -lPW -lftn -lm
#elif defined(LINUX) /* switch OperatingSystem */
LIB = -lMrm -lXm -lXt -lX11 -lXpm -lXext -lm -ldl -lXp -lSM -lICE
#endif /* switch OperatingSystem */

#if defined (OLD_CODE)
XCOMM ???DB.  Until can remove CMISS link from user_interface
WORMHOLE_INC = -I/product/cmiss/wormhole/source
WORMHOLE_INC = -I/usr/people/bullivan/wormhole/source
WORMHOLE_INC = -I/home/bullivan/wormhole/source
#endif /* defined (OLD_CODE) */
#if defined (IRIX) /* switch OperatingSystem */
WORMHOLE_LIB = -L${CMISS_ROOT}/wormhole/lib -lwormhole_n32
WORMHOLE_INC = -I${CMISS_ROOT}/wormhole/source
#elif defined(LINUX) /* switch OperatingSystem */
WORMHOLE_LIB = -L/home/bullivan/wormhole/lib -lwormhole
WORMHOLE_INC = -I/home/bullivan/wormhole/source
#endif /* switch OperatingSystem */

START_ALL_DEFINES =
END_ALL_DEFINES =

START_ALL_INCLUDES =
END_ALL_INCLUDES =

ALL_DEFINES = $(START_ALL_DEFINES) \
	$(PLATFORM_SWITCH) $(OPERATING_SYSTEM) $(WINDOWING_SYSTEM) \
	$(EXTERNAL_INPUT_DEFINES) $(NAME_DEFINES) $(TEMPORARY_DEVELOPMENT_FLAGS) \
	-DSPECTRAL_TOOLS \
	$(END_ALL_DEFINES)

ALL_INCLUDES = $(START_ALL_INCLUDES) \
	$(BASE_DIRECTORY_INC) \
	$(WORMHOLE_INC) \
	$(END_ALL_INCLUDES)

ALL_FLAGS = $(CFLAGS) $(ALL_DEFINES) $(ALL_INCLUDES)

ALL_LIB = $(LIB) $(EXTERNAL_INPUT_LIB)
#if defined (OLD_CODE)
ALL_LIB = alpha.opt/opt
#endif /* defined (OLD_CODE) */

.MAKEOPTS : -r

.SUFFIXES :
.SUFFIXES : .ObjSuffix .c .cpp .f .uil .uid64

.c.ObjSuffix: 
	if [ -d $(*D) ]; \
	then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.c ]; \
	then \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $*.c; \
	else \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/$*.c; \
	fi

.cpp.ObjSuffix:
	if [ -d $(*D) ]; \
	then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.cpp ]; \
	then \
		$(CPP) $*.ObjSuffix $(ALL_FLAGS) $*.cpp; \
	else \
		$(CPP) $*.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/$*.cpp; \
	fi

.f.ObjSuffix: 
	if [ -d $(*D) ]; \
	then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.f ]; \
	then \
		$(FORTRAN) $*.ObjSuffix $(BASE_DIRECTORY_INC) $*.f; \
	else \
		$(FORTRAN) $*.ObjSuffix $(BASE_DIRECTORY_INC) $(PRODUCT_PATH)/$*.f; \
	fi
#if defined (OLD_CODE) /* Used to put object in correct directory with g77 */
#if defined (LINUX)
	mv `echo $*.o | cut -f2 -d/` $*.ObjSuffix
#endif /* defined (LINUX) */
#endif /* defined (OLD_CODE) */

.uil.uid64:
	if [ -d $(*D) ]; then \
		: ; \
	else \
		mkdir -p $(*D); \
	fi
	if [ -f $*.uil ]; then \
	   $(UIL) -o $*.uid $*.uil; \
	   if which $(UIL64) > /dev/null ; then \
	   	$(UIL64) -o $*_64bit.uid $*.uil; \
	   	$(UIDTOUID64) $*.uid -64bit $*_64bit.uid $*.uid64; \
		rm $*.uid $*_64bit.uid; \
	   else \
	   	$(UIDTOUID64) $*.uid $*.uid64; \
		rm $*.uid; \
	   fi ; \
	else \
	   $(UIL) -o $*.uid $(PRODUCT_PATH)/$*.uil; \
	   if which $(UIL64) > /dev/null ; then \
	   	$(UIL64) -o $*_64bit.uid $(PRODUCT_PATH)/$*.uil; \
	   	$(UIDTOUID64) $*.uid -64bit $*_64bit.uid $*.uid64; \
		rm $*.uid $*_64bit.uid; \
	   else \
	   	$(UIDTOUID64) $*.uid $*.uid64; \
		rm $*.uid; \
	   fi ; \
	fi

COMMAND_SRCS = \
	command/parser.c
GENERAL_SRCS = \
	general/debug.c \
	general/error_handler.c \
	general/geometry.c \
	general/matrix_vector.c \
	general/myio.c \
	general/mystring.c
USER_INTERFACE_SRCS = \
	user_interface/confirmation.c \
	user_interface/filedir.c \
	user_interface/message.c \
	user_interface/user_interface.c
OBJS = \
	command/parser.o \
	general/debug.o \
	general/error_handler.o \
	general/geometry.o \
	general/matrix_vector.o \
	general/myio.o \
	general/mystring.o \
	unemap/user_interface.o \
	user_interface/confirmation.o \
	user_interface/filedir.o \
	user_interface/message.o \
	$(UNEMAP_OBJS)
XCOMM ???DB.  What about user_interface/confirmation ?

UIDS = \
	$(UNEMAP_UIDS)

all : oscheck
	if [ -s $(PRODUCT_PATH)/DependMake ] ; then \
		make -f UnemapMake UnemapTarget ; \
	else \
		make -f UnemapMake depend ; \
		make -f UnemapMake UnemapTarget ; \
	fi

XCOMM Check that the makefile is being used on the correct system
#if defined (IRIX)
oscheck : 
	@if ! sysinfo > /dev/null ; then \
	   echo "Incorrect Operating System for SGI Make" ;\
      exit ;\
   fi
#else /* defined (IRIX) */
#if defined (LINUX) 
oscheck :
	/* Do something that only works under LINUX */
	@echo -n > /dev/null   
#else /* defined (LINUX) */
oscheck :
	echo "No known operating system defined for imake"
#endif  /* defined (LINUX) */
#endif  /* defined (IRIX) */

#if defined (OLD_CODE)
update :
	if [ "$(PWD)" = "$(PRODUCT_PATH)" -a "$(USER)" = "cmiss" ]; \
	then \
		cvs update -d && \
		chgrp -R cmgui_programmers *; \
		make -f UnemapMake CMGUI_BASE_DIRECTORY=$(PRODUCT_PATH); \
		chgrp -R cmgui_programmers *; \
	else \
		echo "Must be cmiss and in $(PRODUCT_PATH)"; \
	fi
#endif /* defined (OLD_CODE) */

depend :
	echo -n > DependMake
	(makedepend -f DependMake -Y -- $(ALL_FLAGS) -- unemap.c 2> DependMake.tmp)	
	(makedepend -f DependMake -a -Y -- $(ALL_FLAGS) -- $(COMMAND_SRCS) 2>> DependMake.tmp)
	(makedepend -f DependMake -a -Y -- $(ALL_FLAGS) -- $(GENERAL_SRCS) 2>> DependMake.tmp)
	(makedepend -f DependMake -a -Y -- $(ALL_FLAGS) -- $(UNEMAP_SRCS) 2>> DependMake.tmp)
	(makedepend -f DependMake -a -Y -- $(ALL_FLAGS) -- $(USER_INTERFACE_SRCS) 2>> DependMake.tmp)
	/* Try and make a rule for the uid64s if they don't exist already,
	It is bad, based on the format of the error output from makedepend and it only
	gets the first inclusion.  If it fails then you can get the correct makedepend 
	by ensuring all the uid64 files already exist before you makedepend */
	( grep uid64 unemap_ni_sgi.depend.tmp | grep makedepend | awk -F "[ ,]" '{printf("%s:",$$4); for(i = 1 ; i <= NF ; i++)  { if (match($$i,"uid64")) printf(" %s", substr($$i, 2, length($$i) -2)) } printf("\n");}' >> DependMake)
	rm DependMake.tmp

	  /* Can't put / by * or it thinks there is a comment so I have put the *
		  into the variable and used that instead */
#define WildObj *.ObjSuffix
#define WildUil *.uil
#define WildUid *.uid
#define WildC *.c
#define WildCpp *.cpp
#define WildCmn *.cmn
#define WildH *.h
#define WildF *.f
#define WildMms *.mms
#define WildXbm *.xbm
#define WildRc *.rc
#define WildPx *.px
clean :
	-rm $(OBJS)

clobber : clean
	-rm unemap
	-rm $(UNEMAP_UIDS)

transfer :
	tar -cvf - \
	unemap.make unemap.c version.h \
	unemap/WildC unemapWildH unemap/WildUil \
	unemap/utilities/WildC unemap/utilitiesWildH unemap/utilities/WildUil \
	command/parser.c command/parser.h \
	general/WildC generalWildH general/WildUil \
	graphics/colour.c graphics/colour.h graphics/material.c graphics/material.h \
	graphics/spectrum.c graphics/spectrum.h graphics/spectrum_settings.c \
	graphics/spectrum_settings.h graphics/graphics_library.h graphics/texture.c \
	graphics/texture.h \
	io_devices/WildC io_devicesWildH io_devices/WildUil \
	user_interface/WildC user_interfaceWildH user_interface/WildUil \
	| gzip > unemap_tar.gz

transfer_uid :
	tar -cvf unemap_uid.tar $(UIDS)

$(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h : $(OBJS:.o=.ObjSuffix)
	date > date.h
	sed 's/"//;s/./#define VERSION "unemap version 001.001.010  &/;s/.$$/&\\nCopyright 1996-2000, Auckland UniServices Ltd."/' < date.h > unemap_version.ObjSuffix.h
#if defined (OLD_CODE)
	sed 's/./#define VERSION "unemap version 001.001.009  &/;s/.$$/&\\nCopyright 1996-1997, Auckland UniServices Ltd."/' < date.h > version.ObjSuffix.h
#endif /* defined (OLD_CODE) */

unemap.ObjSuffix : unemap.c $(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h
	if [ -f $*.c ]; \
	then \
	   cat $(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h $*.c > $*.ObjSuffix.c ; \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $*.ObjSuffix.c; \
		rm $*.ObjSuffix.c ; \
	else \
	   cat $(CMGUI_BASE_DIRECTORY)/unemap_version.ObjSuffix.h $(PRODUCT_PATH)/$*.c > $*.ObjSuffix.c ; \
		$(CC) $*.ObjSuffix $(ALL_FLAGS) $*.ObjSuffix.c; \
		rm $*.ObjSuffix.c ; \
	fi

UnemapTarget : $(OBJS:.o=.ObjSuffix) unemap.ObjSuffix
	: /* The #if leaves a blank line which isn't accepted by the makefile */
#if defined (IRIX) /* switch OperatingSystem */
	(ls $(OBJS:.o=.ObjSuffix) unemap.ObjSuffix 2>&1 | sed "s%Cannot access %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#elif defined(LINUX) /* switch OperatingSystem */
	(ls $(OBJS:.o=.ObjSuffix) unemap.ObjSuffix 2>&1 | sed "s%ls: %$(PRODUCT_PATH)/%;s%: No such file or directory%%" > object.list)
#endif /* switch OperatingSystem */
	$(LINK) UnemapTarget `cat object.list` $(ALL_LIB)

XCOMM ???DB.  unemap has different flags
unemap/material.ObjSuffix : graphics/material.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/material.c ]; \
	then \
		$(CC) unemap/material.ObjSuffix $(ALL_FLAGS) graphics/material.c; \
	else \
		$(CC) unemap/material.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/material.c; \
	fi

unemap/spectrum.ObjSuffix : graphics/spectrum.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/spectrum.c ]; \
	then \
		$(CC) unemap/spectrum.ObjSuffix $(ALL_FLAGS) graphics/spectrum.c; \
	else \
		$(CC) unemap/spectrum.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/spectrum.c; \
	fi

unemap/spectrum_settings.ObjSuffix : graphics/spectrum_settings.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/spectrum_settings.c ]; \
	then \
		$(CC) unemap/spectrum_settings.ObjSuffix $(ALL_FLAGS) graphics/spectrum_settings.c; \
	else \
		$(CC) unemap/spectrum_settings.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/spectrum_settings.c; \
	fi

unemap/texture.ObjSuffix : graphics/texture.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f graphics/texture.c ]; \
	then \
		$(CC) unemap/texture.ObjSuffix $(ALL_FLAGS) graphics/texture.c; \
	else \
		$(CC) unemap/texture.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/graphics/texture.c; \
	fi

unemap/user_interface.ObjSuffix : user_interface/user_interface.c
	if [ -d unemap ]; \
	then \
		: ; \
	else \
		mkdir -p unemap; \
	fi
	if [ -f user_interface/user_interface.c ]; \
	then \
		$(CC) unemap/user_interface.ObjSuffix $(ALL_FLAGS) user_interface/user_interface.c; \
	else \
		$(CC) unemap/user_interface.ObjSuffix $(ALL_FLAGS) $(PRODUCT_PATH)/user_interface/user_interface.c; \
	fi

utilities : unemap/utilities/change_channels unemap/utilities/change_events

unemap/utilities/change_channels : unemap/utilities/change_channels.ObjSuffix
	$(LINK) unemap/utilities/change_channels unemap/utilities/change_channels.ObjSuffix \
	general/debug.ObjSuffix general/geometry.ObjSuffix general/myio.ObjSuffix general/mystring.ObjSuffix \
	unemap/rig.ObjSuffix unemap/interpolate.ObjSuffix user_interface/message.ObjSuffix \
	-lm

unemap/utilities/change_channels.ObjSuffix : unemap/utilities/change_channels.c
	$(CC) unemap/utilities/change_channels.ObjSuffix -I. unemap/utilities/change_channels.c

unemap/utilities/change_events : unemap/utilities/change_events.ObjSuffix
	$(LINK) unemap/utilities/change_events unemap/utilities/change_events.ObjSuffix

unemap/utilities/change_events.ObjSuffix : unemap/utilities/change_events.c
	$(CC) unemap/utilities/change_events.ObjSuffix -I. unemap/utilities/change_events.c

/* sinclude used so that the makefile can be run when the dependency file doesn't exist,
 it should then make one */
sinclude DependMake
