
 # ***** BEGIN LICENSE BLOCK *****
 # Version: MPL 1.1/GPL 2.0/LGPL 2.1
 #
 # The contents of this file are subject to the Mozilla Public License Version
 # 1.1 (the "License"); you may not use this file except in compliance with
 # the License. You may obtain a copy of the License at
 # http://www.mozilla.org/MPL/
 #
 # Software distributed under the License is distributed on an "AS IS" basis,
 # WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 # for the specific language governing rights and limitations under the
 # License.
 #
 # The Original Code is cmgui
 #
 # The Initial Developer of the Original Code is
 # Auckland Uniservices Ltd, Auckland, New Zealand.
 # Portions created by the Initial Developer are Copyright (C) 2005
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s): 
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
 # decision by deleting the provisions above and replace them with the notice
 # and other provisions required by the GPL or the LGPL. If you do not delete
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK ***** */

# Set the minimum version of cmake required to 2.8.1
# The FATAL_ERROR is needed if using cmake < 2.4
CMAKE_MINIMUM_REQUIRED( VERSION 2.8.1 FATAL_ERROR ) 

# If CMake is the version we're expecting, don't show the
# CMAKE_BACKWARDS_COMPATIBILITY option.
# TODO Check that this is working
IF( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" MATCHES "^2\\.6$" )
	MARK_AS_ADVANCED( FORCE CMAKE_BACKWARDS_COMPATIBILITY )
ELSE( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" MATCHES "^2\\.6$" )
	MARK_AS_ADVANCED( CLEAR CMAKE_BACKWARDS_COMPATIBILITY )
ENDIF( "${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" MATCHES "^2\\.6$" )

# Need some way of getting CMISS_ROOT defined otherwise we are in trouble.
IF( NOT DEFINED CMISS_ROOT )
	IF( NOT EXISTS $ENV{CMISS_ROOT} )
		SET( CMISS_ROOT "" CACHE PATH "The root of the cmiss install tree" )
		MESSAGE( FATAL_ERROR "Dude there is no CMISS_ROOT environment/command line variable set" )
	ELSE( NOT EXISTS $ENV{CMISS_ROOT} )
		FILE( TO_CMAKE_PATH "$ENV{CMISS_ROOT}" CMISS_ROOT_LOCATION )
	ENDIF( NOT EXISTS $ENV{CMISS_ROOT} )
ELSE( NOT DEFINED CMISS_ROOT )
	FILE( TO_CMAKE_PATH "${CMISS_ROOT}" CMISS_ROOT_LOCATION )
ENDIF( NOT DEFINED CMISS_ROOT )
IF( NOT EXISTS ${CMISS_ROOT_LOCATION} )
	MESSAGE( FATAL_ERROR "${CMISS_ROOT_LOCATION} doesn't exist" )
ENDIF( NOT EXISTS ${CMISS_ROOT_LOCATION} )

SET( CMAKE_MODULE_PATH "${CMISS_ROOT_LOCATION}/cmake/Modules" )
MESSAGE( STATUS "Module path: ${CMAKE_MODULE_PATH}" )
INCLUDE( MacroDefinitions )
INCLUDE( FunctionDefinitions )

# Don't build anything unless the version of CMake is high enough.
# The matching ELSE/ENDIF should be the last lines in the file.
# AND CMISS_ROOT environment variable is defined to be a directory
<<<<<<< .working

# This is the project name and shows up in ides
PROJECT( cmgui_project )

SET( CMGUI_MAJOR_VERSION "2" )
SET( CMGUI_MINOR_VERSION "7" )
SET( CMGUI_PATCH_VERSION "1" )

# TODO Check me with CMake DOCS, I think this should be
# ${CMAKE_CURRENT_SOURCE_DIR}
SET( PRODUCT_PATH ${CMISS_ROOT_LOCATION}/cmgui )
SET( PRODUCT_SOURCE ${PRODUCT_PATH}/source )

DEFINE_ARCHITECTURE_DIR( )
TEST_FOR_VFSCANF( HAVE_VFSCANF )


# Set the install prefix where dependent libraries are installed to
#FILE( TO_CMAKE_PATH "${CMISS_ROOT_LOCATION}/${ARCHITECTURE_DIR}" CMISS_INSTALL_PREFIX )

# Option setting, the following manipulates the build
# Set name option
SET( TARGET_NAME_FORMAT "Verbose" CACHE STRING "Do you want a 'Basic' of 'Verbose' target name" )

# Set user interface
SET( USER_INTERFACE "wx" CACHE STRING "What type of user interface is required" )
SET_USER_INTERFACE_DEFINES( )
SET( CAN_USE_USER_INTERFACE FALSE )
<<<<<<< .working

SET( CMISS_INSTALL_PREFIX ${CMISS_ROOT_LOCATION}/${ARCHITECTURE_DIR} CACHE PATH "Where are your Cmgui dependent libraries installed?" )
SET( CMAKE_INSTALL_PREFIX ${CMISS_INSTALL_PREFIX} CACHE INTERNAL "Internalise CMAKE_INSTALL_PREFIX, manipulate via CMISS_INSTALL_PREFIX" FORCE )

IF( NOT DEFINED CMISS_BUILD_TYPE )
	SET( CMISS_BUILD_TYPE "Release" )
ENDIF( NOT DEFINED CMISS_BUILD_TYPE )
SET( CMISS_BUILD_TYPE ${CMISS_BUILD_TYPE} CACHE STRING "What configuration do you want to build: Debug, Release, MinSizeRel, RelWithDebugInfo" )
SET( CMAKE_BUILD_TYPE ${CMISS_BUILD_TYPE} CACHE INTERNAL "Internalise CMAKE_BUILD_TYPE, manipulate via CMISS_BUILD_TYPE" FORCE )

# Set graphics
IF( NOT DEFINED GRAPHICS_API )
	SET( GRAPHICS_API OPENGL_GRAPHICS )
ENDIF( NOT DEFINED GRAPHICS_API )

# External library options
#MARK_AS_ADVANCED( ITK_DIR )
IF( WIN32 )
	SET( wxWidgets_DIR ${CMAKE_INSTALL_PREFIX}/lib/cmake CACHE PATH "Where is wxWidgets installed?" )
ELSE( WIN32 )
	SET( wxWidgets_DIR ${CMAKE_INSTALL_PREFIX} CACHE PATH "Where is wxWidgets installed?" )
ENDIF( WIN32 )
SET( ImageMagick_DIR ${CMAKE_INSTALL_PREFIX}/lib/ImageMagick/cmake CACHE
	PATH "Where is Image magick installed?" )
SET( OpenCASCADE_DIR ${CMAKE_INSTALL_PREFIX}/lib/cmake CACHE PATH "Where is OpenCASCADE installed?" )
SET( ITK_DIR ${CMAKE_INSTALL_PREFIX}/lib/InsightToolkit CACHE
	PATH "Where are the ITK libraries installed" )
FIND_PACKAGE( OpenCASCADE QUIET )
FIND_PACKAGE( ImageMagick COMPONENTS MagickCore )
FIND_PACKAGE( ITK QUIET )
SET( CMAKE_INCLUDE_PATH ${CMAKE_INSTALL_PREFIX}/include/libxml2 )
SET( CMAKE_LIBRARY_PATH ${CMAKE_INSTALL_PREFIX}/lib )
FIND_PACKAGE( LibXml2 QUIET )
SET( CMAKE_INCLUDE_PATH ${CMAKE_INSTALL_PREFIX}/include )
FIND_PACKAGE( ZLIB QUIET )
FIND_PACKAGE( NETGEN QUIET )
FIND_PACKAGE( perl_interpreter QUIET HINTS ${CMAKE_INSTALL_PREFIX}/lib/cmake )
#MESSAGE( STATUS "FOUND WHAT?: ${PERL_INTERPRETER_FOUND}" )
IF( WX_USER_INTERFACE )
	MESSAGE( STATUS "wxWidgets DIR: ${wxWidgets_DIR}" )
	SET( CMAKE_PREFIX_PATH ${wxWidgets_DIR} )
	FIND_PACKAGE( wxWidgets QUIET COMPONENTS xrc adv html gl xml core base )
	SET( CAN_USE_USER_INTERFACE ${wxWidgets_FOUND} )
ENDIF( WX_USER_INTERFACE )
SET( CMAKE_PREFIX_PATH )
SET( CMAKE_LIBRARY_PATH )
SET( CMAKE_INCLUDE_PATH )

# Build options
OPTION( CMGUI_BUILD_EXECUTABLE "Build executable ON will build an executable, whereas when set to OFF will build a library" ON )
IF( NOT CMGUI_BUILD_EXECUTABLE )
	SET( LIBRARY_TYPE_STRING "STATIC" )
	IF( DEFINED BUILD_LIBRARY_TYPE )
		SET( LIBRARY_TYPE_STRING ${BUILD_LIBRARY_TYPE} )
	ENDIF( DEFINED BUILD_LIBRARY_TYPE )
	SET( BUILD_LIBRARY_TYPE ${LIBRARY_TYPE_STRING} CACHE STRING "What type of library is required [SHARED | STATIC | MODULE ]" )
ENDIF( NOT CMGUI_BUILD_EXECUTABLE )

# Use options
IF( NOT DEFINED CMGUI_USE_GDCM ) #AND ( "${CMAKE_SYSTEM_NAME}" MATCHES "Linux" OR "${CMAKE_SYSTEM_NAME}" MATCHES "Windows" ) )
	SET( CMGUI_USE_GDCM ON )
ENDIF( NOT DEFINED CMGUI_USE_GDCM )#AND ( "${CMAKE_SYSTEM_NAME}" MATCHES "Linux" OR "${CMAKE_SYSTEM_NAME}" MATCHES "Windows" ) )
<<<<<<< .working

OPTION( CMGUI_USE_GDCM "Do you want to use libGDCM?" OFF )
OPTION( CMGUI_USE_GTKMAIN "Do you want to use GTK Main?" ${GTK_USER_INTERFACE} )
OPTION( CMGUI_USE_IMAGEMAGICK "Do you want to use Image Magick?" ${ImageMagick_FOUND} )
IF( CMGUI_USE_IMAGEMAGICK )
	OPTION( CMGUI_USE_BZ2 "Do you want to use bz2?" OFF )
	OPTION( CMGUI_USE_JPEG "Do you want to use jpeg?" OFF )
ELSE( CMGUI_USE_IMAGEMAGICK )
	OPTION( CMGUI_USE_BZ2 "Do you want to use bz2?" OFF )
	OPTION( CMGUI_USE_JPEG "Do you want to use jpeg?" OFF )
ENDIF( CMGUI_USE_IMAGEMAGICK )
OPTION( CMGUI_USE_ITK "Do you want to use ITK" ${ITK_FOUND} )
OPTION( CMGUI_USE_LINK_CMISS "Do you want to link to cmiss" OFF )
OPTION( CMGUI_USE_NETGEN "Do you want to use netgen" OFF )
OPTION( CMGUI_USE_OPENCASCADE "Do you want to use OpenCASCADE" OFF )
OPTION( CMGUI_USE_PCRE "Do you want to use pcre" OFF )
OPTION( CMGUI_USE_PERL_INTERPRETER "Do you want to use the perl interpreter"
	${PERL_INTERPRETER_FOUND} )
OPTION( CMGUI_USE_PNG "Do you want to use png" OFF )
OPTION( CMGUI_USE_TIFF "Do you want to use tiff" OFF )
OPTION( CMGUI_USE_UNEMAP "Do you want to use UNEMAP" OFF )
OPTION( CMGUI_USE_XML2 "Do you want to use xml2" ${LIBXML2_FOUND} )
IF( CMGUI_USE_PNG )
	OPTION( CMGUI_USE_ZLIB "Do you want to use zlib" ON )
ELSE( CMGUI_USE_PNG )
	OPTION( CMGUI_USE_ZLIB "Do you want to use zlib" OFF )
ENDIF( CMGUI_USE_PNG )

IF( ${CMISS_BUILD_TYPE} MATCHES "[Dd]ebug" )
	OPTION( CMGUI_BUILD_MEMORYCHECK "Do you want to build a memory check version" )
ENDIF( ${CMISS_BUILD_TYPE} MATCHES "[Dd]ebug" )
OPTION( CMGUI_BUILD_ABI "Do you want to build an ABI version" )
OPTION( CMGUI_FE_VALUE_IS_DOUBLE "Double or floats for FE_value?" TRUE )

# Mark some options as advanced to declutter the CMake GUI interface
MARK_AS_ADVANCED( CMGUI_USE_UNEMAP )
MARK_AS_ADVANCED( CMGUI_USE_LINK_CMISS )
MARK_AS_ADVANCED( CMGUI_USE_GTKMAIN )
IF( NOT NETGEN_FOUND )
	MARK_AS_ADVANCED( CMGUI_USE_NETGEN )
ENDIF( NOT NETGEN_FOUND )
IF( WX_USER_INTERFACE AND CAN_USE_USER_INTERFACE )
	MARK_AS_ADVANCED( WX_DIR )
ENDIF( WX_USER_INTERFACE AND CAN_USE_USER_INTERFACE )
MARK_AS_ADVANCED( CMGUI_FE_VALUE_IS_DOUBLE )
# Set this for the configure header file
SET( FE_VALUE_IS_DOUBLE ${CMGUI_FE_VALUE_IS_DOUBLE} )

# Check user interface is of known type
IF( NOT CAN_USE_USER_INTERFACE )
	GET_AVAILABLE_USER_INTERFACES( )
	MESSAGE( FATAL_ERROR "Can not use/find desired user interface."
		"  Use one of: ${AVAILABLE_USER_INTERFACES}" )
ENDIF( NOT CAN_USE_USER_INTERFACE )
MESSAGE( STATUS "User interface: ${USER_INTERFACE}" )

# Set build type dependent #Defines
IF( ${CMISS_BUILD_TYPE} MATCHES "[Dd]ebug" )
	#SET( DEBUG TRUE )
	SET( USE_PARAMETER_ON TRUE )
	IF( NOT ${COMPILER_NAME} MATCHES "msvc" )
		SET( REPORT_GL_ERRORS )
	ENDIF( NOT ${COMPILER_NAME} MATCHES "msvc" )
ELSE( ${CMISS_BUILD_TYPE} MATCHES "[Dd]ebug" )
	SET( OPTIMISED TRUE )
ENDIF( ${CMISS_BUILD_TYPE} MATCHES "[Dd]ebug" )

IF( CMGUI_BUILD_MEMORYCHECK )
	SET( MEMORY_CHECKING TRUE )
ENDIF( CMGUI_BUILD_MEMORYCHECK )

# Set Target name and global defines
DEFINE_TARGET_NAME( )
SET_PLATFORM_DEFINES( )
SET_OPERATING_SYSTEM_DEFINES( ) # <-- mostly set automatically by cmake just adding WIN32_SYSTEM to be used instead of WIN32
SET_GRAPHICS_DEFINES( )

# Start loading in the dependent libraries
IF( ${GRAPHICS_API} MATCHES OPENGL_GRAPHICS )
	FIND_PACKAGE( OpenGL REQUIRED )
	IF( OPENGL_FOUND )
		#MESSAGE( "OpenGL libs: " ${OPENGL_LIBRARIES} )
		#MESSAGE( "OpenGL includes: " ${OPENGL_INCLUDE_DIRS} )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${OPENGL_LIBRARIES} )
	ENDIF( OPENGL_FOUND )
ENDIF( ${GRAPHICS_API} MATCHES OPENGL_GRAPHICS )

IF( CMGUI_USE_ITK )
	FIND_PACKAGE( ITK REQUIRED )
	IF( ITK_FOUND )
		#MESSAGE( "ITK libs: " ${ITK_LIBRARIES} )
		#MESSAGE( "ITK includes: " ${ITK_INCLUDE_DIRS} )
		SET( USE_ITK TRUE )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${ITK_LIBRARIES} )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${ITK_INCLUDE_DIRS} )
	ENDIF( ITK_FOUND )
ENDIF( CMGUI_USE_ITK )

IF( CMGUI_USE_OPENCASCADE )
	MESSAGE( STATUS "OCC FOUND ${OPENCASCADE_FOUND}" )
	# Subset of OpenCASCADE libraries Cmgui is dependent on
	# TKernel, TKMath, TKAdvTools, TKGeomBase, TKGeomAlgo, TKBRep, TKPrim,
	# TKBO, TKBool, TKG2d, TKG3d, PTKernel, TKOffset, TKFillet, TKMESH, TKIGES,
	# TKXCAF, TKCAF, TKV3d, TKLCAF, TKTopAlgo, TKCDF, TKV2d, TKHLR, TKService,
	# TKShHealing, TKXSBase, TKSTEP, TKSTEPBase, TKSTEPAttr, TKSTEP209,
	# TKXDEIGES, TKXDESTEP
	IF( OPENCASCADE_FOUND )
		SET( USE_OPENCASCADE TRUE )
		#SET( OPENCASCADE_DEFINITIONS -DHAVE_CONFIG_H )
		IF( ${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64" )
			# 64-bit architecture
			SET( OPENCASCADE_DEFINITIONS ${OPENCASCADE_DEFINITIONS} _OCC64 )
			SET( OPENCASCADE_CXX_FLAGS -m64 )
		ENDIF( ${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86_64" )
		SET( OPENCASCADE_DEFINITIONS ${OPENCASCADE_DEFINITIONS} USE_CAD_FIELDS )
		IF( WIN32 )
			SET( OPENCASCADE_DEFINITIONS ${OPENCASCADE_DEFINITIONS} WNT HAVE_NO_DLL )
		ELSE( WIN32 )
			SET( OPENCASCADE_DEFINITIONS HAVE_OCC_CONFIG_H )
		ENDIF( WIN32 )
		#SET( OPENCASCADE_INCLUDE_DIRS ${OPENCASCADE_PATH}/include/OpenCASCADE )
		MESSAGE( STATUS "OCC INC: ${OPENCASCADE_INCLUDE_DIRS}" )
		#SET( OPENCASCADE_LIBRARY_DIRS ${OPENCASCADE_PATH}/lib/OpenCASCADE )
		MESSAGE( STATUS "OCC LIB: ${OPENCASCADE_LIBRARIES}" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPENCASCADE_CXX_FLAGS}" )
		SET( EXTRA_COMPILER_DEFINITIONS ${EXTRA_COMPILER_DEFINITIONS} ${OPENCASCADE_DEFINITIONS} )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${OPENCASCADE_LIBRARIES} )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${OPENCASCADE_INCLUDE_DIRS} )
	ELSE( OPENCASCADE_FOUND )
		SET( CMGUI_USE_OPENCASCADE OFF CACHE BOOL "Do you want to use OpenCASCADE" )
		MESSAGE( STATUS "OpenCASCADE had *not* been found!" )
	ENDIF( OPENCASCADE_FOUND )
ENDIF( CMGUI_USE_OPENCASCADE )

MESSAGE( STATUS "-- ${CMGUI_USE_IMAGEMAGICK}, ${USE_IMAGEMAGICK}" )
IF( CMGUI_USE_IMAGEMAGICK )
	#SET( CMAKE_INCLUDE_PATH ${CMISS_ROOT_LOCATION}/third_party/bin/${ARCHITECTURE_DIR} 
	#	${CMISS_ROOT_LOCATION}/third_party/include/${ARCHITECTURE_DIR}/ )
	#SET( CMAKE_LIBRARY_PATH ${CMISS_ROOT_LOCATION}/third_party/lib/${ARCHITECTURE_DIR}/ )
	#SET( CMAKE_INCLUDE_PATH ${CMAKE_INSTALL_PREFIX}/include/ImageMagick )
	#SET( CMAKE_LIBRARY_PATH ${CMISS_INSTALL_PREFIX}/lib )
	#FIND_PACKAGE( ImageMagick REQUIRED MagickCore )
	#SET( ImageMagick_FIND_COMPONENTS MagickCore )
	#INCLUDE( /usr/share/cmake/Modules/FindImageMagick.cmake )
	#MESSAGE( STATUS "${ImageMagick_LIBRARIES}" )
	IF( ImageMagick_FOUND )
		MESSAGE( STATUS "Image magick found " ${ImageMagick_INCLUDE_DIRS} )
		#MESSAGE( STATUS "Image magick inc ${ImageMagick_INCLUDE_DIRS}" )
		SET( USE_IMAGEMAGICK TRUE )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} MagickCore )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${ImageMagick_INCLUDE_DIRS} )
		SET( CMAKE_INCLUDE_PATH ${CMAKE_INSTALL_PREFIX}/include )
		SET( CMAKE_LIBRARY_PATH ${CMISS_INSTALL_PREFIX}/lib )
		FIND_PACKAGE( BZip2 REQUIRED )
		IF( BZIP2_FOUND )
			#MESSAGE( STATUS "BZip2 has been found " ${BZIP2_LIBRARIES} )
			SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${BZIP2_LIBRARIES} )
			SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${BZIP2_INCLUDE_DIR} )
		ENDIF( BZIP2_FOUND )
		FIND_PACKAGE( JPEG REQUIRED )
		IF( JPEG_FOUND )
			SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${JPEG_LIBRARIES} )
		ENDIF( JPEG_FOUND )
#		FIND_PACKAGE( TIFF REQUIRED )
#		IF( TIFF_FOUND )
#			SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${TIFF_LIBRARIES} )
#		ENDIF( TIFF_FOUND )
	ELSE( ImageMagick_FOUND )
		SET( CMGUI_USE_IMAGEMAGICK FALSE CACHE BOOL "Do you want to use Image Magick?" )
		MESSAGE( STATUS "Image Magick has *not* been found!" )
	ENDIF( ImageMagick_FOUND )
	SET( CMAKE_LIBRARY_PATH )
	SET( CMAKE_INCLUDE_PATH )
ENDIF( CMGUI_USE_IMAGEMAGICK )

IF( WX_USER_INTERFACE )
	#SET( CMAKE_PREFIX_PATH ${WX_DIR} )
	# Order of components here is important when linking static libraries
	#FIND_PACKAGE( wxWidgets REQUIRED xrc adv html gl xml core base )
	IF( wxWidgets_FOUND )
		#MESSAGE( STATUS "wx definitions: " ${wxWidgets_DEFINITIONS} )
		#MESSAGE( STATUS "wxWidgets cxx flags: " ${wxWidgets_CXX_FLAGS} " cmake cxx flags: ${CMAKE_CXX_FLAGS}")
		#FOREACH( LIB ${wxWidgets_LIBRARIES} )
		#	MESSAGE( STATUS "wxWidgets lib: " ${LIB} )
		#ENDFOREACH( LIB ${wxWidgets_LIBRARIES} )
		#MESSAGE( STATUS "wxWidgets lid dirs: ${wxWidgets_LIB_DIRS}" )
		MESSAGE( STATUS "C FLAGS: ${wxWidgets_CXX_FLAGS}" )
		MESSAGE( STATUS "LIBS: ${wxWidgets_LIBRARIES}" )
		MESSAGE( STATUS "DEFS: ${wxWidgets_DEFINITIONS}" )
		MESSAGE( STATUS "INC_DIRS: ${wxWidgets_INCLUDE_DIRS}" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${wxWidgets_CXX_FLAGS}" )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${wxWidgets_LIBRARIES} )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${wxWidgets_INCLUDE_DIRS} )
		SET( EXTRA_COMPILER_DEFINITIONS ${EXTRA_COMPILER_DEFINITIONS} ${wxWidgets_DEFINITIONS} )
		WXWIDGETS_HDRS( wxWidgets_GENERATED_HDRS )
	ENDIF( wxWidgets_FOUND )
	SET( CMAKE_PREFIX_PATH )
ENDIF( WX_USER_INTERFACE )

# Included in ITK
#FIND_PACKAGE( TIFF )
#IF( TIFF_FOUND )
#	MESSAGE( STATUS "TIFF has been found " ${TIFF_LIBRARIES} )
#	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${TIFF_LIBRARIES} )
#ENDIF( TIFF_FOUND )

# Included in ITK
#FIND_PACKAGE( TIFF )
#IF( TIFF_FOUND )
#	MESSAGE( STATUS "TIFF has been found " ${TIFF_LIBRARIES} )
#	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${TIFF_LIBRARIES} )
#ENDIF( TIFF_FOUND )

# Included in ITK
#FIND_PACKAGE( JPEG )
#IF( JPEG_FOUND )
#	MESSAGE( STATUS "JPEG has been found " ${JPEG_LIBRARIES} )
#	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${JPEG_LIBRARIES} )
#ENDIF( JPEG_FOUND )
<<<<<<< .working

# zlib 
IF( CMGUI_USE_ZLIB )
	FIND_PACKAGE( ZLIB REQUIRED )
	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${ZLIB_LIBRARIES} )
	SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${ZLIB_INCLUDE_DIRS} )
ENDIF( CMGUI_USE_ZLIB )

# Included in ITK
#FIND_PACKAGE( PNG )
#IF( PNG_FOUND )
#	MESSAGE( STATUS "PNG has been found " ${PNG_LIBRARIES} )
#	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${PNG_LIBRARIES} )
#ENDIF( PNG_FOUND )

#FIND_PACKAGE( PCRE )
#INCLUDE( FindPCRE.cmake )
#IF( PCRE_FOUND )
#	#MESSAGE( STATUS "PCRE has been found " ${PCRE_INCLUDE_DIR} " " ${PCRE_LIBRARIES} )
#	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${PCRE_LIBRARIES} )
#ENDIF( PCRE_FOUND )

IF( CMGUI_USE_XML2 )
	#SET( CMAKE_INCLUDE_PATH ${CMISS_INSTALL_PREFIX}/include )
	#SET( CMAKE_LIBRARY_PATH ${CMISS_INSTALL_PREFIX}/lib )
	#SET( CMAKE_PREFIX_PATH ${CMISS_ROOT_LOCATION}/third_party/lib/${ARCHITECTURE_DIR}
	#	${CMISS_ROOT_LOCATION}/third_party/include/${ARCHITECTURE_DIR}/libxml2 )
	#FIND_PACKAGE( LibXml2 REQUIRED )
	IF( LIBXML2_FOUND )
		MESSAGE( STATUS "WARNING: LibXml2 could be finding the wrong header files check below:" )
		MESSAGE( STATUS "LibXml2 include dir ${LIBXML2_INCLUDE_DIR}" )
		MESSAGE( STATUS "LibXml2 libraries ${LIBXML2_LIBRARIES}" )
		#MESSAGE( STATUS ${LIBXML2_DEFINITIONS} )
		#MESSAGE( STATUS ${LIBXML2_XMLLINT_EXECUTABLE} )
		SET( USE_XML2 TRUE )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${LIBXML2_INCLUDE_DIR} )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${LIBXML2_LIBRARIES} )
	ENDIF( LIBXML2_FOUND )
	#SET( CMAKE_LIBRARY_PATH )
	#SET( CMAKE_INCLUDE_PATH )
ENDIF( CMGUI_USE_XML2 )

IF( CMGUI_USE_GDCM )
	SET( CMAKE_PREFIX_PATH ${CMISS_ROOT_LOCATION}/third_party/${ARCHITECTURE_DIR}/lib/gdcm-2.0 )
	FIND_PACKAGE( GDCM REQUIRED )
	#INCLUDE( ${GDCM_USE_FILE} )
	#INCLUDE( ${CMISS_ROOT_LOCATION}/third_party/${ARCHITECTURE_DIR}/lib/gdcm-2.0/GDCMConfig.cmake )
	MESSAGE( STATUS "WARNING: GDCM Issues see below" )
	MESSAGE( STATUS "GDCM use file: ${GDCM_USE_FILE}" )
	MESSAGE( STATUS "GDCM_LIBRARIES currently: ${GDCM_LIBRARIES}" )
	MESSAGE( STATUS "Hard coding to gdcmCWRAPPER gdcmDSED gdcmMSFF gdcmDIST" )
	SET( GDCM_LIBRARIES gdcmCWRAPPER gdcmDSED gdcmMSFF gdcmDICT )
	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${GDCM_LIBRARIES} )
ENDIF( CMGUI_USE_GDCM )

IF( CMGUI_USE_PERL_INTERPRETER )
	IF( PERL_INTERPRETER_FOUND )
		SET( USE_PERL_INTERPRETER TRUE )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${PERL_INTERPRETER_INCLUDE_DIRS} )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${PERL_INTERPRETER_LIBRARIES} )
		MESSAGE( STATUS "PI LIBS: ${PERL_INTERPRETER_LIBRARIES}" )
		#IF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
		#	SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} crypt )
		#ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	ELSE( PERL_INTERPRETER_FOUND )
		SET( CMGUI_USE_PERL_INTERPRETER FALSE CACHE BOOL "Do you want to use the perl interpreter" FORCE )
	ENDIF( PERL_INTERPRETER_FOUND )
ENDIF( CMGUI_USE_PERL_INTERPRETER )

IF( CMGUI_USE_NETGEN )
	SET( CMAKE_INCLUDE_PATH ${CMISS_INSTALL_PREFIX}/include )
	SET( CMAKE_LIBRARY_PATH ${CMISS_INSTALL_PREFIX}/lib )
	FIND_PACKAGE( NETGEN REQUIRED )
	IF( NETGEN_FOUND )
		SET( USE_NETGEN TRUE )
		SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} ${NETGEN_LIBRARIES} )
		SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${NETGEN_INCLUDE_DIR} )
	ENDIF( NETGEN_FOUND )
	SET( CMAKE_LIBRARY_PATH )
	SET( CMAKE_INCLUDE_PATH )
ENDIF( CMGUI_USE_NETGEN )

# Defines API_SRCS
INCLUDE( source/api.cmake )

# Defines COMMAND_SRCS, CONTEXT_SRCS
INCLUDE( source/command.cmake )

# Defines COMPUTED_FIELD_CORE_SRCS, COMPUTED_FIELD_GRAPHICS_SRCS,
# COMPUTED_FIELD_SRCS (contains previous two)
INCLUDE( source/computed_field.cmake )

# Defines FINITE_ELEMENT_CORE_SRCS, FINITE_ELEMENT_GRAPHICS_SRCS, 
# FINITE_ELEMENT_ADDITIONAL_SRCS, FINITE_ELEMENT_SRCS 
# (group definition which includes the previous three)
INCLUDE( source/finite_element.cmake )

# Defines GENERAL_SRCS
INCLUDE( source/general.cmake )

# Defines GRAPHICS_SRCS
INCLUDE( source/graphics.cmake )

# Defines IMAGE_PROCESSING_SRCS
INCLUDE( source/image_processing.cmake )

# Defines API_INTERFACE_SRCS, CHOOSE_INTERFACE_SRCS, COMFILE_INTERFACE_SRCS,
# COLOUR_INTERFACE_SRCS, COMMAND_INTERFACE_SRCS,
# COMPUTED_FIELD_INTERFACE_SRCS, CURVE_INTERFACE_SRCS, FINITE_ELEMENT_INTERFACE_SRCS,
# GENERAL_INTERFACE_SRCS, GRAPHICS_INTERFACE_SRCS,
# INTERACTION_INTERFACE_SRCS, IO_DEVICES_INTERFACE_SRCS, LINK_INTERFACE_SRCS, MATERIAL_INTERFACE_SRCS,
# MOTIF_INTERFACE_SRCS, NODE_INTERFACE_SRCS, REGION_INTERFACE_SRCS,
# SELECT_INTERFACE_SRCS, TRANSFORMATION_INTERFACE_SRCS,
# THREE_D_DRAWING_INTERFACE_SRCS, TIME_INTERFACE_SRCS,
# USER_INTERFACE_SRCS, USER_INTERFACE_INTERFACE_SRCS, VIEW_INTERFACE_SRCS
INCLUDE( source/interfaces.cmake )

# Defines COMFILE_SRCS, CURVE_SRCS, ELEMENT_SRCS, EMOTER_SRCS
# HELP_SRCS, INTERACTION_SRCS, IO_DEVICES_SRCS, NODE_SRCS,
# REGION_SRCS, SELECTION_SRCS, THREE_D_DRAWING_SRCS, TIME_SRCS
INCLUDE( source/misc.cmake )

# Defines UNEMAP_SRCS
INCLUDE( source/unemap.cmake )

# Defines OPENCASCADE_SRCS
INCLUDE( source/opencascade.cmake )

IF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	#SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W -Wall -Werror" )
	#SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall -Werror" )
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -W -Wall" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall" )
	IF( ${CMISS_BUILD_TYPE} MATCHES [Rr]elease )
		SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-parameter" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter" )
	ENDIF( ${CMISS_BUILD_TYPE} MATCHES [Rr]elease )
ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )

INCLUDE_DIRECTORIES( source ${CMAKE_CURRENT_BINARY_DIR}/source
	${INCLUDE_DIRS} )

LINK_DIRECTORIES( ${ITK_LIBRARY_DIRS} ${GDCM_LIBRARY_DIRS} )

IF( DEFINED MSVC )
	SET( EXTRA_COMPILER_DEFINITIONS ${EXTRA_COMPILER_DEFINITIONS} _CRT_SECURE_NO_WARNINGS )
	#MESSAGE( STATUS "extra compiler definitions: ${EXTRA_COMPIILER_DEFINITIONS}" )
ENDIF( DEFINED MSVC )

FOREACH( DEF ${EXTRA_COMPILER_DEFINITIONS} BUILD_WITH_CMAKE )
	ADD_DEFINITIONS( -D${DEF} )
ENDFOREACH( DEF ${EXTRA_COMPILER_DEFINITIONS} BUILD_WITH_CMAKE )

CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/source/configure/cmgui_configure.h.cmake
	${PROJECT_BINARY_DIR}/source/configure/cmgui_configure.h )

SOURCE_GROUP( "Header Files\\api" FILES ${API_HDRS} ) 
IF( USE_OPENCASCADE )
	SOURCE_GROUP( "Header Files\\cad" FILES ${OPENCASCADE_HDRS} )
ENDIF( USE_OPENCASCADE )
SOURCE_GROUP( "Header Files\\command" FILES ${COMMAND_HDRS} ) 
SOURCE_GROUP( "Header Files\\context" FILES ${CONTEXT_HDRS} ) 
SOURCE_GROUP( "Header Files\\computed_field" FILES ${COMPUTED_FIELD_HDRS} ) 
SOURCE_GROUP( "Header Files\\finite_element" FILES ${FINITE_ELEMENT_HDRS} ) 
SOURCE_GROUP( "Header Files\\general" FILES ${GENERAL_HDRS} ) 
SOURCE_GROUP( "Header Files\\graphics" FILES ${GRAPHICS_HDRS} ) 
SOURCE_GROUP( "Header Files\\image_processing" FILES ${IMAGE_PROCESSING_HDRS} ) 
SOURCE_GROUP( "Header Files\\interfaces" FILES ${API_INTERFACE_HDRS}
	${CHOOSE_INTERFACE_HDRS} ${COMFILE_INTERFACE_HDRS} ${COLOUR_INTERFACE_HDRS}
	${COMMAND_INTERFACE_HDRS} ${COMPUTED_FIELD_INTERFACE_HDRS} ${CURVE_INTERFACE_HDRS}
	${FINITE_ELEMENT_INTERFACE_HDRS} ${GENERAL_INTERFACE_HDRS} ${GRAPHICS_INTERFACE_HDRS}
	${INTERACTION_INTERFACE_HDRS} ${IO_DEVICES_INTERFACE_HDRS} ${LINK_INTERFACE_HDRS}
	${MATERIAL_INTERFACE_HDRS} ${MOTIF_INTERFACE_HDRS} ${NODE_INTERFACE_HDRS}
	${REGION_INTERFACE_HDRS} ${SELECT_INTERFACE_HDRS} ${TRANSFORMATION_INTERFACE_HDRS}
	${THREE_D_DRAWING_INTERFACE_HDRS} ${TIME_INTERFACE_HDRS} ${USER_INTERFACE_HDRS}
	${USER_INTERFACE_INTERFACE_HDRS} ${VIEW_INTERFACE_HDRS} )
SOURCE_GROUP( "Header Files\\misc" FILES ${COMFILE_HDRS} ${CURVE_HDRS} ${ELEMENT_HDRS} ${EMOTER_HDRS}
	${HELP_HDRS} ${INTERACTION_HDRS} ${IO_DEVICES_HDRS} ${NODE_HDRS}
	${REGION_HDRS} ${SELECTION_HDRS} ${THREE_D_DRAWING_HDRS} ${TIME_HDRS} )

SOURCE_GROUP( "Source Files\\api" FILES ${API_SRCS} )
IF( USE_OPENCASCADE )
	SOURCE_GROUP( "Source Files\\cad" FILES ${OPENCASCADE_SRCS} )
ENDIF( USE_OPENCASCADE )
SOURCE_GROUP( "Source Files\\command" FILES ${COMMAND_SRCS} ) 
SOURCE_GROUP( "Source Files\\context" FILES ${CONTEXT_SRCS} ) 
SOURCE_GROUP( "Source Files\\computed_field" FILES ${COMPUTED_FIELD_SRCS} ) 
SOURCE_GROUP( "Source Files\\finite_element" FILES ${FINITE_ELEMENT_SRCS} ) 
SOURCE_GROUP( "Source Files\\general" FILES ${GENERAL_SRCS} ) 
SOURCE_GROUP( "Source Files\\graphics" FILES ${GRAPHICS_SRCS} ) 
SOURCE_GROUP( "Source Files\\image_processing" FILES ${IMAGE_PROCESSING_SRCS} ) 
SOURCE_GROUP( "Source Files\\interfaces" FILES ${API_INTERFACE_SRCS}
	${CHOOSE_INTERFACE_SRCS} ${COMFILE_INTERFACE_SRCS} ${COLOUR_INTERFACE_SRCS}
	${COMMAND_INTERFACE_SRCS} ${COMPUTED_FIELD_INTERFACE_SRCS} ${CURVE_INTERFACE_SRCS}
	${FINITE_ELEMENT_INTERFACE_SRCS} ${GENERAL_INTERFACE_SRCS} ${GRAPHICS_INTERFACE_SRCS}
	${INTERACTION_INTERFACE_SRCS} ${IO_DEVICES_INTERFACE_SRCS} ${LINK_INTERFACE_SRCS}
	${MATERIAL_INTERFACE_SRCS} ${MOTIF_INTERFACE_SRCS} ${NODE_INTERFACE_SRCS}
	${REGION_INTERFACE_SRCS} ${SELECT_INTERFACE_SRCS} ${TRANSFORMATION_INTERFACE_SRCS}
	${THREE_D_DRAWING_INTERFACE_SRCS} ${TIME_INTERFACE_SRCS} ${USER_INTERFACE_SRCS}
	${USER_INTERFACE_INTERFACE_SRCS} ${VIEW_INTERFACE_SRCS} )
SOURCE_GROUP( "Source Files\\misc" FILES ${COMFILE_SRCS} ${CURVE_SRCS} ${ELEMENT_SRCS} ${EMOTER_SRCS}
	${HELP_SRCS} ${INTERACTION_SRCS} ${IO_DEVICES_SRCS} ${NODE_SRCS}
	${REGION_SRCS} ${SELECTION_SRCS} ${THREE_D_DRAWING_SRCS} ${TIME_SRCS} )

IF( CMGUI_BUILD_EXECUTABLE )
	SET( BASE_SRCS ${MAIN_SRCS} ${API_SRCS} ${COMFILE_SRCS} ${COMMAND_SRCS}
		${COMPUTED_FIELD_SRCS} ${CONTEXT_SRCS} ${CURVE_SRCS} ${ELEMENT_SRCS} 
		${EMOTER_SRCS} ${FINITE_ELEMENT_SRCS} ${GENERAL_SRCS} ${GRAPHICS_SRCS} 
		${HELP_SRCS} ${IMAGE_PROCESSING_SRCS} ${INTERACTION_SRCS} ${IO_DEVICES_SRCS}
		${NODE_SRCS} ${REGION_SRCS} ${SELECTION_SRCS} ${INTERPRETER_SRCS}
		${THREE_D_DRAWING_SRCS} ${TIME_SRCS} ${USER_INTERFACE_SRCS} ${OPENCASCADE_SRCS} )
	SET( BASE_HDRS ${API_HDRS} ${COMFILE_HDRS} ${COMMAND_HDRS}
		${COMPUTED_FIELD_HDRS} ${CONTEXT_HDRS} ${CURVE_HDRS} ${ELEMENT_HDRS} 
		${EMOTER_HDRS} ${FINITE_ELEMENT_HDRS} ${GENERAL_HDRS} ${GRAPHICS_HDRS} 
		${HELP_HDRS} ${IMAGE_PROCESSING_HDRS} ${INTERACTION_HDRS} ${IO_DEVICES_HDRS}
		${NODE_HDRS} ${REGION_HDRS} ${SELECTION_HDRS} ${INTERPRETER_HDRS}
		${THREE_D_DRAWING_HDRS} ${TIME_HDRS} ${USER_INTERFACE_HDRS} ${OPENCASCADE_HDRS} )

	IF( WX_USER_INTERFACE )
		SET( INTERFACE_SRCS ${API_INTERFACE_SRCS} ${COLOUR_INTERFACE_SRCS} ${COMFILE_INTERFACE_SRCS}
			${COMMAND_INTERFACE_SRCS} ${COMPUTED_FIELD_INTERFACE_SRCS}
			${GRAPHICS_INTERFACE_SRCS} ${MATERIAL_INTERFACE_SRCS} ${NODE_INTERFACE_SRCS} 
			${REGION_INTERFACE_SRCS} ${TRANSFORMATION_INTERFACE_SRCS} )
		SET( INTERFACE_HDRS ${API_INTERFACE_HDRS} ${COLOUR_INTERFACE_HDRS} ${COMFILE_INTERFACE_HDRS}
			${COMMAND_INTERFACE_HDRS} ${COMPUTED_FIELD_INTERFACE_HDRS}
			${GRAPHICS_INTERFACE_HDRS} ${MATERIAL_INTERFACE_HDRS} ${NODE_INTERFACE_HDRS} 
			${REGION_INTERFACE_HDRS} ${TRANSFORMATION_INTERFACE_HDRS} ${wxWidgets_GENERATED_HDRS} )
			
		SOURCE_GROUP( "Header Files\\generated" FILES ${wxWidgets_GENERATED_HDRS} )
	ENDIF( WX_USER_INTERFACE )
	
	SET_FILES_COMPILE_FLAGS( "${BASE_SRCS}" )
	SET_FILES_COMPILE_FLAGS( "${INTERFACE_SRCS}" )

	Subversion_GET_REVISION( ${CMAKE_SOURCE_DIR}/README CMGUI_REVISION )
	MESSAGE(STATUS "Revision is ${CMGUI_REVISION}")

	# First crack at getting the version string correct
	SET( VERSION_EXE_NAME "version_generator" )
	ADD_EXECUTABLE( ${VERSION_EXE_NAME} source/configure/version.cpp )

	GET_TARGET_PROPERTY( EXE_LOC ${VERSION_EXE_NAME} LOCATION )

	ADD_CUSTOM_COMMAND( OUTPUT ${PROJECT_BINARY_DIR}/source/configure/version.h
		DEPENDS ${VERSION_EXE_NAME} )

	STRING( TOLOWER ${CMAKE_SYSTEM_NAME} OPERATING_SYSTEM )
	STRING( TOLOWER ${CMISS_BUILD_TYPE} LOWERCASE_BUILD_TYPE )
	SET( CONFIGURED_VERSION_HEADER ${PROJECT_BINARY_DIR}/source/configure/version.h )
	ADD_CUSTOM_TARGET( always_update_version_string ALL ${EXE_LOC}
		${CONFIGURED_VERSION_HEADER} ${CMGUI_MAJOR_VERSION}
		${CMGUI_MINOR_VERSION} ${CMGUI_PATCH_VERSION}  ${CMGUI_REVISION}
		${CMAKE_SYSTEM_PROCESSOR} ${OPERATING_SYSTEM} ${USER_INTERFACE} ${LOWERCASE_BUILD_TYPE}
		DEPENDS ${VERSION_EXE_NAME}
		COMMENT "Generating ${CONFIGURED_VERSION_HEADER} ..." )

	IF( DEFINED MSVC )
		# Because of weak linking need to set this before msvcrt gets linked for static builds
		#SET( DEPENDENT_LIBS ${DEPENDENT_LIBS} "C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\\atlmfc\\lib\\nafxcw.lib" )
		#MESSAGE( STATUS "C flags debug : ${CMAKE_C_FLAGS_DEBUG}" )
		#SET( CMAKE_C_FLAGS_DEBUG "/D_DEBUG /MTd /Zi /Ob0 /Od /RTC1" )
		#SET( CMAKE_C_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG" )
		#SET( CMAKE_CXX_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE} )
		#SET( CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG} )
		SET( ICON_RESOURCES "${PROJECT_SOURCE_DIR}/source/icon/wxmsw_icon.rc" )
		#SET( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:MSVCRT" )
		#SET_TARGET_PROPERTIES( ${TARGET_NAME} PROPERTIES LINK_FLAGS_RELEASE "/NODEFAULTLIB:MSVCRT" )
		#MESSAGE( STATUS "C flags debug : ${CMAKE_C_FLAGS_DEBUG}" )
		#MESSAGE( STATUS "Shared linker flags : ${CMAKE_SHARED_LINKER_FLAGS}" )
	ENDIF( DEFINED MSVC )

	SET( CONFIGURED_HEADERS
		${PROJECT_BINARY_DIR}/source/configure/version.h
		${PROJECT_BINARY_DIR}/source/configure/cmgui_configure.h )
	SOURCE_GROUP( "Header Files\\configure" FILES ${CONFIGURED_HEADERS} )
	
	ADD_EXECUTABLE( ${TARGET_NAME} ${BASE_SRCS} ${BASE_HDRS} ${INTERFACE_SRCS} ${INTERFACE_HDRS}
		${ICON_RESOURCES} ${CONFIGURED_HEADERS} )

	TARGET_LINK_LIBRARIES( ${TARGET_NAME} ${DEPENDENT_LIBS} )
	MESSAGE( STATUS "TARGET LINK LIBRARIES: ${DEPENDENT_LIBS}" )

	IF( NOT "${TARGET_NAME_FORMAT}" MATCHES "[Bb]asic" )
		SET_TARGET_PROPERTIES( ${TARGET_NAME} PROPERTIES RELEASE_POSTFIX "-optimised" )
		SET_TARGET_PROPERTIES( ${TARGET_NAME} PROPERTIES DEBUG_POSTFIX "-debug" )
	ENDIF( NOT "${TARGET_NAME_FORMAT}" MATCHES "[Bb]asic" )

ELSE( CMGUI_BUILD_EXECUTABLE )
	# Do library build stuff
	SET( BASE_SRCS ${COMFILE_SRCS} ${COMMAND_SRCS}
		${COMPUTED_FIELD_SRCS} ${CURVE_SRCS} ${ELEMENT_SRCS} ${EMOTER_SRCS}
		${FINITE_ELEMENT_SRCS} ${GENERAL_SRCS} ${GRAPHICS_SRCS}
		${HELP_SRCS} ${IMAGE_PROCESSING_SRCS} ${INTERACTION_SRCS}
		${IO_DEVICES_SRCS} ${NODE_SRCS} ${SELECTION_SRCS}
		${INTERPRETER_SRCS} ${THREE_D_DRAWING_SRCS} ${TIME_SRCS}
		${USER_INTERFACE_SRCS} ${CONTEXT_SRCS} ${OPENCASCADE_SRCS} )
	IF( WX_USER_INTERFACE )
		SET( INTERFACE_SRCS ${API_INTERFACE_SRCS} ${COLOUR_INTERFACE_SRCS}
			${COMFILE_INTERFACE_SRCS}
			${COMMAND_INTERFACE_SRCS} ${COMPUTED_FIELD_INTERFACE_SRCS}
			${GRAPHICS_INTERFACE_SRCS}
			${MATERIAL_INTERFACE_SRCS} ${NODE_INTERFACE_SRCS}
			${REGION_INTERFACE_SRCS}
			${TRANSFORMATION_INTERFACE_SRCS} )
	ENDIF( WX_USER_INTERFACE )

	# Defines GENERAL_LIB_SRCS
	INCLUDE( source/general_lib.cmake )

	# Defines CORE_FIELDS_LIB_SRCS
	INCLUDE( source/core_fields_lib.cmake )

	# Defines CMGUI_LIB_SRCS
	INCLUDE( source/cmgui_lib.cmake )
	
	LIST( REMOVE_ITEM CMGUI_LIB_SRCS ${CORE_FIELDS_LIB_SRCS} ${GENERAL_LIB_SRCS} )
	MESSAGE( STATUS "files: ${COMMAND_SRCS}" )

	# Define PASS_THROUGH_LIB_SRCS
	SET( PASS_THROUGH_LIB_SRCS "source/command/pass_through_interpreter.c" )

	SET_FILES_COMPILE_FLAGS( "${GENERAL_LIB_SRCS}" )
	SET_FILES_COMPILE_FLAGS( "${CORE_FIELDS_LIB_SRCS}" )
	SET_FILES_COMPILE_FLAGS( "${CMGUI_LIB_SRCS}" )

	SET( TARGET_CMGUI_LIB "cmgui" )
	SET( TARGET_CMGUI_GENERAL_LIB "cmgui_general" )
	SET( TARGET_CMGUI_CORE_FIELDS_LIB "cmgui_core_fields" )
	SET( TARGET_CMGUI_PASS_THROUGH_LIB "cmgui_pass_through" )
	SET( INSTALL_LIBRARY_TYPE "ARCHIVE" )
	IF( ${BUILD_LIBRARY_TYPE} MATCHES "SHARED" )
		SET( INSTALL_LIBRARY_TYPE "LIBRARY" )
	ELSEIF( ${BUILD_LIBRARY_TYPE} MATCHES "MODULE" )
		SET( INSTALL_LIBRARY_TYPE "LIBRARY" )
	ENDIF( ${BUILD_LIBRARY_TYPE} MATCHES "SHARED" )

	ADD_LIBRARY( ${TARGET_CMGUI_LIB} ${BUILD_LIBRARY_TYPE} ${CMGUI_LIB_SRCS} ${CMGUI_LIB_HDRS} )
	ADD_LIBRARY( ${TARGET_CMGUI_GENERAL_LIB} ${BUILD_LIBRARY_TYPE} ${GENERAL_LIB_SRCS} )
	ADD_LIBRARY( ${TARGET_CMGUI_CORE_FIELDS_LIB} ${BUILD_LIBRARY_TYPE} ${CORE_FIELDS_LIB_SRCS} )
	ADD_LIBRARY( ${TARGET_CMGUI_PASS_THROUGH_LIB} ${BUILD_LIBRARY_TYPE} ${PASS_THROUGH_LIB_SRCS} )

	TARGET_LINK_LIBRARIES( ${TARGET_CMGUI_LIB} ${DEPENDENT_LIBS} )
	TARGET_LINK_LIBRARIES( ${TARGET_CMGUI_CORE_FIELDS_LIB} /home/hsorby/development/cmiss/third_party/lib/x86_64-linux/libbz2.a )

	SET_TARGET_PROPERTIES( ${TARGET_CMGUI_LIB} PROPERTIES DEBUG_POSTFIX "d" 
		VERSION "${CMGUI_MAJOR_VERSION}.${CMGUI_MINOR_VERSION}.${CMGUI_PATCH_VERSION}"
		SOVERSION ${CMGUI_MAJOR_VERSION} )
	SET_TARGET_PROPERTIES( ${TARGET_CMGUI_GENERAL_LIB} PROPERTIES DEBUG_POSTFIX "d" 
		VERSION "${CMGUI_MAJOR_VERSION}.${CMGUI_MINOR_VERSION}.${CMGUI_PATCH_VERSION}"
		SOVERSION ${CMGUI_MAJOR_VERSION} )
	SET_TARGET_PROPERTIES( ${TARGET_CMGUI_CORE_FIELDS_LIB} PROPERTIES DEBUG_POSTFIX "d" 
		VERSION "${CMGUI_MAJOR_VERSION}.${CMGUI_MINOR_VERSION}.${CMGUI_PATCH_VERSION}"
		SOVERSION ${CMGUI_MAJOR_VERSION} )
	SET_TARGET_PROPERTIES( ${TARGET_CMGUI_PASS_THROUGH_LIB} PROPERTIES DEBUG_POSTFIX "d" 
		VERSION "${CMGUI_MAJOR_VERSION}.${CMGUI_MINOR_VERSION}.${CMGUI_PATCH_VERSION}"
		SOVERSION ${CMGUI_MAJOR_VERSION} )

	GET_TARGET_PROPERTY( TARGET_CMGUI_GENERAL_LIB_OUTPUT_NAME
		${TARGET_CMGUI_GENERAL_LIB} LOCATION )
	# This is not working for me.  I am trying to get the actual name on disk
	# of the library  being created but I'm just getting the target name.
	CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/source/configure/LIBCMGUIConfig.cmake.in
		${PROJECT_BINARY_DIR}/source/configure/LIBCMGUIConfig.cmake )
	
	INSTALL( TARGETS ${TARGET_CMGUI_LIB} ${INSTALL_LIBRARY_TYPE}
		DESTINATION lib )
	INSTALL( TARGETS ${TARGET_CMGUI_GENERAL_LIB} ${INSTALL_LIBRARY_TYPE}
		DESTINATION lib )
	INSTALL( TARGETS ${TARGET_CMGUI_CORE_FIELDS_LIB} ${INSTALL_LIBRARY_TYPE}
		DESTINATION lib )
	INSTALL( TARGETS ${TARGET_CMGUI_PASS_THROUGH_LIB} ${INSTALL_LIBRARY_TYPE}
		DESTINATION lib )

	# Install headers for cmgui
	SET( CMGUI_LIB_API_INSTALL_HDRS
		${CMAKE_SOURCE_DIR}/source/api/cmiss_command_data.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_fdio.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_alias.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_arithmetic_operators.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_composite.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_conditional.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_image.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_image_processing.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_logical_operators.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_field_trigonometry.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_graphics_window.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_idle.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_region.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_scene_viewer.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_texture.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_time.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_time_keeper.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_timer.h )

	# Install headers for cmgui_general
	SET( GENERAL_LIB_API_INSTALL_HDRS	${CMAKE_SOURCE_DIR}/source/api/cmiss_core.h )

	# Install headers for cmgui_core_fields
	SET( CORE_FIELDS_LIB_API_INSTALL_HDRS ${CMAKE_SOURCE_DIR}/source/api/cmiss_element.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_node.h
		${CMAKE_SOURCE_DIR}/source/api/cmiss_time_sequence.h )

	# Install headers for pass_through_interpreter
	SET( PASS_THROUGH_LIB_COMMAND_INSTALL_HDRS 
		${CMAKE_SOURCE_DIR}/source/command/pass_through_interpreter.h )

	# Files that always need to be installed
	INSTALL( FILES ${PROJECT_BINARY_DIR}/source/configure/LIBCMGUIConfig.cmake
		${PROJECT_BINARY_DIR}/source/configure/cmgui_configure.h
		DESTINATION include/cmgui/configure )
	# Api directory installs
	INSTALL( FILES ${CMGUI_LIB_API_INSTALL_HDRS}
		${GENERAL_LIB_API_INSTALL_HDRS}
		${CORE_FIELDS_LIB_INSTALL_HDRS}
		DESTINATION include/cmgui/api )

ENDIF( CMGUI_BUILD_EXECUTABLE )

