
CMAKE_MINIMUM_REQUIRED( VERSION 2.8.1 )

PROJECT(CmguiApplication)

SET( CMGUI_MAJOR_VERSION "3" )
SET( CMGUI_MINOR_VERSION "0" )
SET( CMGUI_PATCH_VERSION "0" )
SET( CMGUI_VERSION ${CMGUI_MAJOR_VERSION}.${CMGUI_MINOR_VERSION}.${CMGUI_PATCH_VERSION} )

MACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )
    IF( NOT DEFINED ${OPTION_NAME} )
        SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
    ENDIF( NOT DEFINED ${OPTION_NAME} )

    SET( ${OPTION_NAME} "${OPTION_DEFAULT}" CACHE ${OPTION_TYPE} "${OPTION_STRING}" )
ENDMACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )

CACHE_VAR_WITH_DEFAULT( CMGUI_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
    PATH "Where do you want your Cmgui libraries installed?" )
SET( CMAKE_INSTALL_PREFIX ${CMGUI_INSTALL_PREFIX} CACHE INTERNAL "Internalise CMAKE_INSTALL_PREFIX, manipulate via CMGUI_INSTALL_PREFIX" FORCE )
CACHE_VAR_WITH_DEFAULT( CMGUI_BUILD_TYPE "Release"
    STRING "What configuration do you want to build: Debug, Release, MinSizeRel, RelWithDebugInfo" )
SET( CMAKE_BUILD_TYPE ${CMGUI_BUILD_TYPE} CACHE INTERNAL "Internalise CMAKE_BUILD_TYPE, manipulate via CMGUI_BUILD_TYPE" FORCE )

SET( WXWIDGETS_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Location of the Cmgui's wxWidgets libraries." )

SET( CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" )

FIND_PACKAGE( perl_interpreter QUIET )

OPTION( USE_PERL_INTERPRETER "Do you want to use the perl interpreter?" FALSE )
OPTION( WX_USER_INTERFACE "use wx for interface." )
OPTION( GTK_USER_INTERFACE "use gtk for interface." )
OPTION( WIN32_USER_INTERFACE "use win32 for interface." )

IF(WIN32)
    SET( WIN32_SYSTEM TRUE )
ENDIF()

IF( WX_USER_INTERFACE )
    SET( CMAKE_PREFIX_PATH ${WXWIDGETS_INSTALL_PREFIX} )
    FIND_PACKAGE( wxWidgets QUIET COMPONENTS xrc adv html gl xml core base )
    SET( CAN_USE_USER_INTERFACE ${wxWidgets_FOUND} )
ENDIF( WX_USER_INTERFACE )
IF( GTK_USER_INTERFACE )
    FIND_PACKAGE( GTK2 REQUIRED gtk)
    FIND_PACKAGE( GTKGLext REQUIRED )
    SET( CAN_USE_USER_INTERFACE ${GTK2_FOUND} )
ENDIF( GTK_USER_INTERFACE )
IF( WIN32_USER_INTERFACE AND WIN32 )
    SET( CAN_USE_USER_INTERFACE TRUE )
ENDIF( WIN32_USER_INTERFACE AND WIN32 )

# Find our friendly Zinc CMake config file.
# We can only use the static version of the library for the Cmgui application
SET( ZINC_USE_STATIC TRUE )
FIND_PACKAGE( Zinc REQUIRED )

IF( MSVC )
    SET( EXTRA_COMPILER_DEFINITIONS _CRT_SECURE_NO_WARNINGS )
ENDIF( MSVC )

# User interfaces
# wxwidgets - is a config file on win32 and not on configure enabled platforms
IF( WX_USER_INTERFACE )
    FUNCTION( WXWIDGETS_HDRS XRC_SRCS _OUTFILES )

            FOREACH( XRC_SRC ${XRC_SRCS} )
                    STRING( REGEX MATCH "(.*)/([a-z_A-Z]*)\\.xrc$" DUMMY "${XRC_SRC}" )
                    IF( NOT EXISTS ${PROJECT_BINARY_DIR}/${CMAKE_MATCH_1} )
                            FILE( MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_MATCH_1} )
                    ENDIF( NOT EXISTS ${PROJECT_BINARY_DIR}/${CMAKE_MATCH_1} )
                    SET( XRC_FCN ${CMAKE_MATCH_2} )
                    WXWIDGETS_ADD_RESOURCES( XRC_OUTPUT ${XRC_SRC} OPTIONS --cpp-code
                            --function=wxXmlInit_${XRC_FCN} --output=${PROJECT_BINARY_DIR}/${XRC_SRC}h )
            ENDFOREACH( XRC_SRC ${XRC_SRCS} )

            SET( ${_OUTFILES} ${XRC_OUTPUT} PARENT_SCOPE )
    ENDFUNCTION( WXWIDGETS_HDRS _OUTFILES )

    IF( WIN32 AND NOT CYGWIN AND NOT MSYS )
        # Do nothing, have config file
    ELSE( WIN32 AND NOT CYGWIN AND NOT MSYS )
        IF( UNIX OR MSYS )
            IF( ${CMAKE_BUILD_TYPE} MATCHES "[Dd]ebug" )
                SET( wxWidgets_USE_DEBUG TRUE )
            ELSE( ${CMAKE_BUILD_TYPE} MATCHES "[Dd]ebug" )
                SET( wxWidgets_USE_DEBUG FALSE )
            ENDIF( ${CMAKE_BUILD_TYPE} MATCHES "[Dd]ebug" )
            SET( wxWidgets_USE_UNICODE FALSE )
            SET( wxWidgets_USE_UNIVERSAL FALSE )
            SET( wxWidgets_USE_STATIC TRUE )
            FIND_PACKAGE( wxWidgets COMPONENTS xrc adv html
                gl xml core base )
        ENDIF( UNIX OR MSYS )
    ENDIF( WIN32 AND NOT CYGWIN AND NOT MSYS )
    IF( wxWidgets_FOUND )
        # Order of components here is important when linking static libraries
        SET( USE_WXWIDGETS TRUE )
        MARK_AS_ADVANCED( wxWidgets_DIR )
        DBG_MSG( "C FLAGS: ${wxWidgets_CXX_FLAGS}" )
        DBG_MSG( "LIBS: ${wxWidgets_LIBRARIES}" )
        SET( WXWIDGETS_LIBRARIES ${wxWidgets_LIBRARIES} )
        DBG_MSG( "DEFS: ${wxWidgets_DEFINITIONS}" )
        DBG_MSG( "INC_DIRS: ${wxWidgets_INCLUDE_DIRS}" )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${wxWidgets_CXX_FLAGS}" )
        SET( DEPENDENT_DEFINITIONS ${DEPENDENT_DEFINITIONS} ${wxWidgets_DEFINITIONS} )
        SET( DEPENDENT_CONFIGS "${DEPENDENT_CONFIGS}\nSET( wxWidgets_wxrc_EXECUTABLE ${wxWidgets_wxrc_EXECUTABLE} )" )
        IF( MSVC )
            SET( EXTRA_COMPILER_DEFINITIONS ${EXTRA_COMPILER_DEFINITIONS} wxUSE_NO_MANIFEST=1 )
            SET( DEPENDENT_DEFINITIONS ${DEPENDENT_DEFINITIONS} wxUSE_NO_MANIFEST=1 )
        ENDIF( MSVC )
        INCLUDE( source/cmake/xrc_source_files.cmake )
        DBG_MSG( "XRC SRCS: ${XRC_SRCS}" )
        WXWIDGETS_HDRS( "${XRC_SRCS}" wxWidgets_GENERATED_HDRS )
    ELSE( wxWidgets_FOUND )
        MESSAGE( FATAL_ERROR "wxWidgets was requested but not found." )
    ENDIF( wxWidgets_FOUND )
ENDIF( WX_USER_INTERFACE )

IF( GTK_USER_INTERFACE )
    IF( GTK2_FOUND )
        IF( NOT GTKGLEXT_FOUND )
            MESSAGE( FATAL_ERROR "gtkglext was requested but not found." )
        ENDIF( GTKGLEXT_FOUND )
    ELSE( GTK2_FOUND )
        MESSAGE( FATAL_ERROR "gtk2 was requested but not found." )
    ENDIF( GTK2_FOUND )
ENDIF( GTK_USER_INTERFACE )

INCLUDE(source/cmake/app_srcs.cmake)
INCLUDE(source/cmake/app_hdrs.cmake)

SET( CMISS_VERSION_STRING "\"${CMGUI_VERSION}\"" )
SET( CMISS_SVN_REVISION_STRING "\"xxxx\"" )
SET( CMISS_BUILD_STRING "\"wx os\"" )
SET( CMGUI_CONFIGURE_HDR ${PROJECT_BINARY_DIR}/source/configure/cmgui_configure.h )
SET( CMGUI_VERSION_HDR ${PROJECT_BINARY_DIR}/source/configure/version.h )
CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/source/configure/cmgui_configure.h.cmake ${CMGUI_CONFIGURE_HDR} )
CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/source/configure/version.h.cmake ${CMGUI_VERSION_HDR} )

# To get the internal headers we derive a header search path from the build header source path.
# Obviously this will not work if you configure with Zinc's install tree.
LIST( GET ZINC_INCLUDE_DIRS 0 ZINC_PRIVATE_INCLUDE_DIRS )
SET( ZINC_PRIVATE_INCLUDE_DIRS "${ZINC_PRIVATE_INCLUDE_DIRS}/.." )

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/source ${CMAKE_CURRENT_BINARY_DIR}/source
    ${ZINC_INCLUDE_DIRS} ${ZINC_PRIVATE_INCLUDE_DIRS}
    ${wxWidgets_INCLUDE_DIRS} ${FIELDML_INCLUDE_DIRS}
    ${ITK_INCLUDE_DIRS} ${PERL_INTERPRETER_INCLUDE_DIRS} )

FOREACH( DEF ${EXTRA_COMPILER_DEFINITIONS} ${DEPENDENT_DEFINITIONS} )
    ADD_DEFINITIONS( -D${DEF} )
ENDFOREACH( DEF ${EXTRA_COMPILER_DEFINITIONS} ${DEPENDENT_DEFINITIONS} )

SET( CMGUI_TARGET cmgui )
ADD_EXECUTABLE( ${CMGUI_TARGET} WIN32 ${APP_SRCS} ${APP_HDRS} ${CMGUI_CONFIGURE_HDR} ${CMGUI_VERSION_HDR} ${wxWidgets_GENERATED_HDRS} )

SET_TARGET_PROPERTIES( ${CMGUI_TARGET} PROPERTIES DEBUG_POSTFIX "d" COMPILE_DEFINITIONS_RELEASE OPTIMISED )

TARGET_LINK_LIBRARIES( ${CMGUI_TARGET} zinc-static ${PERL_INTERPRETER_LIBRARIES} ${WXWIDGETS_LIBRARIES} )

